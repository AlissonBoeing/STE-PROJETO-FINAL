
dtmdsimulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800200  000053bc  00005450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000053bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800382  00800382  000055d2  2**0
                  ALLOC
  3 .stab         00006d8c  00000000  00000000  000055d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f33  00000000  00000000  0000c360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f293  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000f2a4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	95 c0       	rjmp	.+298    	; 0x154 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	93 c0       	rjmp	.+294    	; 0x154 <__bad_interrupt>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <__vector_25>
      68:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__vector_26>
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <__vector_36>
      94:	0c 94 fa 25 	jmp	0x4bf4	; 0x4bf4 <__vector_37>
      98:	5d c0       	rjmp	.+186    	; 0x154 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c0       	rjmp	.+182    	; 0x154 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	59 c0       	rjmp	.+178    	; 0x154 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	57 c0       	rjmp	.+174    	; 0x154 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	55 c0       	rjmp	.+170    	; 0x154 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	53 c0       	rjmp	.+166    	; 0x154 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	51 c0       	rjmp	.+162    	; 0x154 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4f c0       	rjmp	.+158    	; 0x154 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4d c0       	rjmp	.+154    	; 0x154 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4b c0       	rjmp	.+150    	; 0x154 <__bad_interrupt>
      be:	00 00       	nop
      c0:	49 c0       	rjmp	.+146    	; 0x154 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	47 c0       	rjmp	.+142    	; 0x154 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	45 c0       	rjmp	.+138    	; 0x154 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <__vector_51>
      d0:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__vector_52>
      d4:	3f c0       	rjmp	.+126    	; 0x154 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 90 26 	jmp	0x4d20	; 0x4d20 <__vector_54>
      dc:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <__vector_55>
      e0:	39 c0       	rjmp	.+114    	; 0x154 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	da 0a       	sbc	r13, r26
      e6:	ce 0b       	sbc	r28, r30
      e8:	ce 0b       	sbc	r28, r30
      ea:	ce 0b       	sbc	r28, r30
      ec:	ce 0b       	sbc	r28, r30
      ee:	ce 0b       	sbc	r28, r30
      f0:	ce 0b       	sbc	r28, r30
      f2:	e5 09       	sbc	r30, r5
      f4:	ce 0b       	sbc	r28, r30
      f6:	ce 0b       	sbc	r28, r30
      f8:	ce 0b       	sbc	r28, r30
      fa:	ce 0b       	sbc	r28, r30
      fc:	ce 0b       	sbc	r28, r30
      fe:	95 01       	movw	r18, r10
     100:	3d 02       	muls	r19, r29
     102:	e5 02       	muls	r30, r21
     104:	8d 03       	fmulsu	r16, r21
     106:	34 04       	cpc	r3, r4
     108:	1c 05       	cpc	r17, r12
     10a:	11 06       	cpc	r1, r17
     10c:	06 07       	cpc	r16, r22
     10e:	fb 07       	cpc	r31, r27
     110:	f0 08       	sbc	r15, r0

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	13 e0       	ldi	r17, 0x03	; 3
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ec eb       	ldi	r30, 0xBC	; 188
     12a:	f3 e5       	ldi	r31, 0x53	; 83
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a2 38       	cpi	r26, 0x82	; 130
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	23 e0       	ldi	r18, 0x03	; 3
     13e:	a2 e8       	ldi	r26, 0x82	; 130
     140:	b3 e0       	ldi	r27, 0x03	; 3
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	aa 38       	cpi	r26, 0x8A	; 138
     148:	b2 07       	cpc	r27, r18
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 a0 14 	call	0x2940	; 0x2940 <main>
     150:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <_ZN4DTMFC1EP4GPIOS1_S1_S1_S1_S1_S1_S1_>:
#include "DTMF.h"
#include "GPIO.h"
#include <util/delay.h>

DTMF::DTMF(GPIO * c1, GPIO * c2, GPIO * c3, GPIO * c4, GPIO *l1,
     156:	8f 92       	push	r8
     158:	9f 92       	push	r9
     15a:	af 92       	push	r10
     15c:	bf 92       	push	r11
     15e:	cf 92       	push	r12
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	62 97       	sbiw	r28, 0x12	; 18
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	f8 94       	cli
     178:	de bf       	out	0x3e, r29	; 62
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	7c 83       	std	Y+4, r23	; 0x04
     184:	6b 83       	std	Y+3, r22	; 0x03
     186:	5e 83       	std	Y+6, r21	; 0x06
     188:	4d 83       	std	Y+5, r20	; 0x05
     18a:	38 87       	std	Y+8, r19	; 0x08
     18c:	2f 83       	std	Y+7, r18	; 0x07
     18e:	1a 87       	std	Y+10, r17	; 0x0a
     190:	09 87       	std	Y+9, r16	; 0x09
     192:	fc 86       	std	Y+12, r15	; 0x0c
     194:	eb 86       	std	Y+11, r14	; 0x0b
     196:	de 86       	std	Y+14, r13	; 0x0e
     198:	cd 86       	std	Y+13, r12	; 0x0d
     19a:	b8 8a       	std	Y+16, r11	; 0x10
     19c:	af 86       	std	Y+15, r10	; 0x0f
     19e:	9a 8a       	std	Y+18, r9	; 0x12
     1a0:	89 8a       	std	Y+17, r8	; 0x11
		GPIO * l2, GPIO * l3, GPIO * l4){
	this->c1 = c1;
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	9a 81       	ldd	r25, Y+2	; 0x02
     1a6:	2b 81       	ldd	r18, Y+3	; 0x03
     1a8:	3c 81       	ldd	r19, Y+4	; 0x04
     1aa:	fc 01       	movw	r30, r24
     1ac:	31 83       	std	Z+1, r19	; 0x01
     1ae:	20 83       	st	Z, r18
	this->c2 = c2;
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	2d 81       	ldd	r18, Y+5	; 0x05
     1b6:	3e 81       	ldd	r19, Y+6	; 0x06
     1b8:	fc 01       	movw	r30, r24
     1ba:	33 83       	std	Z+3, r19	; 0x03
     1bc:	22 83       	std	Z+2, r18	; 0x02
	this->c3 = c3;
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	9a 81       	ldd	r25, Y+2	; 0x02
     1c2:	2f 81       	ldd	r18, Y+7	; 0x07
     1c4:	38 85       	ldd	r19, Y+8	; 0x08
     1c6:	fc 01       	movw	r30, r24
     1c8:	35 83       	std	Z+5, r19	; 0x05
     1ca:	24 83       	std	Z+4, r18	; 0x04
	this->c4 = c4;
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	9a 81       	ldd	r25, Y+2	; 0x02
     1d0:	29 85       	ldd	r18, Y+9	; 0x09
     1d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     1d4:	fc 01       	movw	r30, r24
     1d6:	37 83       	std	Z+7, r19	; 0x07
     1d8:	26 83       	std	Z+6, r18	; 0x06

	this->l1 = l1;
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	2b 85       	ldd	r18, Y+11	; 0x0b
     1e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     1e2:	fc 01       	movw	r30, r24
     1e4:	31 87       	std	Z+9, r19	; 0x09
     1e6:	20 87       	std	Z+8, r18	; 0x08
	this->l2 = l2;
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	9a 81       	ldd	r25, Y+2	; 0x02
     1ec:	2d 85       	ldd	r18, Y+13	; 0x0d
     1ee:	3e 85       	ldd	r19, Y+14	; 0x0e
     1f0:	fc 01       	movw	r30, r24
     1f2:	33 87       	std	Z+11, r19	; 0x0b
     1f4:	22 87       	std	Z+10, r18	; 0x0a
	this->l3 = l3;
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	9a 81       	ldd	r25, Y+2	; 0x02
     1fa:	2f 85       	ldd	r18, Y+15	; 0x0f
     1fc:	38 89       	ldd	r19, Y+16	; 0x10
     1fe:	fc 01       	movw	r30, r24
     200:	35 87       	std	Z+13, r19	; 0x0d
     202:	24 87       	std	Z+12, r18	; 0x0c
	this->l4 = l4;
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	9a 81       	ldd	r25, Y+2	; 0x02
     208:	29 89       	ldd	r18, Y+17	; 0x11
     20a:	3a 89       	ldd	r19, Y+18	; 0x12
     20c:	fc 01       	movw	r30, r24
     20e:	37 87       	std	Z+15, r19	; 0x0f
     210:	26 87       	std	Z+14, r18	; 0x0e

	this->c1->set(true);
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	fc 01       	movw	r30, r24
     218:	80 81       	ld	r24, Z
     21a:	91 81       	ldd	r25, Z+1	; 0x01
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>
	this->c2->set(true);
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	fc 01       	movw	r30, r24
     228:	82 81       	ldd	r24, Z+2	; 0x02
     22a:	93 81       	ldd	r25, Z+3	; 0x03
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>
	this->c3->set(true);
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	9a 81       	ldd	r25, Y+2	; 0x02
     236:	fc 01       	movw	r30, r24
     238:	84 81       	ldd	r24, Z+4	; 0x04
     23a:	95 81       	ldd	r25, Z+5	; 0x05
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>
	this->c4->set(true);
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	9a 81       	ldd	r25, Y+2	; 0x02
     246:	fc 01       	movw	r30, r24
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	97 81       	ldd	r25, Z+7	; 0x07
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>

	this->l1->set(true);
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	fc 01       	movw	r30, r24
     258:	80 85       	ldd	r24, Z+8	; 0x08
     25a:	91 85       	ldd	r25, Z+9	; 0x09
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>
	this->l2->set(true);
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	fc 01       	movw	r30, r24
     268:	82 85       	ldd	r24, Z+10	; 0x0a
     26a:	93 85       	ldd	r25, Z+11	; 0x0b
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>
	this->l3->set(true);
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	fc 01       	movw	r30, r24
     278:	84 85       	ldd	r24, Z+12	; 0x0c
     27a:	95 85       	ldd	r25, Z+13	; 0x0d
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>
	this->l4->set(true);
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	fc 01       	movw	r30, r24
     288:	86 85       	ldd	r24, Z+14	; 0x0e
     28a:	97 85       	ldd	r25, Z+15	; 0x0f
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN4GPIO3setEb>
}
     292:	62 96       	adiw	r28, 0x12	; 18
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	bf 90       	pop	r11
     2b0:	af 90       	pop	r10
     2b2:	9f 90       	pop	r9
     2b4:	8f 90       	pop	r8
     2b6:	08 95       	ret

000002b8 <_ZN4DTMF4sendEc>:

void DTMF::send(char digito){
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	cd 5a       	subi	r28, 0xAD	; 173
     2c6:	d1 09       	sbc	r29, r1
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	9e 01       	movw	r18, r28
     2d4:	25 55       	subi	r18, 0x55	; 85
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	f9 01       	movw	r30, r18
     2da:	91 83       	std	Z+1, r25	; 0x01
     2dc:	80 83       	st	Z, r24
     2de:	ce 01       	movw	r24, r28
     2e0:	83 55       	subi	r24, 0x53	; 83
     2e2:	9f 4f       	sbci	r25, 0xFF	; 255
     2e4:	fc 01       	movw	r30, r24
     2e6:	60 83       	st	Z, r22
	int delay = 25;
     2e8:	89 e1       	ldi	r24, 0x19	; 25
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	9a 83       	std	Y+2, r25	; 0x02
     2ee:	89 83       	std	Y+1, r24	; 0x01
	switch(digito){
     2f0:	ce 01       	movw	r24, r28
     2f2:	83 55       	subi	r24, 0x53	; 83
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	88 2f       	mov	r24, r24
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	09 2e       	mov	r0, r25
     300:	00 0c       	add	r0, r0
     302:	aa 0b       	sbc	r26, r26
     304:	bb 0b       	sbc	r27, r27
     306:	43 e2       	ldi	r20, 0x23	; 35
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	26 e1       	ldi	r18, 0x16	; 22
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	84 1b       	sub	r24, r20
     310:	95 0b       	sbc	r25, r21
     312:	28 17       	cp	r18, r24
     314:	39 07       	cpc	r19, r25
     316:	10 f4       	brcc	.+4      	; 0x31c <_ZN4DTMF4sendEc+0x64>
     318:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>
     31c:	fc 01       	movw	r30, r24
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 0d 28 	jmp	0x501a	; 0x501a <__tablejump2__>
		case '0':
			l4->toggle();
     32a:	ce 01       	movw	r24, r28
     32c:	85 55       	subi	r24, 0x55	; 85
     32e:	9f 4f       	sbci	r25, 0xFF	; 255
     330:	fc 01       	movw	r30, r24
     332:	80 81       	ld	r24, Z
     334:	91 81       	ldd	r25, Z+1	; 0x01
     336:	fc 01       	movw	r30, r24
     338:	86 85       	ldd	r24, Z+14	; 0x0e
     33a:	97 85       	ldd	r25, Z+15	; 0x0f
     33c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			l2->toggle();
     340:	ce 01       	movw	r24, r28
     342:	85 55       	subi	r24, 0x55	; 85
     344:	9f 4f       	sbci	r25, 0xFF	; 255
     346:	fc 01       	movw	r30, r24
     348:	80 81       	ld	r24, Z
     34a:	91 81       	ldd	r25, Z+1	; 0x01
     34c:	fc 01       	movw	r30, r24
     34e:	82 85       	ldd	r24, Z+10	; 0x0a
     350:	93 85       	ldd	r25, Z+11	; 0x0b
     352:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	09 2e       	mov	r0, r25
     35c:	00 0c       	add	r0, r0
     35e:	aa 0b       	sbc	r26, r26
     360:	bb 0b       	sbc	r27, r27
     362:	bc 01       	movw	r22, r24
     364:	cd 01       	movw	r24, r26
     366:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     36a:	dc 01       	movw	r26, r24
     36c:	cb 01       	movw	r24, r22
     36e:	8b 83       	std	Y+3, r24	; 0x03
     370:	9c 83       	std	Y+4, r25	; 0x04
     372:	ad 83       	std	Y+5, r26	; 0x05
     374:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4a e7       	ldi	r20, 0x7A	; 122
     37c:	55 e4       	ldi	r21, 0x45	; 69
     37e:	6b 81       	ldd	r22, Y+3	; 0x03
     380:	7c 81       	ldd	r23, Y+4	; 0x04
     382:	8d 81       	ldd	r24, Y+5	; 0x05
     384:	9e 81       	ldd	r25, Y+6	; 0x06
     386:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	8f 83       	std	Y+7, r24	; 0x07
     390:	98 87       	std	Y+8, r25	; 0x08
     392:	a9 87       	std	Y+9, r26	; 0x09
     394:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	5f e3       	ldi	r21, 0x3F	; 63
     39e:	6f 81       	ldd	r22, Y+7	; 0x07
     3a0:	78 85       	ldd	r23, Y+8	; 0x08
     3a2:	89 85       	ldd	r24, Y+9	; 0x09
     3a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a6:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     3aa:	88 23       	and	r24, r24
     3ac:	2c f4       	brge	.+10     	; 0x3b8 <_ZN4DTMF4sendEc+0x100>
		__ticks = 1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	9c 87       	std	Y+12, r25	; 0x0c
     3b4:	8b 87       	std	Y+11, r24	; 0x0b
     3b6:	3f c0       	rjmp	.+126    	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
	else if (__tmp > 65535)
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	3f ef       	ldi	r19, 0xFF	; 255
     3bc:	4f e7       	ldi	r20, 0x7F	; 127
     3be:	57 e4       	ldi	r21, 0x47	; 71
     3c0:	6f 81       	ldd	r22, Y+7	; 0x07
     3c2:	78 85       	ldd	r23, Y+8	; 0x08
     3c4:	89 85       	ldd	r24, Y+9	; 0x09
     3c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c8:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     3cc:	18 16       	cp	r1, r24
     3ce:	4c f5       	brge	.+82     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e2       	ldi	r20, 0x20	; 32
     3d6:	51 e4       	ldi	r21, 0x41	; 65
     3d8:	6b 81       	ldd	r22, Y+3	; 0x03
     3da:	7c 81       	ldd	r23, Y+4	; 0x04
     3dc:	8d 81       	ldd	r24, Y+5	; 0x05
     3de:	9e 81       	ldd	r25, Y+6	; 0x06
     3e0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	9c 87       	std	Y+12, r25	; 0x0c
     3f6:	8b 87       	std	Y+11, r24	; 0x0b
     3f8:	0f c0       	rjmp	.+30     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     3fa:	80 e9       	ldi	r24, 0x90	; 144
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	9e 87       	std	Y+14, r25	; 0x0e
     400:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     402:	8d 85       	ldd	r24, Y+13	; 0x0d
     404:	9e 85       	ldd	r25, Y+14	; 0x0e
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     40a:	9e 87       	std	Y+14, r25	; 0x0e
     40c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     40e:	8b 85       	ldd	r24, Y+11	; 0x0b
     410:	9c 85       	ldd	r25, Y+12	; 0x0c
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	9c 87       	std	Y+12, r25	; 0x0c
     416:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     418:	8b 85       	ldd	r24, Y+11	; 0x0b
     41a:	9c 85       	ldd	r25, Y+12	; 0x0c
     41c:	89 2b       	or	r24, r25
     41e:	69 f7       	brne	.-38     	; 0x3fa <_ZN4DTMF4sendEc+0x142>
     420:	14 c0       	rjmp	.+40     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     422:	6f 81       	ldd	r22, Y+7	; 0x07
     424:	78 85       	ldd	r23, Y+8	; 0x08
     426:	89 85       	ldd	r24, Y+9	; 0x09
     428:	9a 85       	ldd	r25, Y+10	; 0x0a
     42a:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	9c 87       	std	Y+12, r25	; 0x0c
     434:	8b 87       	std	Y+11, r24	; 0x0b
     436:	8b 85       	ldd	r24, Y+11	; 0x0b
     438:	9c 85       	ldd	r25, Y+12	; 0x0c
     43a:	98 8b       	std	Y+16, r25	; 0x10
     43c:	8f 87       	std	Y+15, r24	; 0x0f
     43e:	8f 85       	ldd	r24, Y+15	; 0x0f
     440:	98 89       	ldd	r25, Y+16	; 0x10
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     446:	98 8b       	std	Y+16, r25	; 0x10
     448:	8f 87       	std	Y+15, r24	; 0x0f
			l4->toggle();
     44a:	ce 01       	movw	r24, r28
     44c:	85 55       	subi	r24, 0x55	; 85
     44e:	9f 4f       	sbci	r25, 0xFF	; 255
     450:	fc 01       	movw	r30, r24
     452:	80 81       	ld	r24, Z
     454:	91 81       	ldd	r25, Z+1	; 0x01
     456:	fc 01       	movw	r30, r24
     458:	86 85       	ldd	r24, Z+14	; 0x0e
     45a:	97 85       	ldd	r25, Z+15	; 0x0f
     45c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			l2->toggle();
     460:	ce 01       	movw	r24, r28
     462:	85 55       	subi	r24, 0x55	; 85
     464:	9f 4f       	sbci	r25, 0xFF	; 255
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	fc 01       	movw	r30, r24
     46e:	82 85       	ldd	r24, Z+10	; 0x0a
     470:	93 85       	ldd	r25, Z+11	; 0x0b
     472:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     476:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '1':
			l1->toggle();
     47a:	ce 01       	movw	r24, r28
     47c:	85 55       	subi	r24, 0x55	; 85
     47e:	9f 4f       	sbci	r25, 0xFF	; 255
     480:	fc 01       	movw	r30, r24
     482:	80 81       	ld	r24, Z
     484:	91 81       	ldd	r25, Z+1	; 0x01
     486:	fc 01       	movw	r30, r24
     488:	80 85       	ldd	r24, Z+8	; 0x08
     48a:	91 85       	ldd	r25, Z+9	; 0x09
     48c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
     490:	ce 01       	movw	r24, r28
     492:	85 55       	subi	r24, 0x55	; 85
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	fc 01       	movw	r30, r24
     498:	80 81       	ld	r24, Z
     49a:	91 81       	ldd	r25, Z+1	; 0x01
     49c:	fc 01       	movw	r30, r24
     49e:	80 81       	ld	r24, Z
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	09 2e       	mov	r0, r25
     4ac:	00 0c       	add	r0, r0
     4ae:	aa 0b       	sbc	r26, r26
     4b0:	bb 0b       	sbc	r27, r27
     4b2:	bc 01       	movw	r22, r24
     4b4:	cd 01       	movw	r24, r26
     4b6:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	89 8b       	std	Y+17, r24	; 0x11
     4c0:	9a 8b       	std	Y+18, r25	; 0x12
     4c2:	ab 8b       	std	Y+19, r26	; 0x13
     4c4:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	4a e7       	ldi	r20, 0x7A	; 122
     4cc:	55 e4       	ldi	r21, 0x45	; 69
     4ce:	69 89       	ldd	r22, Y+17	; 0x11
     4d0:	7a 89       	ldd	r23, Y+18	; 0x12
     4d2:	8b 89       	ldd	r24, Y+19	; 0x13
     4d4:	9c 89       	ldd	r25, Y+20	; 0x14
     4d6:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	8d 8b       	std	Y+21, r24	; 0x15
     4e0:	9e 8b       	std	Y+22, r25	; 0x16
     4e2:	af 8b       	std	Y+23, r26	; 0x17
     4e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e8       	ldi	r20, 0x80	; 128
     4ec:	5f e3       	ldi	r21, 0x3F	; 63
     4ee:	6d 89       	ldd	r22, Y+21	; 0x15
     4f0:	7e 89       	ldd	r23, Y+22	; 0x16
     4f2:	8f 89       	ldd	r24, Y+23	; 0x17
     4f4:	98 8d       	ldd	r25, Y+24	; 0x18
     4f6:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     4fa:	88 23       	and	r24, r24
     4fc:	2c f4       	brge	.+10     	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
		__ticks = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9a 8f       	std	Y+26, r25	; 0x1a
     504:	89 8f       	std	Y+25, r24	; 0x19
     506:	3f c0       	rjmp	.+126    	; 0x586 <__FUSE_REGION_LENGTH__+0x186>
	else if (__tmp > 65535)
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	3f ef       	ldi	r19, 0xFF	; 255
     50c:	4f e7       	ldi	r20, 0x7F	; 127
     50e:	57 e4       	ldi	r21, 0x47	; 71
     510:	6d 89       	ldd	r22, Y+21	; 0x15
     512:	7e 89       	ldd	r23, Y+22	; 0x16
     514:	8f 89       	ldd	r24, Y+23	; 0x17
     516:	98 8d       	ldd	r25, Y+24	; 0x18
     518:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     51c:	18 16       	cp	r1, r24
     51e:	4c f5       	brge	.+82     	; 0x572 <__FUSE_REGION_LENGTH__+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e2       	ldi	r20, 0x20	; 32
     526:	51 e4       	ldi	r21, 0x41	; 65
     528:	69 89       	ldd	r22, Y+17	; 0x11
     52a:	7a 89       	ldd	r23, Y+18	; 0x12
     52c:	8b 89       	ldd	r24, Y+19	; 0x13
     52e:	9c 89       	ldd	r25, Y+20	; 0x14
     530:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	9a 8f       	std	Y+26, r25	; 0x1a
     546:	89 8f       	std	Y+25, r24	; 0x19
     548:	0f c0       	rjmp	.+30     	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
     54a:	80 e9       	ldi	r24, 0x90	; 144
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	9c 8f       	std	Y+28, r25	; 0x1c
     550:	8b 8f       	std	Y+27, r24	; 0x1b
     552:	8b 8d       	ldd	r24, Y+27	; 0x1b
     554:	9c 8d       	ldd	r25, Y+28	; 0x1c
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <__FUSE_REGION_LENGTH__+0x156>
     55a:	9c 8f       	std	Y+28, r25	; 0x1c
     55c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55e:	89 8d       	ldd	r24, Y+25	; 0x19
     560:	9a 8d       	ldd	r25, Y+26	; 0x1a
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	9a 8f       	std	Y+26, r25	; 0x1a
     566:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     568:	89 8d       	ldd	r24, Y+25	; 0x19
     56a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     56c:	89 2b       	or	r24, r25
     56e:	69 f7       	brne	.-38     	; 0x54a <__FUSE_REGION_LENGTH__+0x14a>
     570:	14 c0       	rjmp	.+40     	; 0x59a <__FUSE_REGION_LENGTH__+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     572:	6d 89       	ldd	r22, Y+21	; 0x15
     574:	7e 89       	ldd	r23, Y+22	; 0x16
     576:	8f 89       	ldd	r24, Y+23	; 0x17
     578:	98 8d       	ldd	r25, Y+24	; 0x18
     57a:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	9a 8f       	std	Y+26, r25	; 0x1a
     584:	89 8f       	std	Y+25, r24	; 0x19
     586:	89 8d       	ldd	r24, Y+25	; 0x19
     588:	9a 8d       	ldd	r25, Y+26	; 0x1a
     58a:	9e 8f       	std	Y+30, r25	; 0x1e
     58c:	8d 8f       	std	Y+29, r24	; 0x1d
     58e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     590:	9e 8d       	ldd	r25, Y+30	; 0x1e
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <__FUSE_REGION_LENGTH__+0x192>
     596:	9e 8f       	std	Y+30, r25	; 0x1e
     598:	8d 8f       	std	Y+29, r24	; 0x1d
			l1->toggle();
     59a:	ce 01       	movw	r24, r28
     59c:	85 55       	subi	r24, 0x55	; 85
     59e:	9f 4f       	sbci	r25, 0xFF	; 255
     5a0:	fc 01       	movw	r30, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	fc 01       	movw	r30, r24
     5a8:	80 85       	ldd	r24, Z+8	; 0x08
     5aa:	91 85       	ldd	r25, Z+9	; 0x09
     5ac:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
     5b0:	ce 01       	movw	r24, r28
     5b2:	85 55       	subi	r24, 0x55	; 85
     5b4:	9f 4f       	sbci	r25, 0xFF	; 255
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	fc 01       	movw	r30, r24
     5be:	80 81       	ld	r24, Z
     5c0:	91 81       	ldd	r25, Z+1	; 0x01
     5c2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     5c6:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '2':
			l1->toggle();
     5ca:	ce 01       	movw	r24, r28
     5cc:	85 55       	subi	r24, 0x55	; 85
     5ce:	9f 4f       	sbci	r25, 0xFF	; 255
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	91 81       	ldd	r25, Z+1	; 0x01
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 85       	ldd	r24, Z+8	; 0x08
     5da:	91 85       	ldd	r25, Z+9	; 0x09
     5dc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			c2->toggle();
     5e0:	ce 01       	movw	r24, r28
     5e2:	85 55       	subi	r24, 0x55	; 85
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	fc 01       	movw	r30, r24
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	fc 01       	movw	r30, r24
     5ee:	82 81       	ldd	r24, Z+2	; 0x02
     5f0:	93 81       	ldd	r25, Z+3	; 0x03
     5f2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	09 2e       	mov	r0, r25
     5fc:	00 0c       	add	r0, r0
     5fe:	aa 0b       	sbc	r26, r26
     600:	bb 0b       	sbc	r27, r27
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	8f 8f       	std	Y+31, r24	; 0x1f
     610:	98 a3       	std	Y+32, r25	; 0x20
     612:	a9 a3       	std	Y+33, r26	; 0x21
     614:	ba a3       	std	Y+34, r27	; 0x22

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	4a e7       	ldi	r20, 0x7A	; 122
     61c:	55 e4       	ldi	r21, 0x45	; 69
     61e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     620:	78 a1       	ldd	r23, Y+32	; 0x20
     622:	89 a1       	ldd	r24, Y+33	; 0x21
     624:	9a a1       	ldd	r25, Y+34	; 0x22
     626:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	8b a3       	std	Y+35, r24	; 0x23
     630:	9c a3       	std	Y+36, r25	; 0x24
     632:	ad a3       	std	Y+37, r26	; 0x25
     634:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e8       	ldi	r20, 0x80	; 128
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	6b a1       	ldd	r22, Y+35	; 0x23
     640:	7c a1       	ldd	r23, Y+36	; 0x24
     642:	8d a1       	ldd	r24, Y+37	; 0x25
     644:	9e a1       	ldd	r25, Y+38	; 0x26
     646:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     64a:	88 23       	and	r24, r24
     64c:	2c f4       	brge	.+10     	; 0x658 <__FUSE_REGION_LENGTH__+0x258>
		__ticks = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	98 a7       	std	Y+40, r25	; 0x28
     654:	8f a3       	std	Y+39, r24	; 0x27
     656:	3f c0       	rjmp	.+126    	; 0x6d6 <__FUSE_REGION_LENGTH__+0x2d6>
	else if (__tmp > 65535)
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	3f ef       	ldi	r19, 0xFF	; 255
     65c:	4f e7       	ldi	r20, 0x7F	; 127
     65e:	57 e4       	ldi	r21, 0x47	; 71
     660:	6b a1       	ldd	r22, Y+35	; 0x23
     662:	7c a1       	ldd	r23, Y+36	; 0x24
     664:	8d a1       	ldd	r24, Y+37	; 0x25
     666:	9e a1       	ldd	r25, Y+38	; 0x26
     668:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     66c:	18 16       	cp	r1, r24
     66e:	4c f5       	brge	.+82     	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e2       	ldi	r20, 0x20	; 32
     676:	51 e4       	ldi	r21, 0x41	; 65
     678:	6f 8d       	ldd	r22, Y+31	; 0x1f
     67a:	78 a1       	ldd	r23, Y+32	; 0x20
     67c:	89 a1       	ldd	r24, Y+33	; 0x21
     67e:	9a a1       	ldd	r25, Y+34	; 0x22
     680:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	bc 01       	movw	r22, r24
     68a:	cd 01       	movw	r24, r26
     68c:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     690:	dc 01       	movw	r26, r24
     692:	cb 01       	movw	r24, r22
     694:	98 a7       	std	Y+40, r25	; 0x28
     696:	8f a3       	std	Y+39, r24	; 0x27
     698:	0f c0       	rjmp	.+30     	; 0x6b8 <__FUSE_REGION_LENGTH__+0x2b8>
     69a:	80 e9       	ldi	r24, 0x90	; 144
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	9a a7       	std	Y+42, r25	; 0x2a
     6a0:	89 a7       	std	Y+41, r24	; 0x29
     6a2:	89 a5       	ldd	r24, Y+41	; 0x29
     6a4:	9a a5       	ldd	r25, Y+42	; 0x2a
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <__FUSE_REGION_LENGTH__+0x2a6>
     6aa:	9a a7       	std	Y+42, r25	; 0x2a
     6ac:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ae:	8f a1       	ldd	r24, Y+39	; 0x27
     6b0:	98 a5       	ldd	r25, Y+40	; 0x28
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	98 a7       	std	Y+40, r25	; 0x28
     6b6:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b8:	8f a1       	ldd	r24, Y+39	; 0x27
     6ba:	98 a5       	ldd	r25, Y+40	; 0x28
     6bc:	89 2b       	or	r24, r25
     6be:	69 f7       	brne	.-38     	; 0x69a <__FUSE_REGION_LENGTH__+0x29a>
     6c0:	14 c0       	rjmp	.+40     	; 0x6ea <__FUSE_REGION_LENGTH__+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c2:	6b a1       	ldd	r22, Y+35	; 0x23
     6c4:	7c a1       	ldd	r23, Y+36	; 0x24
     6c6:	8d a1       	ldd	r24, Y+37	; 0x25
     6c8:	9e a1       	ldd	r25, Y+38	; 0x26
     6ca:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	98 a7       	std	Y+40, r25	; 0x28
     6d4:	8f a3       	std	Y+39, r24	; 0x27
     6d6:	8f a1       	ldd	r24, Y+39	; 0x27
     6d8:	98 a5       	ldd	r25, Y+40	; 0x28
     6da:	9c a7       	std	Y+44, r25	; 0x2c
     6dc:	8b a7       	std	Y+43, r24	; 0x2b
     6de:	8b a5       	ldd	r24, Y+43	; 0x2b
     6e0:	9c a5       	ldd	r25, Y+44	; 0x2c
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <__FUSE_REGION_LENGTH__+0x2e2>
     6e6:	9c a7       	std	Y+44, r25	; 0x2c
     6e8:	8b a7       	std	Y+43, r24	; 0x2b
			l1->toggle();
     6ea:	ce 01       	movw	r24, r28
     6ec:	85 55       	subi	r24, 0x55	; 85
     6ee:	9f 4f       	sbci	r25, 0xFF	; 255
     6f0:	fc 01       	movw	r30, r24
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	fc 01       	movw	r30, r24
     6f8:	80 85       	ldd	r24, Z+8	; 0x08
     6fa:	91 85       	ldd	r25, Z+9	; 0x09
     6fc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			c2->toggle();
     700:	ce 01       	movw	r24, r28
     702:	85 55       	subi	r24, 0x55	; 85
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	fc 01       	movw	r30, r24
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	fc 01       	movw	r30, r24
     70e:	82 81       	ldd	r24, Z+2	; 0x02
     710:	93 81       	ldd	r25, Z+3	; 0x03
     712:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     716:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '3':
			l1->toggle();
     71a:	ce 01       	movw	r24, r28
     71c:	85 55       	subi	r24, 0x55	; 85
     71e:	9f 4f       	sbci	r25, 0xFF	; 255
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	91 81       	ldd	r25, Z+1	; 0x01
     726:	fc 01       	movw	r30, r24
     728:	80 85       	ldd	r24, Z+8	; 0x08
     72a:	91 85       	ldd	r25, Z+9	; 0x09
     72c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
     730:	ce 01       	movw	r24, r28
     732:	85 55       	subi	r24, 0x55	; 85
     734:	9f 4f       	sbci	r25, 0xFF	; 255
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	91 81       	ldd	r25, Z+1	; 0x01
     73c:	fc 01       	movw	r30, r24
     73e:	84 81       	ldd	r24, Z+4	; 0x04
     740:	95 81       	ldd	r25, Z+5	; 0x05
     742:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	09 2e       	mov	r0, r25
     74c:	00 0c       	add	r0, r0
     74e:	aa 0b       	sbc	r26, r26
     750:	bb 0b       	sbc	r27, r27
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	8d a7       	std	Y+45, r24	; 0x2d
     760:	9e a7       	std	Y+46, r25	; 0x2e
     762:	af a7       	std	Y+47, r26	; 0x2f
     764:	b8 ab       	std	Y+48, r27	; 0x30

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	4a e7       	ldi	r20, 0x7A	; 122
     76c:	55 e4       	ldi	r21, 0x45	; 69
     76e:	6d a5       	ldd	r22, Y+45	; 0x2d
     770:	7e a5       	ldd	r23, Y+46	; 0x2e
     772:	8f a5       	ldd	r24, Y+47	; 0x2f
     774:	98 a9       	ldd	r25, Y+48	; 0x30
     776:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	89 ab       	std	Y+49, r24	; 0x31
     780:	9a ab       	std	Y+50, r25	; 0x32
     782:	ab ab       	std	Y+51, r26	; 0x33
     784:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e8       	ldi	r20, 0x80	; 128
     78c:	5f e3       	ldi	r21, 0x3F	; 63
     78e:	69 a9       	ldd	r22, Y+49	; 0x31
     790:	7a a9       	ldd	r23, Y+50	; 0x32
     792:	8b a9       	ldd	r24, Y+51	; 0x33
     794:	9c a9       	ldd	r25, Y+52	; 0x34
     796:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     79a:	88 23       	and	r24, r24
     79c:	2c f4       	brge	.+10     	; 0x7a8 <__FUSE_REGION_LENGTH__+0x3a8>
		__ticks = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	9e ab       	std	Y+54, r25	; 0x36
     7a4:	8d ab       	std	Y+53, r24	; 0x35
     7a6:	3f c0       	rjmp	.+126    	; 0x826 <__FUSE_REGION_LENGTH__+0x426>
	else if (__tmp > 65535)
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	4f e7       	ldi	r20, 0x7F	; 127
     7ae:	57 e4       	ldi	r21, 0x47	; 71
     7b0:	69 a9       	ldd	r22, Y+49	; 0x31
     7b2:	7a a9       	ldd	r23, Y+50	; 0x32
     7b4:	8b a9       	ldd	r24, Y+51	; 0x33
     7b6:	9c a9       	ldd	r25, Y+52	; 0x34
     7b8:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     7bc:	18 16       	cp	r1, r24
     7be:	4c f5       	brge	.+82     	; 0x812 <__FUSE_REGION_LENGTH__+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	40 e2       	ldi	r20, 0x20	; 32
     7c6:	51 e4       	ldi	r21, 0x41	; 65
     7c8:	6d a5       	ldd	r22, Y+45	; 0x2d
     7ca:	7e a5       	ldd	r23, Y+46	; 0x2e
     7cc:	8f a5       	ldd	r24, Y+47	; 0x2f
     7ce:	98 a9       	ldd	r25, Y+48	; 0x30
     7d0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     7d4:	dc 01       	movw	r26, r24
     7d6:	cb 01       	movw	r24, r22
     7d8:	bc 01       	movw	r22, r24
     7da:	cd 01       	movw	r24, r26
     7dc:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	9e ab       	std	Y+54, r25	; 0x36
     7e6:	8d ab       	std	Y+53, r24	; 0x35
     7e8:	0f c0       	rjmp	.+30     	; 0x808 <__FUSE_REGION_LENGTH__+0x408>
     7ea:	80 e9       	ldi	r24, 0x90	; 144
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	98 af       	std	Y+56, r25	; 0x38
     7f0:	8f ab       	std	Y+55, r24	; 0x37
     7f2:	8f a9       	ldd	r24, Y+55	; 0x37
     7f4:	98 ad       	ldd	r25, Y+56	; 0x38
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <__FUSE_REGION_LENGTH__+0x3f6>
     7fa:	98 af       	std	Y+56, r25	; 0x38
     7fc:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7fe:	8d a9       	ldd	r24, Y+53	; 0x35
     800:	9e a9       	ldd	r25, Y+54	; 0x36
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	9e ab       	std	Y+54, r25	; 0x36
     806:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     808:	8d a9       	ldd	r24, Y+53	; 0x35
     80a:	9e a9       	ldd	r25, Y+54	; 0x36
     80c:	89 2b       	or	r24, r25
     80e:	69 f7       	brne	.-38     	; 0x7ea <__FUSE_REGION_LENGTH__+0x3ea>
     810:	14 c0       	rjmp	.+40     	; 0x83a <__FUSE_REGION_LENGTH__+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     812:	69 a9       	ldd	r22, Y+49	; 0x31
     814:	7a a9       	ldd	r23, Y+50	; 0x32
     816:	8b a9       	ldd	r24, Y+51	; 0x33
     818:	9c a9       	ldd	r25, Y+52	; 0x34
     81a:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	9e ab       	std	Y+54, r25	; 0x36
     824:	8d ab       	std	Y+53, r24	; 0x35
     826:	8d a9       	ldd	r24, Y+53	; 0x35
     828:	9e a9       	ldd	r25, Y+54	; 0x36
     82a:	9a af       	std	Y+58, r25	; 0x3a
     82c:	89 af       	std	Y+57, r24	; 0x39
     82e:	89 ad       	ldd	r24, Y+57	; 0x39
     830:	9a ad       	ldd	r25, Y+58	; 0x3a
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <__FUSE_REGION_LENGTH__+0x432>
     836:	9a af       	std	Y+58, r25	; 0x3a
     838:	89 af       	std	Y+57, r24	; 0x39
			l1->toggle();
     83a:	ce 01       	movw	r24, r28
     83c:	85 55       	subi	r24, 0x55	; 85
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	fc 01       	movw	r30, r24
     848:	80 85       	ldd	r24, Z+8	; 0x08
     84a:	91 85       	ldd	r25, Z+9	; 0x09
     84c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
     850:	ce 01       	movw	r24, r28
     852:	85 55       	subi	r24, 0x55	; 85
     854:	9f 4f       	sbci	r25, 0xFF	; 255
     856:	fc 01       	movw	r30, r24
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	fc 01       	movw	r30, r24
     85e:	84 81       	ldd	r24, Z+4	; 0x04
     860:	95 81       	ldd	r25, Z+5	; 0x05
     862:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     866:	9a c7       	rjmp	.+3892   	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '4':
			l2->toggle();
     868:	ce 01       	movw	r24, r28
     86a:	85 55       	subi	r24, 0x55	; 85
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	fc 01       	movw	r30, r24
     876:	82 85       	ldd	r24, Z+10	; 0x0a
     878:	93 85       	ldd	r25, Z+11	; 0x0b
     87a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
     87e:	ce 01       	movw	r24, r28
     880:	85 55       	subi	r24, 0x55	; 85
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	09 2e       	mov	r0, r25
     89a:	00 0c       	add	r0, r0
     89c:	aa 0b       	sbc	r26, r26
     89e:	bb 0b       	sbc	r27, r27
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	8b af       	std	Y+59, r24	; 0x3b
     8ae:	9c af       	std	Y+60, r25	; 0x3c
     8b0:	ad af       	std	Y+61, r26	; 0x3d
     8b2:	be af       	std	Y+62, r27	; 0x3e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8b4:	8e 01       	movw	r16, r28
     8b6:	01 5c       	subi	r16, 0xC1	; 193
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	4a e7       	ldi	r20, 0x7A	; 122
     8c0:	55 e4       	ldi	r21, 0x45	; 69
     8c2:	6b ad       	ldd	r22, Y+59	; 0x3b
     8c4:	7c ad       	ldd	r23, Y+60	; 0x3c
     8c6:	8d ad       	ldd	r24, Y+61	; 0x3d
     8c8:	9e ad       	ldd	r25, Y+62	; 0x3e
     8ca:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	f8 01       	movw	r30, r16
     8d4:	80 83       	st	Z, r24
     8d6:	91 83       	std	Z+1, r25	; 0x01
     8d8:	a2 83       	std	Z+2, r26	; 0x02
     8da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8dc:	ce 01       	movw	r24, r28
     8de:	cf 96       	adiw	r24, 0x3f	; 63
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e8       	ldi	r20, 0x80	; 128
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	fc 01       	movw	r30, r24
     8ea:	60 81       	ld	r22, Z
     8ec:	71 81       	ldd	r23, Z+1	; 0x01
     8ee:	82 81       	ldd	r24, Z+2	; 0x02
     8f0:	93 81       	ldd	r25, Z+3	; 0x03
     8f2:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     8f6:	88 23       	and	r24, r24
     8f8:	4c f4       	brge	.+18     	; 0x90c <__FUSE_REGION_LENGTH__+0x50c>
		__ticks = 1;
     8fa:	ce 01       	movw	r24, r28
     8fc:	8d 5b       	subi	r24, 0xBD	; 189
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	fc 01       	movw	r30, r24
     906:	31 83       	std	Z+1, r19	; 0x01
     908:	20 83       	st	Z, r18
     90a:	67 c0       	rjmp	.+206    	; 0x9da <__FUSE_REGION_LENGTH__+0x5da>
	else if (__tmp > 65535)
     90c:	ce 01       	movw	r24, r28
     90e:	cf 96       	adiw	r24, 0x3f	; 63
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	3f ef       	ldi	r19, 0xFF	; 255
     914:	4f e7       	ldi	r20, 0x7F	; 127
     916:	57 e4       	ldi	r21, 0x47	; 71
     918:	fc 01       	movw	r30, r24
     91a:	60 81       	ld	r22, Z
     91c:	71 81       	ldd	r23, Z+1	; 0x01
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	93 81       	ldd	r25, Z+3	; 0x03
     922:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     926:	18 16       	cp	r1, r24
     928:	0c f0       	brlt	.+2      	; 0x92c <__FUSE_REGION_LENGTH__+0x52c>
     92a:	46 c0       	rjmp	.+140    	; 0x9b8 <__FUSE_REGION_LENGTH__+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e2       	ldi	r20, 0x20	; 32
     932:	51 e4       	ldi	r21, 0x41	; 65
     934:	6b ad       	ldd	r22, Y+59	; 0x3b
     936:	7c ad       	ldd	r23, Y+60	; 0x3c
     938:	8d ad       	ldd	r24, Y+61	; 0x3d
     93a:	9e ad       	ldd	r25, Y+62	; 0x3e
     93c:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	8e 01       	movw	r16, r28
     946:	0d 5b       	subi	r16, 0xBD	; 189
     948:	1f 4f       	sbci	r17, 0xFF	; 255
     94a:	bc 01       	movw	r22, r24
     94c:	cd 01       	movw	r24, r26
     94e:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	f8 01       	movw	r30, r16
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
     95c:	24 c0       	rjmp	.+72     	; 0x9a6 <__FUSE_REGION_LENGTH__+0x5a6>
     95e:	ce 01       	movw	r24, r28
     960:	8b 5b       	subi	r24, 0xBB	; 187
     962:	9f 4f       	sbci	r25, 0xFF	; 255
     964:	20 e9       	ldi	r18, 0x90	; 144
     966:	31 e0       	ldi	r19, 0x01	; 1
     968:	fc 01       	movw	r30, r24
     96a:	31 83       	std	Z+1, r19	; 0x01
     96c:	20 83       	st	Z, r18
     96e:	ce 01       	movw	r24, r28
     970:	8b 5b       	subi	r24, 0xBB	; 187
     972:	9f 4f       	sbci	r25, 0xFF	; 255
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <__FUSE_REGION_LENGTH__+0x57a>
     97e:	9e 01       	movw	r18, r28
     980:	2b 5b       	subi	r18, 0xBB	; 187
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	f9 01       	movw	r30, r18
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     98a:	ce 01       	movw	r24, r28
     98c:	8d 5b       	subi	r24, 0xBD	; 189
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	9e 01       	movw	r18, r28
     992:	2d 5b       	subi	r18, 0xBD	; 189
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	f9 01       	movw	r30, r18
     998:	20 81       	ld	r18, Z
     99a:	31 81       	ldd	r19, Z+1	; 0x01
     99c:	21 50       	subi	r18, 0x01	; 1
     99e:	31 09       	sbc	r19, r1
     9a0:	fc 01       	movw	r30, r24
     9a2:	31 83       	std	Z+1, r19	; 0x01
     9a4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a6:	ce 01       	movw	r24, r28
     9a8:	8d 5b       	subi	r24, 0xBD	; 189
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	fc 01       	movw	r30, r24
     9ae:	80 81       	ld	r24, Z
     9b0:	91 81       	ldd	r25, Z+1	; 0x01
     9b2:	89 2b       	or	r24, r25
     9b4:	a1 f6       	brne	.-88     	; 0x95e <__FUSE_REGION_LENGTH__+0x55e>
     9b6:	2b c0       	rjmp	.+86     	; 0xa0e <__FUSE_REGION_LENGTH__+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9b8:	8e 01       	movw	r16, r28
     9ba:	0d 5b       	subi	r16, 0xBD	; 189
     9bc:	1f 4f       	sbci	r17, 0xFF	; 255
     9be:	ce 01       	movw	r24, r28
     9c0:	cf 96       	adiw	r24, 0x3f	; 63
     9c2:	fc 01       	movw	r30, r24
     9c4:	60 81       	ld	r22, Z
     9c6:	71 81       	ldd	r23, Z+1	; 0x01
     9c8:	82 81       	ldd	r24, Z+2	; 0x02
     9ca:	93 81       	ldd	r25, Z+3	; 0x03
     9cc:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	f8 01       	movw	r30, r16
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	80 83       	st	Z, r24
     9da:	ce 01       	movw	r24, r28
     9dc:	89 5b       	subi	r24, 0xB9	; 185
     9de:	9f 4f       	sbci	r25, 0xFF	; 255
     9e0:	9e 01       	movw	r18, r28
     9e2:	2d 5b       	subi	r18, 0xBD	; 189
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	f9 01       	movw	r30, r18
     9e8:	20 81       	ld	r18, Z
     9ea:	31 81       	ldd	r19, Z+1	; 0x01
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 83       	std	Z+1, r19	; 0x01
     9f0:	20 83       	st	Z, r18
     9f2:	ce 01       	movw	r24, r28
     9f4:	89 5b       	subi	r24, 0xB9	; 185
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	fc 01       	movw	r30, r24
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <__FUSE_REGION_LENGTH__+0x5fe>
     a02:	9e 01       	movw	r18, r28
     a04:	29 5b       	subi	r18, 0xB9	; 185
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	f9 01       	movw	r30, r18
     a0a:	91 83       	std	Z+1, r25	; 0x01
     a0c:	80 83       	st	Z, r24
			l2->toggle();
     a0e:	ce 01       	movw	r24, r28
     a10:	85 55       	subi	r24, 0x55	; 85
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	fc 01       	movw	r30, r24
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	fc 01       	movw	r30, r24
     a1c:	82 85       	ldd	r24, Z+10	; 0x0a
     a1e:	93 85       	ldd	r25, Z+11	; 0x0b
     a20:	d7 d7       	rcall	.+4014   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
     a22:	ce 01       	movw	r24, r28
     a24:	85 55       	subi	r24, 0x55	; 85
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
     a32:	91 81       	ldd	r25, Z+1	; 0x01
     a34:	cd d7       	rcall	.+3994   	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     a36:	b2 c6       	rjmp	.+3428   	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '5':
			l2->toggle();
     a38:	ce 01       	movw	r24, r28
     a3a:	85 55       	subi	r24, 0x55	; 85
     a3c:	9f 4f       	sbci	r25, 0xFF	; 255
     a3e:	fc 01       	movw	r30, r24
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	fc 01       	movw	r30, r24
     a46:	82 85       	ldd	r24, Z+10	; 0x0a
     a48:	93 85       	ldd	r25, Z+11	; 0x0b
     a4a:	c2 d7       	rcall	.+3972   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c2->toggle();
     a4c:	ce 01       	movw	r24, r28
     a4e:	85 55       	subi	r24, 0x55	; 85
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	fc 01       	movw	r30, r24
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	fc 01       	movw	r30, r24
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	b8 d7       	rcall	.+3952   	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	09 2e       	mov	r0, r25
     a66:	00 0c       	add	r0, r0
     a68:	aa 0b       	sbc	r26, r26
     a6a:	bb 0b       	sbc	r27, r27
     a6c:	bc 01       	movw	r22, r24
     a6e:	cd 01       	movw	r24, r26
     a70:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	9e 01       	movw	r18, r28
     a7a:	27 5b       	subi	r18, 0xB7	; 183
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
     a7e:	f9 01       	movw	r30, r18
     a80:	80 83       	st	Z, r24
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	a2 83       	std	Z+2, r26	; 0x02
     a86:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a88:	8e 01       	movw	r16, r28
     a8a:	03 5b       	subi	r16, 0xB3	; 179
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	ce 01       	movw	r24, r28
     a90:	87 5b       	subi	r24, 0xB7	; 183
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	4a e7       	ldi	r20, 0x7A	; 122
     a9a:	55 e4       	ldi	r21, 0x45	; 69
     a9c:	fc 01       	movw	r30, r24
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	82 81       	ldd	r24, Z+2	; 0x02
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	f8 01       	movw	r30, r16
     ab0:	80 83       	st	Z, r24
     ab2:	91 83       	std	Z+1, r25	; 0x01
     ab4:	a2 83       	std	Z+2, r26	; 0x02
     ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ab8:	ce 01       	movw	r24, r28
     aba:	83 5b       	subi	r24, 0xB3	; 179
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	40 e8       	ldi	r20, 0x80	; 128
     ac4:	5f e3       	ldi	r21, 0x3F	; 63
     ac6:	fc 01       	movw	r30, r24
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	93 81       	ldd	r25, Z+3	; 0x03
     ad0:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     ad4:	88 23       	and	r24, r24
     ad6:	4c f4       	brge	.+18     	; 0xaea <__FUSE_REGION_LENGTH__+0x6ea>
		__ticks = 1;
     ad8:	ce 01       	movw	r24, r28
     ada:	8f 5a       	subi	r24, 0xAF	; 175
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	fc 01       	movw	r30, r24
     ae4:	31 83       	std	Z+1, r19	; 0x01
     ae6:	20 83       	st	Z, r18
     ae8:	6d c0       	rjmp	.+218    	; 0xbc4 <__FUSE_REGION_LENGTH__+0x7c4>
	else if (__tmp > 65535)
     aea:	ce 01       	movw	r24, r28
     aec:	83 5b       	subi	r24, 0xB3	; 179
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	3f ef       	ldi	r19, 0xFF	; 255
     af4:	4f e7       	ldi	r20, 0x7F	; 127
     af6:	57 e4       	ldi	r21, 0x47	; 71
     af8:	fc 01       	movw	r30, r24
     afa:	60 81       	ld	r22, Z
     afc:	71 81       	ldd	r23, Z+1	; 0x01
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	93 81       	ldd	r25, Z+3	; 0x03
     b02:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     b06:	18 16       	cp	r1, r24
     b08:	0c f0       	brlt	.+2      	; 0xb0c <__FUSE_REGION_LENGTH__+0x70c>
     b0a:	4a c0       	rjmp	.+148    	; 0xba0 <__FUSE_REGION_LENGTH__+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0c:	ce 01       	movw	r24, r28
     b0e:	87 5b       	subi	r24, 0xB7	; 183
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e2       	ldi	r20, 0x20	; 32
     b18:	51 e4       	ldi	r21, 0x41	; 65
     b1a:	fc 01       	movw	r30, r24
     b1c:	60 81       	ld	r22, Z
     b1e:	71 81       	ldd	r23, Z+1	; 0x01
     b20:	82 81       	ldd	r24, Z+2	; 0x02
     b22:	93 81       	ldd	r25, Z+3	; 0x03
     b24:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	8e 01       	movw	r16, r28
     b2e:	0f 5a       	subi	r16, 0xAF	; 175
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	bc 01       	movw	r22, r24
     b34:	cd 01       	movw	r24, r26
     b36:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	f8 01       	movw	r30, r16
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	80 83       	st	Z, r24
     b44:	24 c0       	rjmp	.+72     	; 0xb8e <__FUSE_REGION_LENGTH__+0x78e>
     b46:	ce 01       	movw	r24, r28
     b48:	8d 5a       	subi	r24, 0xAD	; 173
     b4a:	9f 4f       	sbci	r25, 0xFF	; 255
     b4c:	20 e9       	ldi	r18, 0x90	; 144
     b4e:	31 e0       	ldi	r19, 0x01	; 1
     b50:	fc 01       	movw	r30, r24
     b52:	31 83       	std	Z+1, r19	; 0x01
     b54:	20 83       	st	Z, r18
     b56:	ce 01       	movw	r24, r28
     b58:	8d 5a       	subi	r24, 0xAD	; 173
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <__FUSE_REGION_LENGTH__+0x762>
     b66:	9e 01       	movw	r18, r28
     b68:	2d 5a       	subi	r18, 0xAD	; 173
     b6a:	3f 4f       	sbci	r19, 0xFF	; 255
     b6c:	f9 01       	movw	r30, r18
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b72:	ce 01       	movw	r24, r28
     b74:	8f 5a       	subi	r24, 0xAF	; 175
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	9e 01       	movw	r18, r28
     b7a:	2f 5a       	subi	r18, 0xAF	; 175
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	f9 01       	movw	r30, r18
     b80:	20 81       	ld	r18, Z
     b82:	31 81       	ldd	r19, Z+1	; 0x01
     b84:	21 50       	subi	r18, 0x01	; 1
     b86:	31 09       	sbc	r19, r1
     b88:	fc 01       	movw	r30, r24
     b8a:	31 83       	std	Z+1, r19	; 0x01
     b8c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b8e:	ce 01       	movw	r24, r28
     b90:	8f 5a       	subi	r24, 0xAF	; 175
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	fc 01       	movw	r30, r24
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	89 2b       	or	r24, r25
     b9c:	a1 f6       	brne	.-88     	; 0xb46 <__FUSE_REGION_LENGTH__+0x746>
     b9e:	2c c0       	rjmp	.+88     	; 0xbf8 <__FUSE_REGION_LENGTH__+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba0:	8e 01       	movw	r16, r28
     ba2:	0f 5a       	subi	r16, 0xAF	; 175
     ba4:	1f 4f       	sbci	r17, 0xFF	; 255
     ba6:	ce 01       	movw	r24, r28
     ba8:	83 5b       	subi	r24, 0xB3	; 179
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	fc 01       	movw	r30, r24
     bae:	60 81       	ld	r22, Z
     bb0:	71 81       	ldd	r23, Z+1	; 0x01
     bb2:	82 81       	ldd	r24, Z+2	; 0x02
     bb4:	93 81       	ldd	r25, Z+3	; 0x03
     bb6:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	f8 01       	movw	r30, r16
     bc0:	91 83       	std	Z+1, r25	; 0x01
     bc2:	80 83       	st	Z, r24
     bc4:	ce 01       	movw	r24, r28
     bc6:	8b 5a       	subi	r24, 0xAB	; 171
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	9e 01       	movw	r18, r28
     bcc:	2f 5a       	subi	r18, 0xAF	; 175
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	f9 01       	movw	r30, r18
     bd2:	20 81       	ld	r18, Z
     bd4:	31 81       	ldd	r19, Z+1	; 0x01
     bd6:	fc 01       	movw	r30, r24
     bd8:	31 83       	std	Z+1, r19	; 0x01
     bda:	20 83       	st	Z, r18
     bdc:	ce 01       	movw	r24, r28
     bde:	8b 5a       	subi	r24, 0xAB	; 171
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <__FUSE_REGION_LENGTH__+0x7e8>
     bec:	9e 01       	movw	r18, r28
     bee:	2b 5a       	subi	r18, 0xAB	; 171
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	f9 01       	movw	r30, r18
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
			l2->toggle();
     bf8:	ce 01       	movw	r24, r28
     bfa:	85 55       	subi	r24, 0x55	; 85
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	91 81       	ldd	r25, Z+1	; 0x01
     c04:	fc 01       	movw	r30, r24
     c06:	82 85       	ldd	r24, Z+10	; 0x0a
     c08:	93 85       	ldd	r25, Z+11	; 0x0b
     c0a:	e2 d6       	rcall	.+3524   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c2->toggle();
     c0c:	ce 01       	movw	r24, r28
     c0e:	85 55       	subi	r24, 0x55	; 85
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	fc 01       	movw	r30, r24
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	d8 d6       	rcall	.+3504   	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     c20:	bd c5       	rjmp	.+2938   	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '6':
			l2->toggle();
     c22:	ce 01       	movw	r24, r28
     c24:	85 55       	subi	r24, 0x55	; 85
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	fc 01       	movw	r30, r24
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	fc 01       	movw	r30, r24
     c30:	82 85       	ldd	r24, Z+10	; 0x0a
     c32:	93 85       	ldd	r25, Z+11	; 0x0b
     c34:	cd d6       	rcall	.+3482   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
     c36:	ce 01       	movw	r24, r28
     c38:	85 55       	subi	r24, 0x55	; 85
     c3a:	9f 4f       	sbci	r25, 0xFF	; 255
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	fc 01       	movw	r30, r24
     c44:	84 81       	ldd	r24, Z+4	; 0x04
     c46:	95 81       	ldd	r25, Z+5	; 0x05
     c48:	c3 d6       	rcall	.+3462   	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	09 2e       	mov	r0, r25
     c50:	00 0c       	add	r0, r0
     c52:	aa 0b       	sbc	r26, r26
     c54:	bb 0b       	sbc	r27, r27
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 01       	movw	r18, r28
     c64:	29 5a       	subi	r18, 0xA9	; 169
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	f9 01       	movw	r30, r18
     c6a:	80 83       	st	Z, r24
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	a2 83       	std	Z+2, r26	; 0x02
     c70:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c72:	8e 01       	movw	r16, r28
     c74:	05 5a       	subi	r16, 0xA5	; 165
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	ce 01       	movw	r24, r28
     c7a:	89 5a       	subi	r24, 0xA9	; 169
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4a e7       	ldi	r20, 0x7A	; 122
     c84:	55 e4       	ldi	r21, 0x45	; 69
     c86:	fc 01       	movw	r30, r24
     c88:	60 81       	ld	r22, Z
     c8a:	71 81       	ldd	r23, Z+1	; 0x01
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	f8 01       	movw	r30, r16
     c9a:	80 83       	st	Z, r24
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	a2 83       	std	Z+2, r26	; 0x02
     ca0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ca2:	ce 01       	movw	r24, r28
     ca4:	85 5a       	subi	r24, 0xA5	; 165
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e8       	ldi	r20, 0x80	; 128
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	fc 01       	movw	r30, r24
     cb2:	60 81       	ld	r22, Z
     cb4:	71 81       	ldd	r23, Z+1	; 0x01
     cb6:	82 81       	ldd	r24, Z+2	; 0x02
     cb8:	93 81       	ldd	r25, Z+3	; 0x03
     cba:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     cbe:	88 23       	and	r24, r24
     cc0:	4c f4       	brge	.+18     	; 0xcd4 <__FUSE_REGION_LENGTH__+0x8d4>
		__ticks = 1;
     cc2:	ce 01       	movw	r24, r28
     cc4:	81 5a       	subi	r24, 0xA1	; 161
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	fc 01       	movw	r30, r24
     cce:	31 83       	std	Z+1, r19	; 0x01
     cd0:	20 83       	st	Z, r18
     cd2:	6d c0       	rjmp	.+218    	; 0xdae <__FUSE_REGION_LENGTH__+0x9ae>
	else if (__tmp > 65535)
     cd4:	ce 01       	movw	r24, r28
     cd6:	85 5a       	subi	r24, 0xA5	; 165
     cd8:	9f 4f       	sbci	r25, 0xFF	; 255
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	57 e4       	ldi	r21, 0x47	; 71
     ce2:	fc 01       	movw	r30, r24
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     cf0:	18 16       	cp	r1, r24
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <__FUSE_REGION_LENGTH__+0x8f6>
     cf4:	4a c0       	rjmp	.+148    	; 0xd8a <__FUSE_REGION_LENGTH__+0x98a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf6:	ce 01       	movw	r24, r28
     cf8:	89 5a       	subi	r24, 0xA9	; 169
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e2       	ldi	r20, 0x20	; 32
     d02:	51 e4       	ldi	r21, 0x41	; 65
     d04:	fc 01       	movw	r30, r24
     d06:	60 81       	ld	r22, Z
     d08:	71 81       	ldd	r23, Z+1	; 0x01
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	8e 01       	movw	r16, r28
     d18:	01 5a       	subi	r16, 0xA1	; 161
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	f8 01       	movw	r30, r16
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
     d2e:	24 c0       	rjmp	.+72     	; 0xd78 <__FUSE_REGION_LENGTH__+0x978>
     d30:	ce 01       	movw	r24, r28
     d32:	8f 59       	subi	r24, 0x9F	; 159
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	20 e9       	ldi	r18, 0x90	; 144
     d38:	31 e0       	ldi	r19, 0x01	; 1
     d3a:	fc 01       	movw	r30, r24
     d3c:	31 83       	std	Z+1, r19	; 0x01
     d3e:	20 83       	st	Z, r18
     d40:	ce 01       	movw	r24, r28
     d42:	8f 59       	subi	r24, 0x9F	; 159
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	fc 01       	movw	r30, r24
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <__FUSE_REGION_LENGTH__+0x94c>
     d50:	9e 01       	movw	r18, r28
     d52:	2f 59       	subi	r18, 0x9F	; 159
     d54:	3f 4f       	sbci	r19, 0xFF	; 255
     d56:	f9 01       	movw	r30, r18
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	ce 01       	movw	r24, r28
     d5e:	81 5a       	subi	r24, 0xA1	; 161
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	9e 01       	movw	r18, r28
     d64:	21 5a       	subi	r18, 0xA1	; 161
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	f9 01       	movw	r30, r18
     d6a:	20 81       	ld	r18, Z
     d6c:	31 81       	ldd	r19, Z+1	; 0x01
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	31 09       	sbc	r19, r1
     d72:	fc 01       	movw	r30, r24
     d74:	31 83       	std	Z+1, r19	; 0x01
     d76:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d78:	ce 01       	movw	r24, r28
     d7a:	81 5a       	subi	r24, 0xA1	; 161
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	fc 01       	movw	r30, r24
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	89 2b       	or	r24, r25
     d86:	a1 f6       	brne	.-88     	; 0xd30 <__FUSE_REGION_LENGTH__+0x930>
     d88:	2c c0       	rjmp	.+88     	; 0xde2 <__FUSE_REGION_LENGTH__+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8a:	8e 01       	movw	r16, r28
     d8c:	01 5a       	subi	r16, 0xA1	; 161
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	ce 01       	movw	r24, r28
     d92:	85 5a       	subi	r24, 0xA5	; 165
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	fc 01       	movw	r30, r24
     d98:	60 81       	ld	r22, Z
     d9a:	71 81       	ldd	r23, Z+1	; 0x01
     d9c:	82 81       	ldd	r24, Z+2	; 0x02
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	f8 01       	movw	r30, r16
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
     dae:	ce 01       	movw	r24, r28
     db0:	8d 59       	subi	r24, 0x9D	; 157
     db2:	9f 4f       	sbci	r25, 0xFF	; 255
     db4:	9e 01       	movw	r18, r28
     db6:	21 5a       	subi	r18, 0xA1	; 161
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	fc 01       	movw	r30, r24
     dc2:	31 83       	std	Z+1, r19	; 0x01
     dc4:	20 83       	st	Z, r18
     dc6:	ce 01       	movw	r24, r28
     dc8:	8d 59       	subi	r24, 0x9D	; 157
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <__FUSE_REGION_LENGTH__+0x9d2>
     dd6:	9e 01       	movw	r18, r28
     dd8:	2d 59       	subi	r18, 0x9D	; 157
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	f9 01       	movw	r30, r18
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
			l2->toggle();
     de2:	ce 01       	movw	r24, r28
     de4:	85 55       	subi	r24, 0x55	; 85
     de6:	9f 4f       	sbci	r25, 0xFF	; 255
     de8:	fc 01       	movw	r30, r24
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	fc 01       	movw	r30, r24
     df0:	82 85       	ldd	r24, Z+10	; 0x0a
     df2:	93 85       	ldd	r25, Z+11	; 0x0b
     df4:	ed d5       	rcall	.+3034   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
     df6:	ce 01       	movw	r24, r28
     df8:	85 55       	subi	r24, 0x55	; 85
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	fc 01       	movw	r30, r24
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	fc 01       	movw	r30, r24
     e04:	84 81       	ldd	r24, Z+4	; 0x04
     e06:	95 81       	ldd	r25, Z+5	; 0x05
     e08:	e3 d5       	rcall	.+3014   	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     e0a:	c8 c4       	rjmp	.+2448   	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '7':
			l3->toggle();
     e0c:	ce 01       	movw	r24, r28
     e0e:	85 55       	subi	r24, 0x55	; 85
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	fc 01       	movw	r30, r24
     e1a:	84 85       	ldd	r24, Z+12	; 0x0c
     e1c:	95 85       	ldd	r25, Z+13	; 0x0d
     e1e:	d8 d5       	rcall	.+2992   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
     e20:	ce 01       	movw	r24, r28
     e22:	85 55       	subi	r24, 0x55	; 85
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	ce d5       	rcall	.+2972   	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	09 2e       	mov	r0, r25
     e3a:	00 0c       	add	r0, r0
     e3c:	aa 0b       	sbc	r26, r26
     e3e:	bb 0b       	sbc	r27, r27
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9e 01       	movw	r18, r28
     e4e:	2b 59       	subi	r18, 0x9B	; 155
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	f9 01       	movw	r30, r18
     e54:	80 83       	st	Z, r24
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	a2 83       	std	Z+2, r26	; 0x02
     e5a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	8e 01       	movw	r16, r28
     e5e:	07 59       	subi	r16, 0x97	; 151
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	ce 01       	movw	r24, r28
     e64:	8b 59       	subi	r24, 0x9B	; 155
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	4a e7       	ldi	r20, 0x7A	; 122
     e6e:	55 e4       	ldi	r21, 0x45	; 69
     e70:	fc 01       	movw	r30, r24
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	f8 01       	movw	r30, r16
     e84:	80 83       	st	Z, r24
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e8c:	ce 01       	movw	r24, r28
     e8e:	87 59       	subi	r24, 0x97	; 151
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	fc 01       	movw	r30, r24
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
     ea8:	88 23       	and	r24, r24
     eaa:	4c f4       	brge	.+18     	; 0xebe <__FUSE_REGION_LENGTH__+0xabe>
		__ticks = 1;
     eac:	ce 01       	movw	r24, r28
     eae:	83 59       	subi	r24, 0x93	; 147
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	fc 01       	movw	r30, r24
     eb8:	31 83       	std	Z+1, r19	; 0x01
     eba:	20 83       	st	Z, r18
     ebc:	6d c0       	rjmp	.+218    	; 0xf98 <__FUSE_REGION_LENGTH__+0xb98>
	else if (__tmp > 65535)
     ebe:	ce 01       	movw	r24, r28
     ec0:	87 59       	subi	r24, 0x97	; 151
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	fc 01       	movw	r30, r24
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
     eda:	18 16       	cp	r1, r24
     edc:	0c f0       	brlt	.+2      	; 0xee0 <__FUSE_REGION_LENGTH__+0xae0>
     ede:	4a c0       	rjmp	.+148    	; 0xf74 <__FUSE_REGION_LENGTH__+0xb74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	ce 01       	movw	r24, r28
     ee2:	8b 59       	subi	r24, 0x9B	; 155
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	fc 01       	movw	r30, r24
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	93 81       	ldd	r25, Z+3	; 0x03
     ef8:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8e 01       	movw	r16, r28
     f02:	03 59       	subi	r16, 0x93	; 147
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	f8 01       	movw	r30, r16
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	80 83       	st	Z, r24
     f18:	24 c0       	rjmp	.+72     	; 0xf62 <__FUSE_REGION_LENGTH__+0xb62>
     f1a:	ce 01       	movw	r24, r28
     f1c:	81 59       	subi	r24, 0x91	; 145
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	20 e9       	ldi	r18, 0x90	; 144
     f22:	31 e0       	ldi	r19, 0x01	; 1
     f24:	fc 01       	movw	r30, r24
     f26:	31 83       	std	Z+1, r19	; 0x01
     f28:	20 83       	st	Z, r18
     f2a:	ce 01       	movw	r24, r28
     f2c:	81 59       	subi	r24, 0x91	; 145
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	fc 01       	movw	r30, r24
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <__FUSE_REGION_LENGTH__+0xb36>
     f3a:	9e 01       	movw	r18, r28
     f3c:	21 59       	subi	r18, 0x91	; 145
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	f9 01       	movw	r30, r18
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f46:	ce 01       	movw	r24, r28
     f48:	83 59       	subi	r24, 0x93	; 147
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	9e 01       	movw	r18, r28
     f4e:	23 59       	subi	r18, 0x93	; 147
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	f9 01       	movw	r30, r18
     f54:	20 81       	ld	r18, Z
     f56:	31 81       	ldd	r19, Z+1	; 0x01
     f58:	21 50       	subi	r18, 0x01	; 1
     f5a:	31 09       	sbc	r19, r1
     f5c:	fc 01       	movw	r30, r24
     f5e:	31 83       	std	Z+1, r19	; 0x01
     f60:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	ce 01       	movw	r24, r28
     f64:	83 59       	subi	r24, 0x93	; 147
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	fc 01       	movw	r30, r24
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	89 2b       	or	r24, r25
     f70:	a1 f6       	brne	.-88     	; 0xf1a <__FUSE_REGION_LENGTH__+0xb1a>
     f72:	2c c0       	rjmp	.+88     	; 0xfcc <__FUSE_REGION_LENGTH__+0xbcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	8e 01       	movw	r16, r28
     f76:	03 59       	subi	r16, 0x93	; 147
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	ce 01       	movw	r24, r28
     f7c:	87 59       	subi	r24, 0x97	; 151
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	fc 01       	movw	r30, r24
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	f8 01       	movw	r30, r16
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	ce 01       	movw	r24, r28
     f9a:	8f 58       	subi	r24, 0x8F	; 143
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	9e 01       	movw	r18, r28
     fa0:	23 59       	subi	r18, 0x93	; 147
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	f9 01       	movw	r30, r18
     fa6:	20 81       	ld	r18, Z
     fa8:	31 81       	ldd	r19, Z+1	; 0x01
     faa:	fc 01       	movw	r30, r24
     fac:	31 83       	std	Z+1, r19	; 0x01
     fae:	20 83       	st	Z, r18
     fb0:	ce 01       	movw	r24, r28
     fb2:	8f 58       	subi	r24, 0x8F	; 143
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	fc 01       	movw	r30, r24
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <__FUSE_REGION_LENGTH__+0xbbc>
     fc0:	9e 01       	movw	r18, r28
     fc2:	2f 58       	subi	r18, 0x8F	; 143
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	f9 01       	movw	r30, r18
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	80 83       	st	Z, r24
			l3->toggle();
     fcc:	ce 01       	movw	r24, r28
     fce:	85 55       	subi	r24, 0x55	; 85
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	fc 01       	movw	r30, r24
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	fc 01       	movw	r30, r24
     fda:	84 85       	ldd	r24, Z+12	; 0x0c
     fdc:	95 85       	ldd	r25, Z+13	; 0x0d
     fde:	f8 d4       	rcall	.+2544   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
     fe0:	ce 01       	movw	r24, r28
     fe2:	85 55       	subi	r24, 0x55	; 85
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	fc 01       	movw	r30, r24
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	fc 01       	movw	r30, r24
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	ee d4       	rcall	.+2524   	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
     ff4:	d3 c3       	rjmp	.+1958   	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '8':
			l3->toggle();
     ff6:	ce 01       	movw	r24, r28
     ff8:	85 55       	subi	r24, 0x55	; 85
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	fc 01       	movw	r30, r24
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	fc 01       	movw	r30, r24
    1004:	84 85       	ldd	r24, Z+12	; 0x0c
    1006:	95 85       	ldd	r25, Z+13	; 0x0d
    1008:	e3 d4       	rcall	.+2502   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c2->toggle();
    100a:	ce 01       	movw	r24, r28
    100c:	85 55       	subi	r24, 0x55	; 85
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	fc 01       	movw	r30, r24
    1012:	80 81       	ld	r24, Z
    1014:	91 81       	ldd	r25, Z+1	; 0x01
    1016:	fc 01       	movw	r30, r24
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	d9 d4       	rcall	.+2482   	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	09 2e       	mov	r0, r25
    1024:	00 0c       	add	r0, r0
    1026:	aa 0b       	sbc	r26, r26
    1028:	bb 0b       	sbc	r27, r27
    102a:	bc 01       	movw	r22, r24
    102c:	cd 01       	movw	r24, r26
    102e:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	9e 01       	movw	r18, r28
    1038:	2d 58       	subi	r18, 0x8D	; 141
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	f9 01       	movw	r30, r18
    103e:	80 83       	st	Z, r24
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	a2 83       	std	Z+2, r26	; 0x02
    1044:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1046:	8e 01       	movw	r16, r28
    1048:	09 58       	subi	r16, 0x89	; 137
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	ce 01       	movw	r24, r28
    104e:	8d 58       	subi	r24, 0x8D	; 141
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a e7       	ldi	r20, 0x7A	; 122
    1058:	55 e4       	ldi	r21, 0x45	; 69
    105a:	fc 01       	movw	r30, r24
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	f8 01       	movw	r30, r16
    106e:	80 83       	st	Z, r24
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	a2 83       	std	Z+2, r26	; 0x02
    1074:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1076:	ce 01       	movw	r24, r28
    1078:	89 58       	subi	r24, 0x89	; 137
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	fc 01       	movw	r30, r24
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    1092:	88 23       	and	r24, r24
    1094:	4c f4       	brge	.+18     	; 0x10a8 <__FUSE_REGION_LENGTH__+0xca8>
		__ticks = 1;
    1096:	ce 01       	movw	r24, r28
    1098:	85 58       	subi	r24, 0x85	; 133
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	21 e0       	ldi	r18, 0x01	; 1
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	fc 01       	movw	r30, r24
    10a2:	31 83       	std	Z+1, r19	; 0x01
    10a4:	20 83       	st	Z, r18
    10a6:	6d c0       	rjmp	.+218    	; 0x1182 <__FUSE_REGION_LENGTH__+0xd82>
	else if (__tmp > 65535)
    10a8:	ce 01       	movw	r24, r28
    10aa:	89 58       	subi	r24, 0x89	; 137
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	57 e4       	ldi	r21, 0x47	; 71
    10b6:	fc 01       	movw	r30, r24
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    10c4:	18 16       	cp	r1, r24
    10c6:	0c f0       	brlt	.+2      	; 0x10ca <__FUSE_REGION_LENGTH__+0xcca>
    10c8:	4a c0       	rjmp	.+148    	; 0x115e <__FUSE_REGION_LENGTH__+0xd5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ca:	ce 01       	movw	r24, r28
    10cc:	8d 58       	subi	r24, 0x8D	; 141
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	fc 01       	movw	r30, r24
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8e 01       	movw	r16, r28
    10ec:	05 58       	subi	r16, 0x85	; 133
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	f8 01       	movw	r30, r16
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	24 c0       	rjmp	.+72     	; 0x114c <__FUSE_REGION_LENGTH__+0xd4c>
    1104:	ce 01       	movw	r24, r28
    1106:	83 58       	subi	r24, 0x83	; 131
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	20 e9       	ldi	r18, 0x90	; 144
    110c:	31 e0       	ldi	r19, 0x01	; 1
    110e:	fc 01       	movw	r30, r24
    1110:	31 83       	std	Z+1, r19	; 0x01
    1112:	20 83       	st	Z, r18
    1114:	ce 01       	movw	r24, r28
    1116:	83 58       	subi	r24, 0x83	; 131
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	fc 01       	movw	r30, r24
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <__FUSE_REGION_LENGTH__+0xd20>
    1124:	9e 01       	movw	r18, r28
    1126:	23 58       	subi	r18, 0x83	; 131
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	f9 01       	movw	r30, r18
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	ce 01       	movw	r24, r28
    1132:	85 58       	subi	r24, 0x85	; 133
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	9e 01       	movw	r18, r28
    1138:	25 58       	subi	r18, 0x85	; 133
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	f9 01       	movw	r30, r18
    113e:	20 81       	ld	r18, Z
    1140:	31 81       	ldd	r19, Z+1	; 0x01
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	31 09       	sbc	r19, r1
    1146:	fc 01       	movw	r30, r24
    1148:	31 83       	std	Z+1, r19	; 0x01
    114a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114c:	ce 01       	movw	r24, r28
    114e:	85 58       	subi	r24, 0x85	; 133
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	fc 01       	movw	r30, r24
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	89 2b       	or	r24, r25
    115a:	a1 f6       	brne	.-88     	; 0x1104 <__FUSE_REGION_LENGTH__+0xd04>
    115c:	2c c0       	rjmp	.+88     	; 0x11b6 <__FUSE_REGION_LENGTH__+0xdb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115e:	8e 01       	movw	r16, r28
    1160:	05 58       	subi	r16, 0x85	; 133
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	ce 01       	movw	r24, r28
    1166:	89 58       	subi	r24, 0x89	; 137
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	fc 01       	movw	r30, r24
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	f8 01       	movw	r30, r16
    117e:	91 83       	std	Z+1, r25	; 0x01
    1180:	80 83       	st	Z, r24
    1182:	ce 01       	movw	r24, r28
    1184:	81 58       	subi	r24, 0x81	; 129
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	9e 01       	movw	r18, r28
    118a:	25 58       	subi	r18, 0x85	; 133
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	f9 01       	movw	r30, r18
    1190:	20 81       	ld	r18, Z
    1192:	31 81       	ldd	r19, Z+1	; 0x01
    1194:	fc 01       	movw	r30, r24
    1196:	31 83       	std	Z+1, r19	; 0x01
    1198:	20 83       	st	Z, r18
    119a:	ce 01       	movw	r24, r28
    119c:	81 58       	subi	r24, 0x81	; 129
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	fc 01       	movw	r30, r24
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <__FUSE_REGION_LENGTH__+0xda6>
    11aa:	9e 01       	movw	r18, r28
    11ac:	21 58       	subi	r18, 0x81	; 129
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	f9 01       	movw	r30, r18
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	80 83       	st	Z, r24
			l3->toggle();
    11b6:	ce 01       	movw	r24, r28
    11b8:	85 55       	subi	r24, 0x55	; 85
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	fc 01       	movw	r30, r24
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	fc 01       	movw	r30, r24
    11c4:	84 85       	ldd	r24, Z+12	; 0x0c
    11c6:	95 85       	ldd	r25, Z+13	; 0x0d
    11c8:	03 d4       	rcall	.+2054   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c2->toggle();
    11ca:	ce 01       	movw	r24, r28
    11cc:	85 55       	subi	r24, 0x55	; 85
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	fc 01       	movw	r30, r24
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	fc 01       	movw	r30, r24
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	f9 d3       	rcall	.+2034   	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
    11de:	de c2       	rjmp	.+1468   	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '9':
			l3->toggle();
    11e0:	ce 01       	movw	r24, r28
    11e2:	85 55       	subi	r24, 0x55	; 85
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	fc 01       	movw	r30, r24
    11ee:	84 85       	ldd	r24, Z+12	; 0x0c
    11f0:	95 85       	ldd	r25, Z+13	; 0x0d
    11f2:	ee d3       	rcall	.+2012   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
    11f4:	ce 01       	movw	r24, r28
    11f6:	85 55       	subi	r24, 0x55	; 85
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	fc 01       	movw	r30, r24
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	fc 01       	movw	r30, r24
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	e4 d3       	rcall	.+1992   	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	09 2e       	mov	r0, r25
    120e:	00 0c       	add	r0, r0
    1210:	aa 0b       	sbc	r26, r26
    1212:	bb 0b       	sbc	r27, r27
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9e 01       	movw	r18, r28
    1222:	2f 57       	subi	r18, 0x7F	; 127
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	f9 01       	movw	r30, r18
    1228:	80 83       	st	Z, r24
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	a2 83       	std	Z+2, r26	; 0x02
    122e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1230:	8e 01       	movw	r16, r28
    1232:	0b 57       	subi	r16, 0x7B	; 123
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	ce 01       	movw	r24, r28
    1238:	8f 57       	subi	r24, 0x7F	; 127
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a e7       	ldi	r20, 0x7A	; 122
    1242:	55 e4       	ldi	r21, 0x45	; 69
    1244:	fc 01       	movw	r30, r24
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	f8 01       	movw	r30, r16
    1258:	80 83       	st	Z, r24
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	a2 83       	std	Z+2, r26	; 0x02
    125e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1260:	ce 01       	movw	r24, r28
    1262:	8b 57       	subi	r24, 0x7B	; 123
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e8       	ldi	r20, 0x80	; 128
    126c:	5f e3       	ldi	r21, 0x3F	; 63
    126e:	fc 01       	movw	r30, r24
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    127c:	88 23       	and	r24, r24
    127e:	4c f4       	brge	.+18     	; 0x1292 <__FUSE_REGION_LENGTH__+0xe92>
		__ticks = 1;
    1280:	ce 01       	movw	r24, r28
    1282:	87 57       	subi	r24, 0x77	; 119
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	fc 01       	movw	r30, r24
    128c:	31 83       	std	Z+1, r19	; 0x01
    128e:	20 83       	st	Z, r18
    1290:	6d c0       	rjmp	.+218    	; 0x136c <__FUSE_REGION_LENGTH__+0xf6c>
	else if (__tmp > 65535)
    1292:	ce 01       	movw	r24, r28
    1294:	8b 57       	subi	r24, 0x7B	; 123
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	3f ef       	ldi	r19, 0xFF	; 255
    129c:	4f e7       	ldi	r20, 0x7F	; 127
    129e:	57 e4       	ldi	r21, 0x47	; 71
    12a0:	fc 01       	movw	r30, r24
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	0c f0       	brlt	.+2      	; 0x12b4 <__FUSE_REGION_LENGTH__+0xeb4>
    12b2:	4a c0       	rjmp	.+148    	; 0x1348 <__FUSE_REGION_LENGTH__+0xf48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	ce 01       	movw	r24, r28
    12b6:	8f 57       	subi	r24, 0x7F	; 127
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	51 e4       	ldi	r21, 0x41	; 65
    12c2:	fc 01       	movw	r30, r24
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8e 01       	movw	r16, r28
    12d6:	07 57       	subi	r16, 0x77	; 119
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	f8 01       	movw	r30, r16
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24
    12ec:	24 c0       	rjmp	.+72     	; 0x1336 <__FUSE_REGION_LENGTH__+0xf36>
    12ee:	ce 01       	movw	r24, r28
    12f0:	85 57       	subi	r24, 0x75	; 117
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	20 e9       	ldi	r18, 0x90	; 144
    12f6:	31 e0       	ldi	r19, 0x01	; 1
    12f8:	fc 01       	movw	r30, r24
    12fa:	31 83       	std	Z+1, r19	; 0x01
    12fc:	20 83       	st	Z, r18
    12fe:	ce 01       	movw	r24, r28
    1300:	85 57       	subi	r24, 0x75	; 117
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	fc 01       	movw	r30, r24
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <__FUSE_REGION_LENGTH__+0xf0a>
    130e:	9e 01       	movw	r18, r28
    1310:	25 57       	subi	r18, 0x75	; 117
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	f9 01       	movw	r30, r18
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131a:	ce 01       	movw	r24, r28
    131c:	87 57       	subi	r24, 0x77	; 119
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	9e 01       	movw	r18, r28
    1322:	27 57       	subi	r18, 0x77	; 119
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	f9 01       	movw	r30, r18
    1328:	20 81       	ld	r18, Z
    132a:	31 81       	ldd	r19, Z+1	; 0x01
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	31 09       	sbc	r19, r1
    1330:	fc 01       	movw	r30, r24
    1332:	31 83       	std	Z+1, r19	; 0x01
    1334:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	ce 01       	movw	r24, r28
    1338:	87 57       	subi	r24, 0x77	; 119
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	fc 01       	movw	r30, r24
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	89 2b       	or	r24, r25
    1344:	a1 f6       	brne	.-88     	; 0x12ee <__FUSE_REGION_LENGTH__+0xeee>
    1346:	2c c0       	rjmp	.+88     	; 0x13a0 <__FUSE_REGION_LENGTH__+0xfa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1348:	8e 01       	movw	r16, r28
    134a:	07 57       	subi	r16, 0x77	; 119
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	ce 01       	movw	r24, r28
    1350:	8b 57       	subi	r24, 0x7B	; 123
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	fc 01       	movw	r30, r24
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	f8 01       	movw	r30, r16
    1368:	91 83       	std	Z+1, r25	; 0x01
    136a:	80 83       	st	Z, r24
    136c:	ce 01       	movw	r24, r28
    136e:	83 57       	subi	r24, 0x73	; 115
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	9e 01       	movw	r18, r28
    1374:	27 57       	subi	r18, 0x77	; 119
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	31 81       	ldd	r19, Z+1	; 0x01
    137e:	fc 01       	movw	r30, r24
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	20 83       	st	Z, r18
    1384:	ce 01       	movw	r24, r28
    1386:	83 57       	subi	r24, 0x73	; 115
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	fc 01       	movw	r30, r24
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <__FUSE_REGION_LENGTH__+0xf90>
    1394:	9e 01       	movw	r18, r28
    1396:	23 57       	subi	r18, 0x73	; 115
    1398:	3f 4f       	sbci	r19, 0xFF	; 255
    139a:	f9 01       	movw	r30, r18
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
			l3->toggle();
    13a0:	ce 01       	movw	r24, r28
    13a2:	85 55       	subi	r24, 0x55	; 85
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	fc 01       	movw	r30, r24
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	fc 01       	movw	r30, r24
    13ae:	84 85       	ldd	r24, Z+12	; 0x0c
    13b0:	95 85       	ldd	r25, Z+13	; 0x0d
    13b2:	0e d3       	rcall	.+1564   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
    13b4:	ce 01       	movw	r24, r28
    13b6:	85 55       	subi	r24, 0x55	; 85
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	fc 01       	movw	r30, r24
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	fc 01       	movw	r30, r24
    13c2:	84 81       	ldd	r24, Z+4	; 0x04
    13c4:	95 81       	ldd	r25, Z+5	; 0x05
    13c6:	04 d3       	rcall	.+1544   	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
    13c8:	e9 c1       	rjmp	.+978    	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '*':
			l4->toggle();
    13ca:	ce 01       	movw	r24, r28
    13cc:	85 55       	subi	r24, 0x55	; 85
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	fc 01       	movw	r30, r24
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	fc 01       	movw	r30, r24
    13d8:	86 85       	ldd	r24, Z+14	; 0x0e
    13da:	97 85       	ldd	r25, Z+15	; 0x0f
    13dc:	f9 d2       	rcall	.+1522   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
    13de:	ce 01       	movw	r24, r28
    13e0:	85 55       	subi	r24, 0x55	; 85
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	fc 01       	movw	r30, r24
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	fc 01       	movw	r30, r24
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	ef d2       	rcall	.+1502   	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	09 2e       	mov	r0, r25
    13f8:	00 0c       	add	r0, r0
    13fa:	aa 0b       	sbc	r26, r26
    13fc:	bb 0b       	sbc	r27, r27
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e 01       	movw	r18, r28
    140c:	21 57       	subi	r18, 0x71	; 113
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	f9 01       	movw	r30, r18
    1412:	80 83       	st	Z, r24
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	a2 83       	std	Z+2, r26	; 0x02
    1418:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    141a:	8e 01       	movw	r16, r28
    141c:	0d 56       	subi	r16, 0x6D	; 109
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	ce 01       	movw	r24, r28
    1422:	81 57       	subi	r24, 0x71	; 113
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	4a e7       	ldi	r20, 0x7A	; 122
    142c:	55 e4       	ldi	r21, 0x45	; 69
    142e:	fc 01       	movw	r30, r24
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	f8 01       	movw	r30, r16
    1442:	80 83       	st	Z, r24
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	a2 83       	std	Z+2, r26	; 0x02
    1448:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    144a:	ce 01       	movw	r24, r28
    144c:	8d 56       	subi	r24, 0x6D	; 109
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	fc 01       	movw	r30, r24
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    1466:	88 23       	and	r24, r24
    1468:	4c f4       	brge	.+18     	; 0x147c <__FUSE_REGION_LENGTH__+0x107c>
		__ticks = 1;
    146a:	ce 01       	movw	r24, r28
    146c:	89 56       	subi	r24, 0x69	; 105
    146e:	9f 4f       	sbci	r25, 0xFF	; 255
    1470:	21 e0       	ldi	r18, 0x01	; 1
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	fc 01       	movw	r30, r24
    1476:	31 83       	std	Z+1, r19	; 0x01
    1478:	20 83       	st	Z, r18
    147a:	6d c0       	rjmp	.+218    	; 0x1556 <__FUSE_REGION_LENGTH__+0x1156>
	else if (__tmp > 65535)
    147c:	ce 01       	movw	r24, r28
    147e:	8d 56       	subi	r24, 0x6D	; 109
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	3f ef       	ldi	r19, 0xFF	; 255
    1486:	4f e7       	ldi	r20, 0x7F	; 127
    1488:	57 e4       	ldi	r21, 0x47	; 71
    148a:	fc 01       	movw	r30, r24
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    1498:	18 16       	cp	r1, r24
    149a:	0c f0       	brlt	.+2      	; 0x149e <__FUSE_REGION_LENGTH__+0x109e>
    149c:	4a c0       	rjmp	.+148    	; 0x1532 <__FUSE_REGION_LENGTH__+0x1132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	ce 01       	movw	r24, r28
    14a0:	81 57       	subi	r24, 0x71	; 113
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	fc 01       	movw	r30, r24
    14ae:	60 81       	ld	r22, Z
    14b0:	71 81       	ldd	r23, Z+1	; 0x01
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	93 81       	ldd	r25, Z+3	; 0x03
    14b6:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8e 01       	movw	r16, r28
    14c0:	09 56       	subi	r16, 0x69	; 105
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	f8 01       	movw	r30, r16
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	80 83       	st	Z, r24
    14d6:	24 c0       	rjmp	.+72     	; 0x1520 <__FUSE_REGION_LENGTH__+0x1120>
    14d8:	ce 01       	movw	r24, r28
    14da:	87 56       	subi	r24, 0x67	; 103
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	20 e9       	ldi	r18, 0x90	; 144
    14e0:	31 e0       	ldi	r19, 0x01	; 1
    14e2:	fc 01       	movw	r30, r24
    14e4:	31 83       	std	Z+1, r19	; 0x01
    14e6:	20 83       	st	Z, r18
    14e8:	ce 01       	movw	r24, r28
    14ea:	87 56       	subi	r24, 0x67	; 103
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	fc 01       	movw	r30, r24
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <__FUSE_REGION_LENGTH__+0x10f4>
    14f8:	9e 01       	movw	r18, r28
    14fa:	27 56       	subi	r18, 0x67	; 103
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	f9 01       	movw	r30, r18
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	ce 01       	movw	r24, r28
    1506:	89 56       	subi	r24, 0x69	; 105
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	9e 01       	movw	r18, r28
    150c:	29 56       	subi	r18, 0x69	; 105
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	f9 01       	movw	r30, r18
    1512:	20 81       	ld	r18, Z
    1514:	31 81       	ldd	r19, Z+1	; 0x01
    1516:	21 50       	subi	r18, 0x01	; 1
    1518:	31 09       	sbc	r19, r1
    151a:	fc 01       	movw	r30, r24
    151c:	31 83       	std	Z+1, r19	; 0x01
    151e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1520:	ce 01       	movw	r24, r28
    1522:	89 56       	subi	r24, 0x69	; 105
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	fc 01       	movw	r30, r24
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	89 2b       	or	r24, r25
    152e:	a1 f6       	brne	.-88     	; 0x14d8 <__FUSE_REGION_LENGTH__+0x10d8>
    1530:	2c c0       	rjmp	.+88     	; 0x158a <__FUSE_REGION_LENGTH__+0x118a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1532:	8e 01       	movw	r16, r28
    1534:	09 56       	subi	r16, 0x69	; 105
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	ce 01       	movw	r24, r28
    153a:	8d 56       	subi	r24, 0x6D	; 109
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	fc 01       	movw	r30, r24
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	f8 01       	movw	r30, r16
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	ce 01       	movw	r24, r28
    1558:	85 56       	subi	r24, 0x65	; 101
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	9e 01       	movw	r18, r28
    155e:	29 56       	subi	r18, 0x69	; 105
    1560:	3f 4f       	sbci	r19, 0xFF	; 255
    1562:	f9 01       	movw	r30, r18
    1564:	20 81       	ld	r18, Z
    1566:	31 81       	ldd	r19, Z+1	; 0x01
    1568:	fc 01       	movw	r30, r24
    156a:	31 83       	std	Z+1, r19	; 0x01
    156c:	20 83       	st	Z, r18
    156e:	ce 01       	movw	r24, r28
    1570:	85 56       	subi	r24, 0x65	; 101
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <__FUSE_REGION_LENGTH__+0x117a>
    157e:	9e 01       	movw	r18, r28
    1580:	25 56       	subi	r18, 0x65	; 101
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	f9 01       	movw	r30, r18
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
			l4->toggle();
    158a:	ce 01       	movw	r24, r28
    158c:	85 55       	subi	r24, 0x55	; 85
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	fc 01       	movw	r30, r24
    1598:	86 85       	ldd	r24, Z+14	; 0x0e
    159a:	97 85       	ldd	r25, Z+15	; 0x0f
    159c:	19 d2       	rcall	.+1074   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c1->toggle();
    159e:	ce 01       	movw	r24, r28
    15a0:	85 55       	subi	r24, 0x55	; 85
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	fc 01       	movw	r30, r24
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	fc 01       	movw	r30, r24
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	0f d2       	rcall	.+1054   	; 0x19d0 <_ZN4GPIO6toggleEv>
			break;
    15b2:	f4 c0       	rjmp	.+488    	; 0x179c <__FUSE_REGION_LENGTH__+0x139c>

		case '#':
			l4->toggle();
    15b4:	ce 01       	movw	r24, r28
    15b6:	85 55       	subi	r24, 0x55	; 85
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	fc 01       	movw	r30, r24
    15c2:	86 85       	ldd	r24, Z+14	; 0x0e
    15c4:	97 85       	ldd	r25, Z+15	; 0x0f
    15c6:	04 d2       	rcall	.+1032   	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
    15c8:	ce 01       	movw	r24, r28
    15ca:	85 55       	subi	r24, 0x55	; 85
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	fc 01       	movw	r30, r24
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	fc 01       	movw	r30, r24
    15d6:	84 81       	ldd	r24, Z+4	; 0x04
    15d8:	95 81       	ldd	r25, Z+5	; 0x05
    15da:	fa d1       	rcall	.+1012   	; 0x19d0 <_ZN4GPIO6toggleEv>
			_delay_ms(delay);
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	09 2e       	mov	r0, r25
    15e2:	00 0c       	add	r0, r0
    15e4:	aa 0b       	sbc	r26, r26
    15e6:	bb 0b       	sbc	r27, r27
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 af 28 	call	0x515e	; 0x515e <__floatsisf>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 01       	movw	r18, r28
    15f6:	23 56       	subi	r18, 0x63	; 99
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	f9 01       	movw	r30, r18
    15fc:	80 83       	st	Z, r24
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	a2 83       	std	Z+2, r26	; 0x02
    1602:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1604:	8e 01       	movw	r16, r28
    1606:	0f 55       	subi	r16, 0x5F	; 95
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	ce 01       	movw	r24, r28
    160c:	83 56       	subi	r24, 0x63	; 99
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a e7       	ldi	r20, 0x7A	; 122
    1616:	55 e4       	ldi	r21, 0x45	; 69
    1618:	fc 01       	movw	r30, r24
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	80 83       	st	Z, r24
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	a2 83       	std	Z+2, r26	; 0x02
    1632:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1634:	ce 01       	movw	r24, r28
    1636:	8f 55       	subi	r24, 0x5F	; 95
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	fc 01       	movw	r30, r24
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    1650:	88 23       	and	r24, r24
    1652:	4c f4       	brge	.+18     	; 0x1666 <__FUSE_REGION_LENGTH__+0x1266>
		__ticks = 1;
    1654:	ce 01       	movw	r24, r28
    1656:	8b 55       	subi	r24, 0x5B	; 91
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	fc 01       	movw	r30, r24
    1660:	31 83       	std	Z+1, r19	; 0x01
    1662:	20 83       	st	Z, r18
    1664:	6d c0       	rjmp	.+218    	; 0x1740 <__FUSE_REGION_LENGTH__+0x1340>
	else if (__tmp > 65535)
    1666:	ce 01       	movw	r24, r28
    1668:	8f 55       	subi	r24, 0x5F	; 95
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	3f ef       	ldi	r19, 0xFF	; 255
    1670:	4f e7       	ldi	r20, 0x7F	; 127
    1672:	57 e4       	ldi	r21, 0x47	; 71
    1674:	fc 01       	movw	r30, r24
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    1682:	18 16       	cp	r1, r24
    1684:	0c f0       	brlt	.+2      	; 0x1688 <__FUSE_REGION_LENGTH__+0x1288>
    1686:	4a c0       	rjmp	.+148    	; 0x171c <__FUSE_REGION_LENGTH__+0x131c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	ce 01       	movw	r24, r28
    168a:	83 56       	subi	r24, 0x63	; 99
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	fc 01       	movw	r30, r24
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8e 01       	movw	r16, r28
    16aa:	0b 55       	subi	r16, 0x5B	; 91
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	f8 01       	movw	r30, r16
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	80 83       	st	Z, r24
    16c0:	24 c0       	rjmp	.+72     	; 0x170a <__FUSE_REGION_LENGTH__+0x130a>
    16c2:	ce 01       	movw	r24, r28
    16c4:	89 55       	subi	r24, 0x59	; 89
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	20 e9       	ldi	r18, 0x90	; 144
    16ca:	31 e0       	ldi	r19, 0x01	; 1
    16cc:	fc 01       	movw	r30, r24
    16ce:	31 83       	std	Z+1, r19	; 0x01
    16d0:	20 83       	st	Z, r18
    16d2:	ce 01       	movw	r24, r28
    16d4:	89 55       	subi	r24, 0x59	; 89
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <__FUSE_REGION_LENGTH__+0x12de>
    16e2:	9e 01       	movw	r18, r28
    16e4:	29 55       	subi	r18, 0x59	; 89
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	f9 01       	movw	r30, r18
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	ce 01       	movw	r24, r28
    16f0:	8b 55       	subi	r24, 0x5B	; 91
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	9e 01       	movw	r18, r28
    16f6:	2b 55       	subi	r18, 0x5B	; 91
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	f9 01       	movw	r30, r18
    16fc:	20 81       	ld	r18, Z
    16fe:	31 81       	ldd	r19, Z+1	; 0x01
    1700:	21 50       	subi	r18, 0x01	; 1
    1702:	31 09       	sbc	r19, r1
    1704:	fc 01       	movw	r30, r24
    1706:	31 83       	std	Z+1, r19	; 0x01
    1708:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	ce 01       	movw	r24, r28
    170c:	8b 55       	subi	r24, 0x5B	; 91
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	fc 01       	movw	r30, r24
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	89 2b       	or	r24, r25
    1718:	a1 f6       	brne	.-88     	; 0x16c2 <__FUSE_REGION_LENGTH__+0x12c2>
    171a:	2c c0       	rjmp	.+88     	; 0x1774 <__FUSE_REGION_LENGTH__+0x1374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	8e 01       	movw	r16, r28
    171e:	0b 55       	subi	r16, 0x5B	; 91
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	ce 01       	movw	r24, r28
    1724:	8f 55       	subi	r24, 0x5F	; 95
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	fc 01       	movw	r30, r24
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	f8 01       	movw	r30, r16
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	ce 01       	movw	r24, r28
    1742:	87 55       	subi	r24, 0x57	; 87
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	9e 01       	movw	r18, r28
    1748:	2b 55       	subi	r18, 0x5B	; 91
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	f9 01       	movw	r30, r18
    174e:	20 81       	ld	r18, Z
    1750:	31 81       	ldd	r19, Z+1	; 0x01
    1752:	fc 01       	movw	r30, r24
    1754:	31 83       	std	Z+1, r19	; 0x01
    1756:	20 83       	st	Z, r18
    1758:	ce 01       	movw	r24, r28
    175a:	87 55       	subi	r24, 0x57	; 87
    175c:	9f 4f       	sbci	r25, 0xFF	; 255
    175e:	fc 01       	movw	r30, r24
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <__FUSE_REGION_LENGTH__+0x1364>
    1768:	9e 01       	movw	r18, r28
    176a:	27 55       	subi	r18, 0x57	; 87
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	f9 01       	movw	r30, r18
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	80 83       	st	Z, r24
			l4->toggle();
    1774:	ce 01       	movw	r24, r28
    1776:	85 55       	subi	r24, 0x55	; 85
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	fc 01       	movw	r30, r24
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	fc 01       	movw	r30, r24
    1782:	86 85       	ldd	r24, Z+14	; 0x0e
    1784:	97 85       	ldd	r25, Z+15	; 0x0f
    1786:	24 d1       	rcall	.+584    	; 0x19d0 <_ZN4GPIO6toggleEv>
			c3->toggle();
    1788:	ce 01       	movw	r24, r28
    178a:	85 55       	subi	r24, 0x55	; 85
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	fc 01       	movw	r30, r24
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	fc 01       	movw	r30, r24
    1796:	84 81       	ldd	r24, Z+4	; 0x04
    1798:	95 81       	ldd	r25, Z+5	; 0x05
    179a:	1a d1       	rcall	.+564    	; 0x19d0 <_ZN4GPIO6toggleEv>
	}
}
    179c:	c3 55       	subi	r28, 0x53	; 83
    179e:	df 4f       	sbci	r29, 0xFF	; 255
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <_ZN6EEPROM4readEPh>:


#include "EEPROM.h"


char EEPROM::read(uint8_t * pos){
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <_ZN6EEPROM4readEPh+0x6>
    17ba:	1f 92       	push	r1
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	7c 83       	std	Y+4, r23	; 0x04
    17c6:	6b 83       	std	Y+3, r22	; 0x03
	return eeprom_read_byte(pos);
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	0e 94 c6 29 	call	0x538c	; 0x538c <eeprom_read_byte>
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

000017de <_ZN6EEPROM12write_stringEPh4FilaIhLi10EE>:

void EEPROM::write(uint8_t * pos, uint8_t byte){
	eeprom_write_byte(pos, byte);
}

void EEPROM::write_string(uint8_t * pos, Fila<uint8_t,10> bytes){
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <_ZN6EEPROM12write_stringEPh4FilaIhLi10EE+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <_ZN6EEPROM12write_stringEPh4FilaIhLi10EE+0x8>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
    17ee:	7e 83       	std	Y+6, r23	; 0x06
    17f0:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t * _pos = pos;
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
	while(!bytes.vazia()){
    17fa:	0e c0       	rjmp	.+28     	; 0x1818 <_ZN6EEPROM12write_stringEPh4FilaIhLi10EE+0x3a>
		eeprom_write_byte(_pos, bytes.desenfileira());
    17fc:	ce 01       	movw	r24, r28
    17fe:	0c 96       	adiw	r24, 0x0c	; 12
    1800:	33 d0       	rcall	.+102    	; 0x1868 <_ZN4FilaIhLi10EE12desenfileiraEv>
    1802:	28 2f       	mov	r18, r24
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	62 2f       	mov	r22, r18
    180a:	0e 94 ce 29 	call	0x539c	; 0x539c <eeprom_write_byte>
		_pos++;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
	eeprom_write_byte(pos, byte);
}

void EEPROM::write_string(uint8_t * pos, Fila<uint8_t,10> bytes){
	uint8_t * _pos = pos;
	while(!bytes.vazia()){
    1818:	ce 01       	movw	r24, r28
    181a:	0c 96       	adiw	r24, 0x0c	; 12
    181c:	0e d0       	rcall	.+28     	; 0x183a <_ZN4FilaIhLi10EE5vaziaEv>
    181e:	98 2f       	mov	r25, r24
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 27       	eor	r24, r25
    1824:	88 23       	and	r24, r24
    1826:	51 f7       	brne	.-44     	; 0x17fc <_ZN6EEPROM12write_stringEPh4FilaIhLi10EE+0x1e>
		eeprom_write_byte(_pos, bytes.desenfileira());
		_pos++;
	}
}
    1828:	26 96       	adiw	r28, 0x06	; 6
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <_ZN4FilaIhLi10EE5vaziaEv>:

	bool cheia(){
		return (_N == cap);
	}

	bool vazia(){
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	1f 92       	push	r1
    1840:	1f 92       	push	r1
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
		return(_N == 0);
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	fc 01       	movw	r30, r24
    1850:	86 85       	ldd	r24, Z+14	; 0x0e
    1852:	97 85       	ldd	r25, Z+15	; 0x0f
    1854:	21 e0       	ldi	r18, 0x01	; 1
    1856:	89 2b       	or	r24, r25
    1858:	09 f0       	breq	.+2      	; 0x185c <_ZN4FilaIhLi10EE5vaziaEv+0x22>
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	82 2f       	mov	r24, r18
	}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <_ZN4FilaIhLi10EE12desenfileiraEv>:
		_final++;
		_N++;
		 if (_final == cap) _final = 0;
	}

	T desenfileira(){
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	00 d0       	rcall	.+0      	; 0x186e <_ZN4FilaIhLi10EE12desenfileiraEv+0x6>
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9b 83       	std	Y+3, r25	; 0x03
    1874:	8a 83       	std	Y+2, r24	; 0x02
		T data = _buffer[_inicio];
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	9b 81       	ldd	r25, Y+3	; 0x03
    187a:	fc 01       	movw	r30, r24
    187c:	82 85       	ldd	r24, Z+10	; 0x0a
    187e:	93 85       	ldd	r25, Z+11	; 0x0b
    1880:	2a 81       	ldd	r18, Y+2	; 0x02
    1882:	3b 81       	ldd	r19, Y+3	; 0x03
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	fc 01       	movw	r30, r24
    188a:	80 81       	ld	r24, Z
    188c:	89 83       	std	Y+1, r24	; 0x01
		_N--;
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	fc 01       	movw	r30, r24
    1894:	86 85       	ldd	r24, Z+14	; 0x0e
    1896:	97 85       	ldd	r25, Z+15	; 0x0f
    1898:	9c 01       	movw	r18, r24
    189a:	21 50       	subi	r18, 0x01	; 1
    189c:	31 09       	sbc	r19, r1
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	fc 01       	movw	r30, r24
    18a4:	37 87       	std	Z+15, r19	; 0x0f
    18a6:	26 87       	std	Z+14, r18	; 0x0e
		_inicio++;
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	fc 01       	movw	r30, r24
    18ae:	82 85       	ldd	r24, Z+10	; 0x0a
    18b0:	93 85       	ldd	r25, Z+11	; 0x0b
    18b2:	9c 01       	movw	r18, r24
    18b4:	2f 5f       	subi	r18, 0xFF	; 255
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	fc 01       	movw	r30, r24
    18be:	33 87       	std	Z+11, r19	; 0x0b
    18c0:	22 87       	std	Z+10, r18	; 0x0a
		if (_inicio == cap) _inicio = 0;
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	fc 01       	movw	r30, r24
    18c8:	82 85       	ldd	r24, Z+10	; 0x0a
    18ca:	93 85       	ldd	r25, Z+11	; 0x0b
    18cc:	0a 97       	sbiw	r24, 0x0a	; 10
    18ce:	29 f4       	brne	.+10     	; 0x18da <_ZN4FilaIhLi10EE12desenfileiraEv+0x72>
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	fc 01       	movw	r30, r24
    18d6:	13 86       	std	Z+11, r1	; 0x0b
    18d8:	12 86       	std	Z+10, r1	; 0x0a
		return data;
    18da:	89 81       	ldd	r24, Y+1	; 0x01
	}
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>:
 *      Author: aluno
 */

#include "GPIO.h"

GPIO::GPIO(uint8_t id, PortDirection_t dir)
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <_ZN4GPIOC1EhNS_15PortDirection_tE+0x6>
    18ee:	1f 92       	push	r1
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	6b 83       	std	Y+3, r22	; 0x03
    18fa:	4c 83       	std	Y+4, r20	; 0x04
{
	_bit = GPIO_PORT::id_to_bit[id];
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	84 5c       	subi	r24, 0xC4	; 196
    1904:	9c 4f       	sbci	r25, 0xFC	; 252
    1906:	fc 01       	movw	r30, r24
    1908:	20 81       	ld	r18, Z
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	fc 01       	movw	r30, r24
    1910:	20 83       	st	Z, r18
	_port = GPIO_PORT::AllPorts[GPIO_PORT::id_to_port[id]];
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	8a 50       	subi	r24, 0x0A	; 10
    191a:	9d 4f       	sbci	r25, 0xFD	; 253
    191c:	fc 01       	movw	r30, r24
    191e:	80 81       	ld	r24, Z
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	80 50       	subi	r24, 0x00	; 0
    192a:	9e 4f       	sbci	r25, 0xFE	; 254
    192c:	fc 01       	movw	r30, r24
    192e:	20 81       	ld	r18, Z
    1930:	31 81       	ldd	r19, Z+1	; 0x01
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	fc 01       	movw	r30, r24
    1938:	32 83       	std	Z+2, r19	; 0x02
    193a:	21 83       	std	Z+1, r18	; 0x01
	_port->dir(_bit, dir);
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	88 23       	and	r24, r24
    1942:	09 f4       	brne	.+2      	; 0x1946 <_ZN4GPIOC1EhNS_15PortDirection_tE+0x5e>
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	fc 01       	movw	r30, r24
    194c:	30 81       	ld	r19, Z
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	fc 01       	movw	r30, r24
    1954:	81 81       	ldd	r24, Z+1	; 0x01
    1956:	92 81       	ldd	r25, Z+2	; 0x02
    1958:	42 2f       	mov	r20, r18
    195a:	63 2f       	mov	r22, r19
    195c:	51 d0       	rcall	.+162    	; 0x1a00 <_ZN9GPIO_PORT9GPIO_Port3dirEhb>
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <_ZN4GPIO3getEv>:

GPIO::~GPIO() {}

bool GPIO::get() {
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	1f 92       	push	r1
    1972:	1f 92       	push	r1
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
	return _port->get(_bit);
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	fc 01       	movw	r30, r24
    1982:	20 81       	ld	r18, Z
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	9a 81       	ldd	r25, Y+2	; 0x02
    1988:	fc 01       	movw	r30, r24
    198a:	81 81       	ldd	r24, Z+1	; 0x01
    198c:	92 81       	ldd	r25, Z+2	; 0x02
    198e:	62 2f       	mov	r22, r18
    1990:	91 d0       	rcall	.+290    	; 0x1ab4 <_ZN9GPIO_PORT9GPIO_Port3getEh>
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <_ZN4GPIO3setEb>:

void GPIO::set(bool val) {
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <_ZN4GPIO3setEb+0x6>
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	6b 83       	std	Y+3, r22	; 0x03
	_port->set(_bit, val);
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 81       	ld	r18, Z
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	fc 01       	movw	r30, r24
    19ba:	81 81       	ldd	r24, Z+1	; 0x01
    19bc:	92 81       	ldd	r25, Z+2	; 0x02
    19be:	4b 81       	ldd	r20, Y+3	; 0x03
    19c0:	62 2f       	mov	r22, r18
    19c2:	4b d0       	rcall	.+150    	; 0x1a5a <_ZN9GPIO_PORT9GPIO_Port3setEhb>
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <_ZN4GPIO6toggleEv>:

void GPIO::clear() {
	this->set(0);
}

void GPIO::toggle() {
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	1f 92       	push	r1
    19d6:	1f 92       	push	r1
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
	_port->toggle(_bit);
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 81       	ld	r18, Z
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	fc 01       	movw	r30, r24
    19ee:	81 81       	ldd	r24, Z+1	; 0x01
    19f0:	92 81       	ldd	r25, Z+2	; 0x02
    19f2:	62 2f       	mov	r22, r18
    19f4:	77 d0       	rcall	.+238    	; 0x1ae4 <_ZN9GPIO_PORT9GPIO_Port6toggleEh>
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <_ZN9GPIO_PORT9GPIO_Port3dirEhb>:
	_BV( 7 )

};


void GPIO_Port::dir(uint8_t p, bool io) {
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <_ZN9GPIO_PORT9GPIO_Port3dirEhb+0x6>
    1a06:	1f 92       	push	r1
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	6b 83       	std	Y+3, r22	; 0x03
    1a12:	4c 83       	std	Y+4, r20	; 0x04
    if (io)
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	88 23       	and	r24, r24
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <_ZN9GPIO_PORT9GPIO_Port3dirEhb+0x32>
        ddr |= p;
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	fc 01       	movw	r30, r24
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	29 2f       	mov	r18, r25
    1a26:	28 2b       	or	r18, r24
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	21 83       	std	Z+1, r18	; 0x01
    1a30:	0d c0       	rjmp	.+26     	; 0x1a4c <_ZN9GPIO_PORT9GPIO_Port3dirEhb+0x4c>
    else
        ddr &= ~p;
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	fc 01       	movw	r30, r24
    1a38:	81 81       	ldd	r24, Z+1	; 0x01
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	80 95       	com	r24
    1a40:	89 23       	and	r24, r25
    1a42:	28 2f       	mov	r18, r24
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	fc 01       	movw	r30, r24
    1a4a:	21 83       	std	Z+1, r18	; 0x01
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <_ZN9GPIO_PORT9GPIO_Port3setEhb>:
void GPIO_Port::set(uint8_t p, bool val) {
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <_ZN9GPIO_PORT9GPIO_Port3setEhb+0x6>
    1a60:	1f 92       	push	r1
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	6b 83       	std	Y+3, r22	; 0x03
    1a6c:	4c 83       	std	Y+4, r20	; 0x04
    if (val)
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	88 23       	and	r24, r24
    1a72:	61 f0       	breq	.+24     	; 0x1a8c <_ZN9GPIO_PORT9GPIO_Port3setEhb+0x32>
        port |= p;
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	9a 81       	ldd	r25, Y+2	; 0x02
    1a78:	fc 01       	movw	r30, r24
    1a7a:	92 81       	ldd	r25, Z+2	; 0x02
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	29 2f       	mov	r18, r25
    1a80:	28 2b       	or	r18, r24
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	fc 01       	movw	r30, r24
    1a88:	22 83       	std	Z+2, r18	; 0x02
    1a8a:	0d c0       	rjmp	.+26     	; 0x1aa6 <_ZN9GPIO_PORT9GPIO_Port3setEhb+0x4c>
    else
        port &= ~p;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	fc 01       	movw	r30, r24
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	98 2f       	mov	r25, r24
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	80 95       	com	r24
    1a9a:	89 23       	and	r24, r25
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	22 83       	std	Z+2, r18	; 0x02
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	08 95       	ret

00001ab4 <_ZN9GPIO_PORT9GPIO_Port3getEh>:
void GPIO_Port::clear(uint8_t p) {
    set(p,0);
}
bool GPIO_Port::get(uint8_t p) {
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <_ZN9GPIO_PORT9GPIO_Port3getEh+0x6>
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	9a 83       	std	Y+2, r25	; 0x02
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	6b 83       	std	Y+3, r22	; 0x03
    return pin & p;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	fc 01       	movw	r30, r24
    1aca:	90 81       	ld	r25, Z
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	98 23       	and	r25, r24
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	99 23       	and	r25, r25
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <_ZN9GPIO_PORT9GPIO_Port3getEh+0x24>
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <_ZN9GPIO_PORT9GPIO_Port6toggleEh>:

void GPIO_Port::toggle(uint8_t p) {
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <_ZN9GPIO_PORT9GPIO_Port6toggleEh+0x6>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	6b 83       	std	Y+3, r22	; 0x03
	pin = p;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	2b 81       	ldd	r18, Y+3	; 0x03
    1afa:	fc 01       	movw	r30, r24
    1afc:	20 83       	st	Z, r18
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	08 95       	ret

00001b0a <_ZN8KeyboardC1EP4GPIOS1_S1_S1_S1_S1_S1_S1_>:
#include <avr/io.h>			/* Include AVR std. library file */
#include <util/delay.h>			/* Include inbuilt defined Delay header file */
#include "Keyboard.h"


Keyboard::Keyboard(GPIO *l1, GPIO *l2, GPIO *l3,GPIO *l4,GPIO *c1,GPIO *c2,GPIO *c3,GPIO *c4 ){
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	62 97       	sbiw	r28, 0x12	; 18
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	7c 83       	std	Y+4, r23	; 0x04
    1b38:	6b 83       	std	Y+3, r22	; 0x03
    1b3a:	5e 83       	std	Y+6, r21	; 0x06
    1b3c:	4d 83       	std	Y+5, r20	; 0x05
    1b3e:	38 87       	std	Y+8, r19	; 0x08
    1b40:	2f 83       	std	Y+7, r18	; 0x07
    1b42:	1a 87       	std	Y+10, r17	; 0x0a
    1b44:	09 87       	std	Y+9, r16	; 0x09
    1b46:	fc 86       	std	Y+12, r15	; 0x0c
    1b48:	eb 86       	std	Y+11, r14	; 0x0b
    1b4a:	de 86       	std	Y+14, r13	; 0x0e
    1b4c:	cd 86       	std	Y+13, r12	; 0x0d
    1b4e:	b8 8a       	std	Y+16, r11	; 0x10
    1b50:	af 86       	std	Y+15, r10	; 0x0f
    1b52:	9a 8a       	std	Y+18, r9	; 0x12
    1b54:	89 8a       	std	Y+17, r8	; 0x11

	key = 'N';
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	2e e4       	ldi	r18, 0x4E	; 78
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	20 83       	st	Z, r18
	l[0] = l1;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	2b 81       	ldd	r18, Y+3	; 0x03
    1b66:	3c 81       	ldd	r19, Y+4	; 0x04
    1b68:	fc 01       	movw	r30, r24
    1b6a:	32 83       	std	Z+2, r19	; 0x02
    1b6c:	21 83       	std	Z+1, r18	; 0x01
	l[1] = l2;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	2d 81       	ldd	r18, Y+5	; 0x05
    1b74:	3e 81       	ldd	r19, Y+6	; 0x06
    1b76:	fc 01       	movw	r30, r24
    1b78:	34 83       	std	Z+4, r19	; 0x04
    1b7a:	23 83       	std	Z+3, r18	; 0x03
	l[2] = l3;
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	2f 81       	ldd	r18, Y+7	; 0x07
    1b82:	38 85       	ldd	r19, Y+8	; 0x08
    1b84:	fc 01       	movw	r30, r24
    1b86:	36 83       	std	Z+6, r19	; 0x06
    1b88:	25 83       	std	Z+5, r18	; 0x05
	l[3] = l4;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	29 85       	ldd	r18, Y+9	; 0x09
    1b90:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b92:	fc 01       	movw	r30, r24
    1b94:	30 87       	std	Z+8, r19	; 0x08
    1b96:	27 83       	std	Z+7, r18	; 0x07


	c[0] = c1;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b9e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	32 87       	std	Z+10, r19	; 0x0a
    1ba4:	21 87       	std	Z+9, r18	; 0x09
	c[1] = c2;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	2d 85       	ldd	r18, Y+13	; 0x0d
    1bac:	3e 85       	ldd	r19, Y+14	; 0x0e
    1bae:	fc 01       	movw	r30, r24
    1bb0:	34 87       	std	Z+12, r19	; 0x0c
    1bb2:	23 87       	std	Z+11, r18	; 0x0b
	c[2] = c3;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	2f 85       	ldd	r18, Y+15	; 0x0f
    1bba:	38 89       	ldd	r19, Y+16	; 0x10
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	36 87       	std	Z+14, r19	; 0x0e
    1bc0:	25 87       	std	Z+13, r18	; 0x0d
	c[3] = c4;
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	29 89       	ldd	r18, Y+17	; 0x11
    1bc8:	3a 89       	ldd	r19, Y+18	; 0x12
    1bca:	fc 01       	movw	r30, r24
    1bcc:	30 8b       	std	Z+16, r19	; 0x10
    1bce:	27 87       	std	Z+15, r18	; 0x0f

}
    1bd0:	62 96       	adiw	r28, 0x12	; 18
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	bf 90       	pop	r11
    1bee:	af 90       	pop	r10
    1bf0:	9f 90       	pop	r9
    1bf2:	8f 90       	pop	r8
    1bf4:	08 95       	ret

00001bf6 <_ZN8Keyboard8PercorreEv>:

bool Keyboard::Percorre(){
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	63 97       	sbiw	r28, 0x13	; 19
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	9b 8b       	std	Y+19, r25	; 0x13
    1c0c:	8a 8b       	std	Y+18, r24	; 0x12

bool teste = true;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	89 83       	std	Y+1, r24	; 0x01
	for (int ti = 0; ti<4; ti++)
    1c12:	1b 82       	std	Y+3, r1	; 0x03
    1c14:	1a 82       	std	Y+2, r1	; 0x02
    1c16:	97 c0       	rjmp	.+302    	; 0x1d46 <_ZN8Keyboard8PercorreEv+0x150>
	    {
	    //Alterna o estado dos pinos das linhas

		l[0]->set(false);
    1c18:	8a 89       	ldd	r24, Y+18	; 0x12
    1c1a:	9b 89       	ldd	r25, Y+19	; 0x13
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	81 81       	ldd	r24, Z+1	; 0x01
    1c20:	92 81       	ldd	r25, Z+2	; 0x02
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	bb de       	rcall	.-650    	; 0x199c <_ZN4GPIO3setEb>
		l[1]->set(false);
    1c26:	8a 89       	ldd	r24, Y+18	; 0x12
    1c28:	9b 89       	ldd	r25, Y+19	; 0x13
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	83 81       	ldd	r24, Z+3	; 0x03
    1c2e:	94 81       	ldd	r25, Z+4	; 0x04
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	b4 de       	rcall	.-664    	; 0x199c <_ZN4GPIO3setEb>
		l[2]->set(false);
    1c34:	8a 89       	ldd	r24, Y+18	; 0x12
    1c36:	9b 89       	ldd	r25, Y+19	; 0x13
    1c38:	fc 01       	movw	r30, r24
    1c3a:	85 81       	ldd	r24, Z+5	; 0x05
    1c3c:	96 81       	ldd	r25, Z+6	; 0x06
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	ad de       	rcall	.-678    	; 0x199c <_ZN4GPIO3setEb>
		l[3]->set(false);
    1c42:	8a 89       	ldd	r24, Y+18	; 0x12
    1c44:	9b 89       	ldd	r25, Y+19	; 0x13
    1c46:	fc 01       	movw	r30, r24
    1c48:	87 81       	ldd	r24, Z+7	; 0x07
    1c4a:	90 85       	ldd	r25, Z+8	; 0x08
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	a6 de       	rcall	.-692    	; 0x199c <_ZN4GPIO3setEb>

	    l[ti]->set(true);
    1c50:	2a 89       	ldd	r18, Y+18	; 0x12
    1c52:	3b 89       	ldd	r19, Y+19	; 0x13
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	82 0f       	add	r24, r18
    1c5e:	93 1f       	adc	r25, r19
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	fc 01       	movw	r30, r24
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	98 de       	rcall	.-720    	; 0x199c <_ZN4GPIO3setEb>

	    //Verifica se alguma tecla da coluna 1 foi pressionada
	    if (c[0]->get())
    1c6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c6e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c70:	fc 01       	movw	r30, r24
    1c72:	81 85       	ldd	r24, Z+9	; 0x09
    1c74:	92 85       	ldd	r25, Z+10	; 0x0a
    1c76:	7a de       	rcall	.-780    	; 0x196c <_ZN4GPIO3getEv>
    1c78:	88 23       	and	r24, r24
    1c7a:	91 f0       	breq	.+36     	; 0x1ca0 <_ZN8Keyboard8PercorreEv+0xaa>
	    {
	    	Key(ti, 0);
    1c7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c7e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c80:	8a 89       	ldd	r24, Y+18	; 0x12
    1c82:	9b 89       	ldd	r25, Y+19	; 0x13
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	b9 01       	movw	r22, r18
    1c8a:	ef d0       	rcall	.+478    	; 0x1e6a <_ZN8Keyboard3KeyEii>
	    	while(c[0]->get());
    1c8c:	00 00       	nop
    1c8e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c90:	9b 89       	ldd	r25, Y+19	; 0x13
    1c92:	fc 01       	movw	r30, r24
    1c94:	81 85       	ldd	r24, Z+9	; 0x09
    1c96:	92 85       	ldd	r25, Z+10	; 0x0a
    1c98:	69 de       	rcall	.-814    	; 0x196c <_ZN4GPIO3getEv>
    1c9a:	88 23       	and	r24, r24
    1c9c:	c1 f7       	brne	.-16     	; 0x1c8e <_ZN8Keyboard8PercorreEv+0x98>
	    	teste = false;
    1c9e:	19 82       	std	Y+1, r1	; 0x01

	    }

	    //Verifica se alguma tecla da coluna 2 foi pressionada
	    if (c[1]->get())
    1ca0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ca2:	9b 89       	ldd	r25, Y+19	; 0x13
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	83 85       	ldd	r24, Z+11	; 0x0b
    1ca8:	94 85       	ldd	r25, Z+12	; 0x0c
    1caa:	60 de       	rcall	.-832    	; 0x196c <_ZN4GPIO3getEv>
    1cac:	88 23       	and	r24, r24
    1cae:	91 f0       	breq	.+36     	; 0x1cd4 <_ZN8Keyboard8PercorreEv+0xde>
	    {
	      Key(ti, 1);
    1cb0:	2a 81       	ldd	r18, Y+2	; 0x02
    1cb2:	3b 81       	ldd	r19, Y+3	; 0x03
    1cb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb6:	9b 89       	ldd	r25, Y+19	; 0x13
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	b9 01       	movw	r22, r18
    1cbe:	d5 d0       	rcall	.+426    	; 0x1e6a <_ZN8Keyboard3KeyEii>
	      while(c[1]->get());
    1cc0:	00 00       	nop
    1cc2:	8a 89       	ldd	r24, Y+18	; 0x12
    1cc4:	9b 89       	ldd	r25, Y+19	; 0x13
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	83 85       	ldd	r24, Z+11	; 0x0b
    1cca:	94 85       	ldd	r25, Z+12	; 0x0c
    1ccc:	4f de       	rcall	.-866    	; 0x196c <_ZN4GPIO3getEv>
    1cce:	88 23       	and	r24, r24
    1cd0:	c1 f7       	brne	.-16     	; 0x1cc2 <_ZN8Keyboard8PercorreEv+0xcc>
	      teste = false;
    1cd2:	19 82       	std	Y+1, r1	; 0x01

	    }

	    //Verifica se alguma tecla da coluna 3 foi pressionada
	    if (c[2]->get())
    1cd4:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd6:	9b 89       	ldd	r25, Y+19	; 0x13
    1cd8:	fc 01       	movw	r30, r24
    1cda:	85 85       	ldd	r24, Z+13	; 0x0d
    1cdc:	96 85       	ldd	r25, Z+14	; 0x0e
    1cde:	46 de       	rcall	.-884    	; 0x196c <_ZN4GPIO3getEv>
    1ce0:	88 23       	and	r24, r24
    1ce2:	91 f0       	breq	.+36     	; 0x1d08 <_ZN8Keyboard8PercorreEv+0x112>
	    {
	     Key(ti, 2);
    1ce4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce8:	8a 89       	ldd	r24, Y+18	; 0x12
    1cea:	9b 89       	ldd	r25, Y+19	; 0x13
    1cec:	42 e0       	ldi	r20, 0x02	; 2
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	bb d0       	rcall	.+374    	; 0x1e6a <_ZN8Keyboard3KeyEii>
	      while(c[2]->get());
    1cf4:	00 00       	nop
    1cf6:	8a 89       	ldd	r24, Y+18	; 0x12
    1cf8:	9b 89       	ldd	r25, Y+19	; 0x13
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	85 85       	ldd	r24, Z+13	; 0x0d
    1cfe:	96 85       	ldd	r25, Z+14	; 0x0e
    1d00:	35 de       	rcall	.-918    	; 0x196c <_ZN4GPIO3getEv>
    1d02:	88 23       	and	r24, r24
    1d04:	c1 f7       	brne	.-16     	; 0x1cf6 <_ZN8Keyboard8PercorreEv+0x100>
	      teste = false;
    1d06:	19 82       	std	Y+1, r1	; 0x01

	    }

	    //Verifica se alguma tecla da coluna 4 foi pressionada
	    if (c[3]->get())
    1d08:	8a 89       	ldd	r24, Y+18	; 0x12
    1d0a:	9b 89       	ldd	r25, Y+19	; 0x13
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	87 85       	ldd	r24, Z+15	; 0x0f
    1d10:	90 89       	ldd	r25, Z+16	; 0x10
    1d12:	2c de       	rcall	.-936    	; 0x196c <_ZN4GPIO3getEv>
    1d14:	88 23       	and	r24, r24
    1d16:	91 f0       	breq	.+36     	; 0x1d3c <_ZN8Keyboard8PercorreEv+0x146>
	    {
	     Key(ti, 3);
    1d18:	2a 81       	ldd	r18, Y+2	; 0x02
    1d1a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d1e:	9b 89       	ldd	r25, Y+19	; 0x13
    1d20:	43 e0       	ldi	r20, 0x03	; 3
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	b9 01       	movw	r22, r18
    1d26:	a1 d0       	rcall	.+322    	; 0x1e6a <_ZN8Keyboard3KeyEii>
	      while(c[3]->get());
    1d28:	00 00       	nop
    1d2a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d2c:	9b 89       	ldd	r25, Y+19	; 0x13
    1d2e:	fc 01       	movw	r30, r24
    1d30:	87 85       	ldd	r24, Z+15	; 0x0f
    1d32:	90 89       	ldd	r25, Z+16	; 0x10
    1d34:	1b de       	rcall	.-970    	; 0x196c <_ZN4GPIO3getEv>
    1d36:	88 23       	and	r24, r24
    1d38:	c1 f7       	brne	.-16     	; 0x1d2a <_ZN8Keyboard8PercorreEv+0x134>
	      teste = false;
    1d3a:	19 82       	std	Y+1, r1	; 0x01
}

bool Keyboard::Percorre(){

bool teste = true;
	for (int ti = 0; ti<4; ti++)
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	9b 83       	std	Y+3, r25	; 0x03
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	04 97       	sbiw	r24, 0x04	; 4
    1d4c:	0c f4       	brge	.+2      	; 0x1d50 <_ZN8Keyboard8PercorreEv+0x15a>
    1d4e:	64 cf       	rjmp	.-312    	; 0x1c18 <_ZN8Keyboard8PercorreEv+0x22>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a0 e2       	ldi	r26, 0x20	; 32
    1d56:	b1 e4       	ldi	r27, 0x41	; 65
    1d58:	8c 83       	std	Y+4, r24	; 0x04
    1d5a:	9d 83       	std	Y+5, r25	; 0x05
    1d5c:	ae 83       	std	Y+6, r26	; 0x06
    1d5e:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a e7       	ldi	r20, 0x7A	; 122
    1d66:	55 e4       	ldi	r21, 0x45	; 69
    1d68:	6c 81       	ldd	r22, Y+4	; 0x04
    1d6a:	7d 81       	ldd	r23, Y+5	; 0x05
    1d6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d70:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	88 87       	std	Y+8, r24	; 0x08
    1d7a:	99 87       	std	Y+9, r25	; 0x09
    1d7c:	aa 87       	std	Y+10, r26	; 0x0a
    1d7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	68 85       	ldd	r22, Y+8	; 0x08
    1d8a:	79 85       	ldd	r23, Y+9	; 0x09
    1d8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d90:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <_ZN8Keyboard8PercorreEv+0x1ac>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9d 87       	std	Y+13, r25	; 0x0d
    1d9e:	8c 87       	std	Y+12, r24	; 0x0c
    1da0:	3f c0       	rjmp	.+126    	; 0x1e20 <_ZN8Keyboard8PercorreEv+0x22a>
	else if (__tmp > 65535)
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	68 85       	ldd	r22, Y+8	; 0x08
    1dac:	79 85       	ldd	r23, Y+9	; 0x09
    1dae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db2:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	4c f5       	brge	.+82     	; 0x1e0c <_ZN8Keyboard8PercorreEv+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	6c 81       	ldd	r22, Y+4	; 0x04
    1dc4:	7d 81       	ldd	r23, Y+5	; 0x05
    1dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dca:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9d 87       	std	Y+13, r25	; 0x0d
    1de0:	8c 87       	std	Y+12, r24	; 0x0c
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <_ZN8Keyboard8PercorreEv+0x20c>
    1de4:	80 e9       	ldi	r24, 0x90	; 144
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	9f 87       	std	Y+15, r25	; 0x0f
    1dea:	8e 87       	std	Y+14, r24	; 0x0e
    1dec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <_ZN8Keyboard8PercorreEv+0x1fa>
    1df4:	9f 87       	std	Y+15, r25	; 0x0f
    1df6:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dfa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	9d 87       	std	Y+13, r25	; 0x0d
    1e00:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e04:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e06:	89 2b       	or	r24, r25
    1e08:	69 f7       	brne	.-38     	; 0x1de4 <_ZN8Keyboard8PercorreEv+0x1ee>
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <_ZN8Keyboard8PercorreEv+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0c:	68 85       	ldd	r22, Y+8	; 0x08
    1e0e:	79 85       	ldd	r23, Y+9	; 0x09
    1e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e14:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9d 87       	std	Y+13, r25	; 0x0d
    1e1e:	8c 87       	std	Y+12, r24	; 0x0c
    1e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e24:	99 8b       	std	Y+17, r25	; 0x11
    1e26:	88 8b       	std	Y+16, r24	; 0x10
    1e28:	88 89       	ldd	r24, Y+16	; 0x10
    1e2a:	99 89       	ldd	r25, Y+17	; 0x11
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <_ZN8Keyboard8PercorreEv+0x236>
    1e30:	99 8b       	std	Y+17, r25	; 0x11
    1e32:	88 8b       	std	Y+16, r24	; 0x10
	      teste = false;
	    }
	   }
	   _delay_ms(10);

return teste;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e36:	63 96       	adiw	r28, 0x13	; 19
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	08 95       	ret

00001e48 <_ZN8Keyboard6retKeyEv>:

char Keyboard::retKey(){
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	1f 92       	push	r1
    1e4e:	1f 92       	push	r1
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	89 83       	std	Y+1, r24	; 0x01
	return key;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	80 81       	ld	r24, Z
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <_ZN8Keyboard3KeyEii>:

void Keyboard::Key(int i, int j) {
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	66 97       	sbiw	r28, 0x16	; 22
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	9a 8b       	std	Y+18, r25	; 0x12
    1e80:	89 8b       	std	Y+17, r24	; 0x11
    1e82:	7c 8b       	std	Y+20, r23	; 0x14
    1e84:	6b 8b       	std	Y+19, r22	; 0x13
    1e86:	5e 8b       	std	Y+22, r21	; 0x16
    1e88:	4d 8b       	std	Y+21, r20	; 0x15

	unsigned char keypad[4][4] = {	{'1','2','3','A'},
									{'4','5','6','B'},
									{'7','8','9','C'},
									{'*','0','#','D'}};
    1e8a:	20 e1       	ldi	r18, 0x10	; 16
    1e8c:	ee e1       	ldi	r30, 0x1E	; 30
    1e8e:	f2 e0       	ldi	r31, 0x02	; 2
    1e90:	ce 01       	movw	r24, r28
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	dc 01       	movw	r26, r24
    1e96:	01 90       	ld	r0, Z+
    1e98:	0d 92       	st	X+, r0
    1e9a:	2a 95       	dec	r18
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <_ZN8Keyboard3KeyEii+0x2c>

	key = keypad[i][j];
    1e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea2:	9c 01       	movw	r18, r24
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	8d 89       	ldd	r24, Y+21	; 0x15
    1eae:	9e 89       	ldd	r25, Y+22	; 0x16
    1eb0:	82 0f       	add	r24, r18
    1eb2:	93 1f       	adc	r25, r19
    1eb4:	9e 01       	movw	r18, r28
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	82 0f       	add	r24, r18
    1ebc:	93 1f       	adc	r25, r19
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	20 81       	ld	r18, Z
    1ec2:	89 89       	ldd	r24, Y+17	; 0x11
    1ec4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 83       	st	Z, r18
	//return key;
}
    1eca:	66 96       	adiw	r28, 0x16	; 22
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	08 95       	ret

00001edc <_ZN3LCDC1Ev>:
#define LCD_Command_Port PORTC		//Port dos comandos
#define RS PC0				// Pino de controle RS
#define RW PC1				// Pino de controle RW
#define EN PC2				// Pino de controle EN

LCD::LCD(){
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	1f 92       	push	r1
    1ee2:	1f 92       	push	r1
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	89 83       	std	Y+1, r24	; 0x01

}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <_ZN3LCD11LCD_CommandEh>:

void LCD::LCD_Command(unsigned char cmnd)
{
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	e1 97       	sbiw	r28, 0x31	; 49
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	98 ab       	std	Y+48, r25	; 0x30
    1f0c:	8f a7       	std	Y+47, r24	; 0x2f
    1f0e:	69 ab       	std	Y+49, r22	; 0x31
	LCD_Data_Port= cmnd; //comando em hexa nos pinos de controle
    1f10:	81 e3       	ldi	r24, 0x31	; 49
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	29 a9       	ldd	r18, Y+49	; 0x31
    1f16:	fc 01       	movw	r30, r24
    1f18:	20 83       	st	Z, r18
	LCD_Command_Port &= ~(1<<RS);	//coloca Rs em 0
    1f1a:	88 e2       	ldi	r24, 0x28	; 40
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	28 e2       	ldi	r18, 0x28	; 40
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	f9 01       	movw	r30, r18
    1f24:	20 81       	ld	r18, Z
    1f26:	2e 7f       	andi	r18, 0xFE	; 254
    1f28:	fc 01       	movw	r30, r24
    1f2a:	20 83       	st	Z, r18
	LCD_Command_Port &= ~(1<<RW);	// Rw em 0 para modo escrita
    1f2c:	88 e2       	ldi	r24, 0x28	; 40
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	28 e2       	ldi	r18, 0x28	; 40
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	f9 01       	movw	r30, r18
    1f36:	20 81       	ld	r18, Z
    1f38:	2d 7f       	andi	r18, 0xFD	; 253
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	20 83       	st	Z, r18
	LCD_Command_Port |= (1<<EN);	// Enable 1 , para escrever comando.
    1f3e:	88 e2       	ldi	r24, 0x28	; 40
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	28 e2       	ldi	r18, 0x28	; 40
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	f9 01       	movw	r30, r18
    1f48:	20 81       	ld	r18, Z
    1f4a:	24 60       	ori	r18, 0x04	; 4
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	20 83       	st	Z, r18
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e8       	ldi	r26, 0x80	; 128
    1f56:	bf e3       	ldi	r27, 0x3F	; 63
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	ab 83       	std	Y+3, r26	; 0x03
    1f5e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1f60:	2b ea       	ldi	r18, 0xAB	; 171
    1f62:	3a ea       	ldi	r19, 0xAA	; 170
    1f64:	4a ea       	ldi	r20, 0xAA	; 170
    1f66:	50 e4       	ldi	r21, 0x40	; 64
    1f68:	69 81       	ldd	r22, Y+1	; 0x01
    1f6a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	af 83       	std	Y+7, r26	; 0x07
    1f7e:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	50 e4       	ldi	r21, 0x40	; 64
    1f88:	69 81       	ldd	r22, Y+1	; 0x01
    1f8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	89 87       	std	Y+9, r24	; 0x09
    1f9a:	9a 87       	std	Y+10, r25	; 0x0a
    1f9c:	ab 87       	std	Y+11, r26	; 0x0b
    1f9e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	6d 81       	ldd	r22, Y+5	; 0x05
    1faa:	7e 81       	ldd	r23, Y+6	; 0x06
    1fac:	8f 81       	ldd	r24, Y+7	; 0x07
    1fae:	98 85       	ldd	r25, Y+8	; 0x08
    1fb0:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	1c f4       	brge	.+6      	; 0x1fbe <_ZN3LCD11LCD_CommandEh+0xc8>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8d 87       	std	Y+13, r24	; 0x0d
    1fbc:	b2 c0       	rjmp	.+356    	; 0x2122 <_ZN3LCD11LCD_CommandEh+0x22c>
	else if (__tmp2 > 65535)
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	69 85       	ldd	r22, Y+9	; 0x09
    1fc8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fcc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fce:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	0c f0       	brlt	.+2      	; 0x1fd8 <_ZN3LCD11LCD_CommandEh+0xe2>
    1fd6:	7b c0       	rjmp	.+246    	; 0x20ce <_ZN3LCD11LCD_CommandEh+0x1d8>
	{
		_delay_ms(__us / 1000.0);
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	69 81       	ldd	r22, Y+1	; 0x01
    1fe2:	7a 81       	ldd	r23, Y+2	; 0x02
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	0e 94 19 28 	call	0x5032	; 0x5032 <__divsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8e 87       	std	Y+14, r24	; 0x0e
    1ff2:	9f 87       	std	Y+15, r25	; 0x0f
    1ff4:	a8 8b       	std	Y+16, r26	; 0x10
    1ff6:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a e7       	ldi	r20, 0x7A	; 122
    1ffe:	55 e4       	ldi	r21, 0x45	; 69
    2000:	6e 85       	ldd	r22, Y+14	; 0x0e
    2002:	7f 85       	ldd	r23, Y+15	; 0x0f
    2004:	88 89       	ldd	r24, Y+16	; 0x10
    2006:	99 89       	ldd	r25, Y+17	; 0x11
    2008:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8a 8b       	std	Y+18, r24	; 0x12
    2012:	9b 8b       	std	Y+19, r25	; 0x13
    2014:	ac 8b       	std	Y+20, r26	; 0x14
    2016:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	6a 89       	ldd	r22, Y+18	; 0x12
    2022:	7b 89       	ldd	r23, Y+19	; 0x13
    2024:	8c 89       	ldd	r24, Y+20	; 0x14
    2026:	9d 89       	ldd	r25, Y+21	; 0x15
    2028:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <_ZN3LCD11LCD_CommandEh+0x144>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9f 8b       	std	Y+23, r25	; 0x17
    2036:	8e 8b       	std	Y+22, r24	; 0x16
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <_ZN3LCD11LCD_CommandEh+0x1c2>
	else if (__tmp > 65535)
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	6a 89       	ldd	r22, Y+18	; 0x12
    2044:	7b 89       	ldd	r23, Y+19	; 0x13
    2046:	8c 89       	ldd	r24, Y+20	; 0x14
    2048:	9d 89       	ldd	r25, Y+21	; 0x15
    204a:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <_ZN3LCD11LCD_CommandEh+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	6e 85       	ldd	r22, Y+14	; 0x0e
    205c:	7f 85       	ldd	r23, Y+15	; 0x0f
    205e:	88 89       	ldd	r24, Y+16	; 0x10
    2060:	99 89       	ldd	r25, Y+17	; 0x11
    2062:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9f 8b       	std	Y+23, r25	; 0x17
    2078:	8e 8b       	std	Y+22, r24	; 0x16
    207a:	0f c0       	rjmp	.+30     	; 0x209a <_ZN3LCD11LCD_CommandEh+0x1a4>
    207c:	80 e9       	ldi	r24, 0x90	; 144
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	99 8f       	std	Y+25, r25	; 0x19
    2082:	88 8f       	std	Y+24, r24	; 0x18
    2084:	88 8d       	ldd	r24, Y+24	; 0x18
    2086:	99 8d       	ldd	r25, Y+25	; 0x19
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <_ZN3LCD11LCD_CommandEh+0x192>
    208c:	99 8f       	std	Y+25, r25	; 0x19
    208e:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	8e 89       	ldd	r24, Y+22	; 0x16
    2092:	9f 89       	ldd	r25, Y+23	; 0x17
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9f 8b       	std	Y+23, r25	; 0x17
    2098:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	8e 89       	ldd	r24, Y+22	; 0x16
    209c:	9f 89       	ldd	r25, Y+23	; 0x17
    209e:	89 2b       	or	r24, r25
    20a0:	69 f7       	brne	.-38     	; 0x207c <_ZN3LCD11LCD_CommandEh+0x186>
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <_ZN3LCD11LCD_CommandEh+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	6a 89       	ldd	r22, Y+18	; 0x12
    20a6:	7b 89       	ldd	r23, Y+19	; 0x13
    20a8:	8c 89       	ldd	r24, Y+20	; 0x14
    20aa:	9d 89       	ldd	r25, Y+21	; 0x15
    20ac:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9f 8b       	std	Y+23, r25	; 0x17
    20b6:	8e 8b       	std	Y+22, r24	; 0x16
    20b8:	8e 89       	ldd	r24, Y+22	; 0x16
    20ba:	9f 89       	ldd	r25, Y+23	; 0x17
    20bc:	9b 8f       	std	Y+27, r25	; 0x1b
    20be:	8a 8f       	std	Y+26, r24	; 0x1a
    20c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <_ZN3LCD11LCD_CommandEh+0x1ce>
    20c8:	9b 8f       	std	Y+27, r25	; 0x1b
    20ca:	8a 8f       	std	Y+26, r24	; 0x1a
    20cc:	2a c0       	rjmp	.+84     	; 0x2122 <_ZN3LCD11LCD_CommandEh+0x22c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	53 e4       	ldi	r21, 0x43	; 67
    20d6:	6d 81       	ldd	r22, Y+5	; 0x05
    20d8:	7e 81       	ldd	r23, Y+6	; 0x06
    20da:	8f 81       	ldd	r24, Y+7	; 0x07
    20dc:	98 85       	ldd	r25, Y+8	; 0x08
    20de:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	ac f4       	brge	.+42     	; 0x2110 <_ZN3LCD11LCD_CommandEh+0x21a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    20e6:	69 85       	ldd	r22, Y+9	; 0x09
    20e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    20ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ee:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9d 8f       	std	Y+29, r25	; 0x1d
    20f8:	8c 8f       	std	Y+28, r24	; 0x1c
    20fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20fe:	9f 8f       	std	Y+31, r25	; 0x1f
    2100:	8e 8f       	std	Y+30, r24	; 0x1e
    2102:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2104:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <_ZN3LCD11LCD_CommandEh+0x210>
    210a:	9f 8f       	std	Y+31, r25	; 0x1f
    210c:	8e 8f       	std	Y+30, r24	; 0x1e
    210e:	0f c0       	rjmp	.+30     	; 0x212e <_ZN3LCD11LCD_CommandEh+0x238>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2110:	6d 81       	ldd	r22, Y+5	; 0x05
    2112:	7e 81       	ldd	r23, Y+6	; 0x06
    2114:	8f 81       	ldd	r24, Y+7	; 0x07
    2116:	98 85       	ldd	r25, Y+8	; 0x08
    2118:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8d 87       	std	Y+13, r24	; 0x0d
    2122:	8d 85       	ldd	r24, Y+13	; 0x0d
    2124:	88 a3       	std	Y+32, r24	; 0x20
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    2126:	88 a1       	ldd	r24, Y+32	; 0x20
    2128:	8a 95       	dec	r24
    212a:	f1 f7       	brne	.-4      	; 0x2128 <_ZN3LCD11LCD_CommandEh+0x232>
    212c:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
    212e:	88 e2       	ldi	r24, 0x28	; 40
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	28 e2       	ldi	r18, 0x28	; 40
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	f9 01       	movw	r30, r18
    2138:	20 81       	ld	r18, Z
    213a:	2b 7f       	andi	r18, 0xFB	; 251
    213c:	fc 01       	movw	r30, r24
    213e:	20 83       	st	Z, r18
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e4       	ldi	r26, 0x40	; 64
    2146:	b0 e4       	ldi	r27, 0x40	; 64
    2148:	89 a3       	std	Y+33, r24	; 0x21
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	ab a3       	std	Y+35, r26	; 0x23
    214e:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	55 e4       	ldi	r21, 0x45	; 69
    2158:	69 a1       	ldd	r22, Y+33	; 0x21
    215a:	7a a1       	ldd	r23, Y+34	; 0x22
    215c:	8b a1       	ldd	r24, Y+35	; 0x23
    215e:	9c a1       	ldd	r25, Y+36	; 0x24
    2160:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8d a3       	std	Y+37, r24	; 0x25
    216a:	9e a3       	std	Y+38, r25	; 0x26
    216c:	af a3       	std	Y+39, r26	; 0x27
    216e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	6d a1       	ldd	r22, Y+37	; 0x25
    217a:	7e a1       	ldd	r23, Y+38	; 0x26
    217c:	8f a1       	ldd	r24, Y+39	; 0x27
    217e:	98 a5       	ldd	r25, Y+40	; 0x28
    2180:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    2184:	88 23       	and	r24, r24
    2186:	2c f4       	brge	.+10     	; 0x2192 <_ZN3LCD11LCD_CommandEh+0x29c>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9a a7       	std	Y+42, r25	; 0x2a
    218e:	89 a7       	std	Y+41, r24	; 0x29
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <__stack+0x11>
	else if (__tmp > 65535)
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	6d a1       	ldd	r22, Y+37	; 0x25
    219c:	7e a1       	ldd	r23, Y+38	; 0x26
    219e:	8f a1       	ldd	r24, Y+39	; 0x27
    21a0:	98 a5       	ldd	r25, Y+40	; 0x28
    21a2:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	4c f5       	brge	.+82     	; 0x21fc <_ZN3LCD11LCD_CommandEh+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	69 a1       	ldd	r22, Y+33	; 0x21
    21b4:	7a a1       	ldd	r23, Y+34	; 0x22
    21b6:	8b a1       	ldd	r24, Y+35	; 0x23
    21b8:	9c a1       	ldd	r25, Y+36	; 0x24
    21ba:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9a a7       	std	Y+42, r25	; 0x2a
    21d0:	89 a7       	std	Y+41, r24	; 0x29
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <_ZN3LCD11LCD_CommandEh+0x2fc>
    21d4:	80 e9       	ldi	r24, 0x90	; 144
    21d6:	91 e0       	ldi	r25, 0x01	; 1
    21d8:	9c a7       	std	Y+44, r25	; 0x2c
    21da:	8b a7       	std	Y+43, r24	; 0x2b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    21dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21de:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <_ZN3LCD11LCD_CommandEh+0x2ea>
    21e4:	9c a7       	std	Y+44, r25	; 0x2c
    21e6:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	9a a7       	std	Y+42, r25	; 0x2a
    21f0:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	89 a5       	ldd	r24, Y+41	; 0x29
    21f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f6:	89 2b       	or	r24, r25
    21f8:	69 f7       	brne	.-38     	; 0x21d4 <_ZN3LCD11LCD_CommandEh+0x2de>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <__stack+0x25>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	6d a1       	ldd	r22, Y+37	; 0x25
    21fe:	7e a1       	ldd	r23, Y+38	; 0x26
    2200:	8f a1       	ldd	r24, Y+39	; 0x27
    2202:	98 a5       	ldd	r25, Y+40	; 0x28
    2204:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9a a7       	std	Y+42, r25	; 0x2a
    220e:	89 a7       	std	Y+41, r24	; 0x29
    2210:	89 a5       	ldd	r24, Y+41	; 0x29
    2212:	9a a5       	ldd	r25, Y+42	; 0x2a
    2214:	9e a7       	std	Y+46, r25	; 0x2e
    2216:	8d a7       	std	Y+45, r24	; 0x2d
    2218:	8d a5       	ldd	r24, Y+45	; 0x2d
    221a:	9e a5       	ldd	r25, Y+46	; 0x2e
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <__stack+0x1d>
    2220:	9e a7       	std	Y+46, r25	; 0x2e
    2222:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(3);
}
    2224:	e1 96       	adiw	r28, 0x31	; 49
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	08 95       	ret

00002236 <_ZN3LCD8LCD_CharEh>:

void LCD::LCD_Char (unsigned char char_data)
{
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	e1 97       	sbiw	r28, 0x31	; 49
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	98 ab       	std	Y+48, r25	; 0x30
    224c:	8f a7       	std	Y+47, r24	; 0x2f
    224e:	69 ab       	std	Y+49, r22	; 0x31
	LCD_Data_Port= char_data;
    2250:	81 e3       	ldi	r24, 0x31	; 49
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	29 a9       	ldd	r18, Y+49	; 0x31
    2256:	fc 01       	movw	r30, r24
    2258:	20 83       	st	Z, r18
	LCD_Command_Port |= (1<<RS);
    225a:	88 e2       	ldi	r24, 0x28	; 40
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	28 e2       	ldi	r18, 0x28	; 40
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	f9 01       	movw	r30, r18
    2264:	20 81       	ld	r18, Z
    2266:	21 60       	ori	r18, 0x01	; 1
    2268:	fc 01       	movw	r30, r24
    226a:	20 83       	st	Z, r18
	LCD_Command_Port &= ~(1<<RW);
    226c:	88 e2       	ldi	r24, 0x28	; 40
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	28 e2       	ldi	r18, 0x28	; 40
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	f9 01       	movw	r30, r18
    2276:	20 81       	ld	r18, Z
    2278:	2d 7f       	andi	r18, 0xFD	; 253
    227a:	fc 01       	movw	r30, r24
    227c:	20 83       	st	Z, r18
	LCD_Command_Port |= (1<<EN);
    227e:	88 e2       	ldi	r24, 0x28	; 40
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	28 e2       	ldi	r18, 0x28	; 40
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	f9 01       	movw	r30, r18
    2288:	20 81       	ld	r18, Z
    228a:	24 60       	ori	r18, 0x04	; 4
    228c:	fc 01       	movw	r30, r24
    228e:	20 83       	st	Z, r18
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e8       	ldi	r26, 0x80	; 128
    2296:	bf e3       	ldi	r27, 0x3F	; 63
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	ab 83       	std	Y+3, r26	; 0x03
    229e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    22a0:	2b ea       	ldi	r18, 0xAB	; 171
    22a2:	3a ea       	ldi	r19, 0xAA	; 170
    22a4:	4a ea       	ldi	r20, 0xAA	; 170
    22a6:	50 e4       	ldi	r21, 0x40	; 64
    22a8:	69 81       	ldd	r22, Y+1	; 0x01
    22aa:	7a 81       	ldd	r23, Y+2	; 0x02
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8d 83       	std	Y+5, r24	; 0x05
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	af 83       	std	Y+7, r26	; 0x07
    22be:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	50 e4       	ldi	r21, 0x40	; 64
    22c8:	69 81       	ldd	r22, Y+1	; 0x01
    22ca:	7a 81       	ldd	r23, Y+2	; 0x02
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	89 87       	std	Y+9, r24	; 0x09
    22da:	9a 87       	std	Y+10, r25	; 0x0a
    22dc:	ab 87       	std	Y+11, r26	; 0x0b
    22de:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	6d 81       	ldd	r22, Y+5	; 0x05
    22ea:	7e 81       	ldd	r23, Y+6	; 0x06
    22ec:	8f 81       	ldd	r24, Y+7	; 0x07
    22ee:	98 85       	ldd	r25, Y+8	; 0x08
    22f0:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	1c f4       	brge	.+6      	; 0x22fe <_ZN3LCD8LCD_CharEh+0xc8>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	8d 87       	std	Y+13, r24	; 0x0d
    22fc:	b2 c0       	rjmp	.+356    	; 0x2462 <_ZN3LCD8LCD_CharEh+0x22c>
	else if (__tmp2 > 65535)
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	69 85       	ldd	r22, Y+9	; 0x09
    2308:	7a 85       	ldd	r23, Y+10	; 0x0a
    230a:	8b 85       	ldd	r24, Y+11	; 0x0b
    230c:	9c 85       	ldd	r25, Y+12	; 0x0c
    230e:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    2312:	18 16       	cp	r1, r24
    2314:	0c f0       	brlt	.+2      	; 0x2318 <_ZN3LCD8LCD_CharEh+0xe2>
    2316:	7b c0       	rjmp	.+246    	; 0x240e <_ZN3LCD8LCD_CharEh+0x1d8>
	{
		_delay_ms(__us / 1000.0);
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	69 81       	ldd	r22, Y+1	; 0x01
    2322:	7a 81       	ldd	r23, Y+2	; 0x02
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	0e 94 19 28 	call	0x5032	; 0x5032 <__divsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8e 87       	std	Y+14, r24	; 0x0e
    2332:	9f 87       	std	Y+15, r25	; 0x0f
    2334:	a8 8b       	std	Y+16, r26	; 0x10
    2336:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a e7       	ldi	r20, 0x7A	; 122
    233e:	55 e4       	ldi	r21, 0x45	; 69
    2340:	6e 85       	ldd	r22, Y+14	; 0x0e
    2342:	7f 85       	ldd	r23, Y+15	; 0x0f
    2344:	88 89       	ldd	r24, Y+16	; 0x10
    2346:	99 89       	ldd	r25, Y+17	; 0x11
    2348:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8a 8b       	std	Y+18, r24	; 0x12
    2352:	9b 8b       	std	Y+19, r25	; 0x13
    2354:	ac 8b       	std	Y+20, r26	; 0x14
    2356:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	6a 89       	ldd	r22, Y+18	; 0x12
    2362:	7b 89       	ldd	r23, Y+19	; 0x13
    2364:	8c 89       	ldd	r24, Y+20	; 0x14
    2366:	9d 89       	ldd	r25, Y+21	; 0x15
    2368:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <_ZN3LCD8LCD_CharEh+0x144>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9f 8b       	std	Y+23, r25	; 0x17
    2376:	8e 8b       	std	Y+22, r24	; 0x16
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <_ZN3LCD8LCD_CharEh+0x1c2>
	else if (__tmp > 65535)
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	57 e4       	ldi	r21, 0x47	; 71
    2382:	6a 89       	ldd	r22, Y+18	; 0x12
    2384:	7b 89       	ldd	r23, Y+19	; 0x13
    2386:	8c 89       	ldd	r24, Y+20	; 0x14
    2388:	9d 89       	ldd	r25, Y+21	; 0x15
    238a:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    238e:	18 16       	cp	r1, r24
    2390:	4c f5       	brge	.+82     	; 0x23e4 <_ZN3LCD8LCD_CharEh+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e2       	ldi	r20, 0x20	; 32
    2398:	51 e4       	ldi	r21, 0x41	; 65
    239a:	6e 85       	ldd	r22, Y+14	; 0x0e
    239c:	7f 85       	ldd	r23, Y+15	; 0x0f
    239e:	88 89       	ldd	r24, Y+16	; 0x10
    23a0:	99 89       	ldd	r25, Y+17	; 0x11
    23a2:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9f 8b       	std	Y+23, r25	; 0x17
    23b8:	8e 8b       	std	Y+22, r24	; 0x16
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <_ZN3LCD8LCD_CharEh+0x1a4>
    23bc:	80 e9       	ldi	r24, 0x90	; 144
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	99 8f       	std	Y+25, r25	; 0x19
    23c2:	88 8f       	std	Y+24, r24	; 0x18
    23c4:	88 8d       	ldd	r24, Y+24	; 0x18
    23c6:	99 8d       	ldd	r25, Y+25	; 0x19
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <_ZN3LCD8LCD_CharEh+0x192>
    23cc:	99 8f       	std	Y+25, r25	; 0x19
    23ce:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	8e 89       	ldd	r24, Y+22	; 0x16
    23d2:	9f 89       	ldd	r25, Y+23	; 0x17
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	9f 8b       	std	Y+23, r25	; 0x17
    23d8:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23da:	8e 89       	ldd	r24, Y+22	; 0x16
    23dc:	9f 89       	ldd	r25, Y+23	; 0x17
    23de:	89 2b       	or	r24, r25
    23e0:	69 f7       	brne	.-38     	; 0x23bc <_ZN3LCD8LCD_CharEh+0x186>
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <_ZN3LCD8LCD_CharEh+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	6a 89       	ldd	r22, Y+18	; 0x12
    23e6:	7b 89       	ldd	r23, Y+19	; 0x13
    23e8:	8c 89       	ldd	r24, Y+20	; 0x14
    23ea:	9d 89       	ldd	r25, Y+21	; 0x15
    23ec:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9f 8b       	std	Y+23, r25	; 0x17
    23f6:	8e 8b       	std	Y+22, r24	; 0x16
    23f8:	8e 89       	ldd	r24, Y+22	; 0x16
    23fa:	9f 89       	ldd	r25, Y+23	; 0x17
    23fc:	9b 8f       	std	Y+27, r25	; 0x1b
    23fe:	8a 8f       	std	Y+26, r24	; 0x1a
    2400:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2402:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <_ZN3LCD8LCD_CharEh+0x1ce>
    2408:	9b 8f       	std	Y+27, r25	; 0x1b
    240a:	8a 8f       	std	Y+26, r24	; 0x1a
    240c:	2a c0       	rjmp	.+84     	; 0x2462 <_ZN3LCD8LCD_CharEh+0x22c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	53 e4       	ldi	r21, 0x43	; 67
    2416:	6d 81       	ldd	r22, Y+5	; 0x05
    2418:	7e 81       	ldd	r23, Y+6	; 0x06
    241a:	8f 81       	ldd	r24, Y+7	; 0x07
    241c:	98 85       	ldd	r25, Y+8	; 0x08
    241e:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    2422:	18 16       	cp	r1, r24
    2424:	ac f4       	brge	.+42     	; 0x2450 <_ZN3LCD8LCD_CharEh+0x21a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2426:	69 85       	ldd	r22, Y+9	; 0x09
    2428:	7a 85       	ldd	r23, Y+10	; 0x0a
    242a:	8b 85       	ldd	r24, Y+11	; 0x0b
    242c:	9c 85       	ldd	r25, Y+12	; 0x0c
    242e:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9d 8f       	std	Y+29, r25	; 0x1d
    2438:	8c 8f       	std	Y+28, r24	; 0x1c
    243a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    243c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    243e:	9f 8f       	std	Y+31, r25	; 0x1f
    2440:	8e 8f       	std	Y+30, r24	; 0x1e
    2442:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2444:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <_ZN3LCD8LCD_CharEh+0x210>
    244a:	9f 8f       	std	Y+31, r25	; 0x1f
    244c:	8e 8f       	std	Y+30, r24	; 0x1e
    244e:	0f c0       	rjmp	.+30     	; 0x246e <_ZN3LCD8LCD_CharEh+0x238>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2450:	6d 81       	ldd	r22, Y+5	; 0x05
    2452:	7e 81       	ldd	r23, Y+6	; 0x06
    2454:	8f 81       	ldd	r24, Y+7	; 0x07
    2456:	98 85       	ldd	r25, Y+8	; 0x08
    2458:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8d 87       	std	Y+13, r24	; 0x0d
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	88 a3       	std	Y+32, r24	; 0x20
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    2466:	88 a1       	ldd	r24, Y+32	; 0x20
    2468:	8a 95       	dec	r24
    246a:	f1 f7       	brne	.-4      	; 0x2468 <_ZN3LCD8LCD_CharEh+0x232>
    246c:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
    246e:	88 e2       	ldi	r24, 0x28	; 40
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	28 e2       	ldi	r18, 0x28	; 40
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	f9 01       	movw	r30, r18
    2478:	20 81       	ld	r18, Z
    247a:	2b 7f       	andi	r18, 0xFB	; 251
    247c:	fc 01       	movw	r30, r24
    247e:	20 83       	st	Z, r18
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e8       	ldi	r26, 0x80	; 128
    2486:	bf e3       	ldi	r27, 0x3F	; 63
    2488:	89 a3       	std	Y+33, r24	; 0x21
    248a:	9a a3       	std	Y+34, r25	; 0x22
    248c:	ab a3       	std	Y+35, r26	; 0x23
    248e:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a e7       	ldi	r20, 0x7A	; 122
    2496:	55 e4       	ldi	r21, 0x45	; 69
    2498:	69 a1       	ldd	r22, Y+33	; 0x21
    249a:	7a a1       	ldd	r23, Y+34	; 0x22
    249c:	8b a1       	ldd	r24, Y+35	; 0x23
    249e:	9c a1       	ldd	r25, Y+36	; 0x24
    24a0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8d a3       	std	Y+37, r24	; 0x25
    24aa:	9e a3       	std	Y+38, r25	; 0x26
    24ac:	af a3       	std	Y+39, r26	; 0x27
    24ae:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	6d a1       	ldd	r22, Y+37	; 0x25
    24ba:	7e a1       	ldd	r23, Y+38	; 0x26
    24bc:	8f a1       	ldd	r24, Y+39	; 0x27
    24be:	98 a5       	ldd	r25, Y+40	; 0x28
    24c0:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <_ZN3LCD8LCD_CharEh+0x29c>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9a a7       	std	Y+42, r25	; 0x2a
    24ce:	89 a7       	std	Y+41, r24	; 0x29
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <_ZN3LCD8LCD_CharEh+0x31a>
	else if (__tmp > 65535)
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	6d a1       	ldd	r22, Y+37	; 0x25
    24dc:	7e a1       	ldd	r23, Y+38	; 0x26
    24de:	8f a1       	ldd	r24, Y+39	; 0x27
    24e0:	98 a5       	ldd	r25, Y+40	; 0x28
    24e2:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <_ZN3LCD8LCD_CharEh+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	69 a1       	ldd	r22, Y+33	; 0x21
    24f4:	7a a1       	ldd	r23, Y+34	; 0x22
    24f6:	8b a1       	ldd	r24, Y+35	; 0x23
    24f8:	9c a1       	ldd	r25, Y+36	; 0x24
    24fa:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9a a7       	std	Y+42, r25	; 0x2a
    2510:	89 a7       	std	Y+41, r24	; 0x29
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <_ZN3LCD8LCD_CharEh+0x2fc>
    2514:	80 e9       	ldi	r24, 0x90	; 144
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	9c a7       	std	Y+44, r25	; 0x2c
    251a:	8b a7       	std	Y+43, r24	; 0x2b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    251c:	8b a5       	ldd	r24, Y+43	; 0x2b
    251e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <_ZN3LCD8LCD_CharEh+0x2ea>
    2524:	9c a7       	std	Y+44, r25	; 0x2c
    2526:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	89 a5       	ldd	r24, Y+41	; 0x29
    252a:	9a a5       	ldd	r25, Y+42	; 0x2a
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9a a7       	std	Y+42, r25	; 0x2a
    2530:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	89 a5       	ldd	r24, Y+41	; 0x29
    2534:	9a a5       	ldd	r25, Y+42	; 0x2a
    2536:	89 2b       	or	r24, r25
    2538:	69 f7       	brne	.-38     	; 0x2514 <_ZN3LCD8LCD_CharEh+0x2de>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <_ZN3LCD8LCD_CharEh+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6d a1       	ldd	r22, Y+37	; 0x25
    253e:	7e a1       	ldd	r23, Y+38	; 0x26
    2540:	8f a1       	ldd	r24, Y+39	; 0x27
    2542:	98 a5       	ldd	r25, Y+40	; 0x28
    2544:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9a a7       	std	Y+42, r25	; 0x2a
    254e:	89 a7       	std	Y+41, r24	; 0x29
    2550:	89 a5       	ldd	r24, Y+41	; 0x29
    2552:	9a a5       	ldd	r25, Y+42	; 0x2a
    2554:	9e a7       	std	Y+46, r25	; 0x2e
    2556:	8d a7       	std	Y+45, r24	; 0x2d
    2558:	8d a5       	ldd	r24, Y+45	; 0x2d
    255a:	9e a5       	ldd	r25, Y+46	; 0x2e
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <_ZN3LCD8LCD_CharEh+0x326>
    2560:	9e a7       	std	Y+46, r25	; 0x2e
    2562:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1);
}
    2564:	e1 96       	adiw	r28, 0x31	; 49
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <_ZN3LCD8LCD_InitEv>:

void LCD::LCD_Init (void)
{
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	60 97       	sbiw	r28, 0x10	; 16
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	98 8b       	std	Y+16, r25	; 0x10
    258c:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_Command_Dir = 0xFF;		//define como saida 11111111 pinos de controle
    258e:	87 e2       	ldi	r24, 0x27	; 39
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	2f ef       	ldi	r18, 0xFF	; 255
    2594:	fc 01       	movw	r30, r24
    2596:	20 83       	st	Z, r18
	LCD_Data_Dir = 0xFF;		// pinos de dados como saida
    2598:	80 e3       	ldi	r24, 0x30	; 48
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	2f ef       	ldi	r18, 0xFF	; 255
    259e:	fc 01       	movw	r30, r24
    25a0:	20 83       	st	Z, r18
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	a0 ea       	ldi	r26, 0xA0	; 160
    25a8:	b1 e4       	ldi	r27, 0x41	; 65
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	ab 83       	std	Y+3, r26	; 0x03
    25b0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a e7       	ldi	r20, 0x7A	; 122
    25b8:	55 e4       	ldi	r21, 0x45	; 69
    25ba:	69 81       	ldd	r22, Y+1	; 0x01
    25bc:	7a 81       	ldd	r23, Y+2	; 0x02
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8d 83       	std	Y+5, r24	; 0x05
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	af 83       	std	Y+7, r26	; 0x07
    25d0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	40 e8       	ldi	r20, 0x80	; 128
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	6d 81       	ldd	r22, Y+5	; 0x05
    25dc:	7e 81       	ldd	r23, Y+6	; 0x06
    25de:	8f 81       	ldd	r24, Y+7	; 0x07
    25e0:	98 85       	ldd	r25, Y+8	; 0x08
    25e2:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	2c f4       	brge	.+10     	; 0x25f4 <_ZN3LCD8LCD_InitEv+0x7e>
		__ticks = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9a 87       	std	Y+10, r25	; 0x0a
    25f0:	89 87       	std	Y+9, r24	; 0x09
    25f2:	3f c0       	rjmp	.+126    	; 0x2672 <_ZN3LCD8LCD_InitEv+0xfc>
	else if (__tmp > 65535)
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	3f ef       	ldi	r19, 0xFF	; 255
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	57 e4       	ldi	r21, 0x47	; 71
    25fc:	6d 81       	ldd	r22, Y+5	; 0x05
    25fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2600:	8f 81       	ldd	r24, Y+7	; 0x07
    2602:	98 85       	ldd	r25, Y+8	; 0x08
    2604:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    2608:	18 16       	cp	r1, r24
    260a:	4c f5       	brge	.+82     	; 0x265e <_ZN3LCD8LCD_InitEv+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	69 81       	ldd	r22, Y+1	; 0x01
    2616:	7a 81       	ldd	r23, Y+2	; 0x02
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9a 87       	std	Y+10, r25	; 0x0a
    2632:	89 87       	std	Y+9, r24	; 0x09
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <_ZN3LCD8LCD_InitEv+0xde>
    2636:	80 e9       	ldi	r24, 0x90	; 144
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	9c 87       	std	Y+12, r25	; 0x0c
    263c:	8b 87       	std	Y+11, r24	; 0x0b
    263e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2640:	9c 85       	ldd	r25, Y+12	; 0x0c
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <_ZN3LCD8LCD_InitEv+0xcc>
    2646:	9c 87       	std	Y+12, r25	; 0x0c
    2648:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9a 87       	std	Y+10, r25	; 0x0a
    2652:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	89 2b       	or	r24, r25
    265a:	69 f7       	brne	.-38     	; 0x2636 <_ZN3LCD8LCD_InitEv+0xc0>
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <_ZN3LCD8LCD_InitEv+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	6d 81       	ldd	r22, Y+5	; 0x05
    2660:	7e 81       	ldd	r23, Y+6	; 0x06
    2662:	8f 81       	ldd	r24, Y+7	; 0x07
    2664:	98 85       	ldd	r25, Y+8	; 0x08
    2666:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	9a 87       	std	Y+10, r25	; 0x0a
    2670:	89 87       	std	Y+9, r24	; 0x09
    2672:	89 85       	ldd	r24, Y+9	; 0x09
    2674:	9a 85       	ldd	r25, Y+10	; 0x0a
    2676:	9e 87       	std	Y+14, r25	; 0x0e
    2678:	8d 87       	std	Y+13, r24	; 0x0d
    267a:	8d 85       	ldd	r24, Y+13	; 0x0d
    267c:	9e 85       	ldd	r25, Y+14	; 0x0e
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <_ZN3LCD8LCD_InitEv+0x108>
    2682:	9e 87       	std	Y+14, r25	; 0x0e
    2684:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(20);			//aguarda inicio do lcd (15ms minimos)

	LCD_Command (0x38);		// comando para lcd funcionar em 16x2 e 8bits de dados
    2686:	8f 85       	ldd	r24, Y+15	; 0x0f
    2688:	98 89       	ldd	r25, Y+16	; 0x10
    268a:	68 e3       	ldi	r22, 0x38	; 56
    268c:	34 dc       	rcall	.-1944   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
	LCD_Command (0x0C);		// display ON cursor off
    268e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2690:	98 89       	ldd	r25, Y+16	; 0x10
    2692:	6c e0       	ldi	r22, 0x0C	; 12
    2694:	30 dc       	rcall	.-1952   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
	LCD_Command (0x06);		// cursor incrementa sozinho
    2696:	8f 85       	ldd	r24, Y+15	; 0x0f
    2698:	98 89       	ldd	r25, Y+16	; 0x10
    269a:	66 e0       	ldi	r22, 0x06	; 6
    269c:	2c dc       	rcall	.-1960   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
	LCD_Command (0x01);		// clear no display
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	98 89       	ldd	r25, Y+16	; 0x10
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	28 dc       	rcall	.-1968   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
	LCD_Command (0x80);		// cursor no inicio
    26a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a8:	98 89       	ldd	r25, Y+16	; 0x10
    26aa:	60 e8       	ldi	r22, 0x80	; 128
    26ac:	24 dc       	rcall	.-1976   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
}
    26ae:	60 96       	adiw	r28, 0x10	; 16
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <_ZN3LCD10LCD_StringEPc>:

void LCD::LCD_String (char *str)
{
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <_ZN3LCD10LCD_StringEPc+0x6>
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <_ZN3LCD10LCD_StringEPc+0x8>
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
    26d0:	7e 83       	std	Y+6, r23	; 0x06
    26d2:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	for(i=0;str[i]!=0;i++)
    26d4:	1a 82       	std	Y+2, r1	; 0x02
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	11 c0       	rjmp	.+34     	; 0x26fc <_ZN3LCD10LCD_StringEPc+0x3c>
	{
		LCD_Char (str[i]);
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	9a 81       	ldd	r25, Y+2	; 0x02
    26de:	2d 81       	ldd	r18, Y+5	; 0x05
    26e0:	3e 81       	ldd	r19, Y+6	; 0x06
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	fc 01       	movw	r30, r24
    26e8:	20 81       	ld	r18, Z
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	62 2f       	mov	r22, r18
    26f0:	a2 dd       	rcall	.-1212   	; 0x2236 <_ZN3LCD8LCD_CharEh>
}

void LCD::LCD_String (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	2d 81       	ldd	r18, Y+5	; 0x05
    2702:	3e 81       	ldd	r19, Y+6	; 0x06
    2704:	82 0f       	add	r24, r18
    2706:	93 1f       	adc	r25, r19
    2708:	fc 01       	movw	r30, r24
    270a:	80 81       	ld	r24, Z
    270c:	88 23       	and	r24, r24
    270e:	29 f7       	brne	.-54     	; 0x26da <_ZN3LCD10LCD_StringEPc+0x1a>
	{
		LCD_Char (str[i]);
	}
}
    2710:	26 96       	adiw	r28, 0x06	; 6
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	08 95       	ret

00002722 <_ZN3LCD9LCD_ClearEv>:


void LCD::LCD_Clear()
{
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	1f 92       	push	r1
    2728:	1f 92       	push	r1
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	LCD_Command (0x01);		//limpa display
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	61 e0       	ldi	r22, 0x01	; 1
    2738:	de db       	rcall	.-2116   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
	LCD_Command (0x80);		// cursor no inicio
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	9a 81       	ldd	r25, Y+2	; 0x02
    273e:	60 e8       	ldi	r22, 0x80	; 128
    2740:	da db       	rcall	.-2124   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <_ZN6EEPROMC1Ev>:
#include "fila.h"
#include <avr/eeprom.h>

class EEPROM{
public:
	EEPROM(){};
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	1f 92       	push	r1
    2752:	1f 92       	push	r1
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <_ZN6EEPROMD1Ev>:
	~EEPROM(){};
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	1f 92       	push	r1
    276c:	1f 92       	push	r1
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	08 95       	ret

00002780 <_Z6addSeqPh8Keyboard6EEPROM3LCD>:
#include "GPIO.h"
#include "uart.h"
#include "DTMF.h"
#include "EEPROM.h"

void addSeq(uint8_t * posi, Keyboard teclado, EEPROM eeprom, LCD display){
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	a3 97       	sbiw	r28, 0x23	; 35
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	9b a3       	std	Y+35, r25	; 0x23
    2796:	8a a3       	std	Y+34, r24	; 0x22
	display.LCD_Clear();
    2798:	ce 01       	movw	r24, r28
    279a:	cc 96       	adiw	r24, 0x3c	; 60
    279c:	c2 df       	rcall	.-124    	; 0x2722 <_ZN3LCD9LCD_ClearEv>
	display.LCD_String("Digite a seq");
    279e:	ce 01       	movw	r24, r28
    27a0:	cc 96       	adiw	r24, 0x3c	; 60
    27a2:	6e e2       	ldi	r22, 0x2E	; 46
    27a4:	72 e0       	ldi	r23, 0x02	; 2
    27a6:	8c df       	rcall	.-232    	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
	display.LCD_Command(0xC0);
    27a8:	ce 01       	movw	r24, r28
    27aa:	cc 96       	adiw	r24, 0x3c	; 60
    27ac:	60 ec       	ldi	r22, 0xC0	; 192
    27ae:	a3 db       	rcall	.-2234   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
	int i = 0;
    27b0:	1a 82       	std	Y+2, r1	; 0x02
    27b2:	19 82       	std	Y+1, r1	; 0x01
	char a = 'n';
    27b4:	8e e6       	ldi	r24, 0x6E	; 110
    27b6:	8b 83       	std	Y+3, r24	; 0x03
	Fila <uint8_t, 10> filat;
    27b8:	ce 01       	movw	r24, r28
    27ba:	42 96       	adiw	r24, 0x12	; 18
    27bc:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <_ZN4FilaIhLi10EEC1Ev>
	while(i < 9){
    27c0:	8b c0       	rjmp	.+278    	; 0x28d8 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x158>
		while(teclado.Percorre()){
    27c2:	72 c0       	rjmp	.+228    	; 0x28a8 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x128>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 ea       	ldi	r26, 0xA0	; 160
    27ca:	b1 e4       	ldi	r27, 0x41	; 65
    27cc:	8c 83       	std	Y+4, r24	; 0x04
    27ce:	9d 83       	std	Y+5, r25	; 0x05
    27d0:	ae 83       	std	Y+6, r26	; 0x06
    27d2:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a e7       	ldi	r20, 0x7A	; 122
    27da:	55 e4       	ldi	r21, 0x45	; 69
    27dc:	6c 81       	ldd	r22, Y+4	; 0x04
    27de:	7d 81       	ldd	r23, Y+5	; 0x05
    27e0:	8e 81       	ldd	r24, Y+6	; 0x06
    27e2:	9f 81       	ldd	r25, Y+7	; 0x07
    27e4:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	88 87       	std	Y+8, r24	; 0x08
    27ee:	99 87       	std	Y+9, r25	; 0x09
    27f0:	aa 87       	std	Y+10, r26	; 0x0a
    27f2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	68 85       	ldd	r22, Y+8	; 0x08
    27fe:	79 85       	ldd	r23, Y+9	; 0x09
    2800:	8a 85       	ldd	r24, Y+10	; 0x0a
    2802:	9b 85       	ldd	r25, Y+11	; 0x0b
    2804:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x96>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9d 87       	std	Y+13, r25	; 0x0d
    2812:	8c 87       	std	Y+12, r24	; 0x0c
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x114>
	else if (__tmp > 65535)
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	68 85       	ldd	r22, Y+8	; 0x08
    2820:	79 85       	ldd	r23, Y+9	; 0x09
    2822:	8a 85       	ldd	r24, Y+10	; 0x0a
    2824:	9b 85       	ldd	r25, Y+11	; 0x0b
    2826:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	6c 81       	ldd	r22, Y+4	; 0x04
    2838:	7d 81       	ldd	r23, Y+5	; 0x05
    283a:	8e 81       	ldd	r24, Y+6	; 0x06
    283c:	9f 81       	ldd	r25, Y+7	; 0x07
    283e:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9d 87       	std	Y+13, r25	; 0x0d
    2854:	8c 87       	std	Y+12, r24	; 0x0c
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0xf6>
    2858:	80 e9       	ldi	r24, 0x90	; 144
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	9f 87       	std	Y+15, r25	; 0x0f
    285e:	8e 87       	std	Y+14, r24	; 0x0e
    2860:	8e 85       	ldd	r24, Y+14	; 0x0e
    2862:	9f 85       	ldd	r25, Y+15	; 0x0f
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0xe4>
    2868:	9f 87       	std	Y+15, r25	; 0x0f
    286a:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8c 85       	ldd	r24, Y+12	; 0x0c
    286e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9d 87       	std	Y+13, r25	; 0x0d
    2874:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8c 85       	ldd	r24, Y+12	; 0x0c
    2878:	9d 85       	ldd	r25, Y+13	; 0x0d
    287a:	89 2b       	or	r24, r25
    287c:	69 f7       	brne	.-38     	; 0x2858 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0xd8>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	68 85       	ldd	r22, Y+8	; 0x08
    2882:	79 85       	ldd	r23, Y+9	; 0x09
    2884:	8a 85       	ldd	r24, Y+10	; 0x0a
    2886:	9b 85       	ldd	r25, Y+11	; 0x0b
    2888:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9d 87       	std	Y+13, r25	; 0x0d
    2892:	8c 87       	std	Y+12, r24	; 0x0c
    2894:	8c 85       	ldd	r24, Y+12	; 0x0c
    2896:	9d 85       	ldd	r25, Y+13	; 0x0d
    2898:	99 8b       	std	Y+17, r25	; 0x11
    289a:	88 8b       	std	Y+16, r24	; 0x10
    289c:	88 89       	ldd	r24, Y+16	; 0x10
    289e:	99 89       	ldd	r25, Y+17	; 0x11
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x120>
    28a4:	99 8b       	std	Y+17, r25	; 0x11
    28a6:	88 8b       	std	Y+16, r24	; 0x10
    28a8:	ce 01       	movw	r24, r28
    28aa:	89 96       	adiw	r24, 0x29	; 41
    28ac:	a4 d9       	rcall	.-3256   	; 0x1bf6 <_ZN8Keyboard8PercorreEv>
    28ae:	88 23       	and	r24, r24
    28b0:	09 f0       	breq	.+2      	; 0x28b4 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x134>
    28b2:	88 cf       	rjmp	.-240    	; 0x27c4 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x44>
		_delay_ms(20);

	}
	i++;
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	89 83       	std	Y+1, r24	; 0x01
	a = teclado.retKey();
    28be:	ce 01       	movw	r24, r28
    28c0:	89 96       	adiw	r24, 0x29	; 41
    28c2:	c2 da       	rcall	.-2684   	; 0x1e48 <_ZN8Keyboard6retKeyEv>
    28c4:	8b 83       	std	Y+3, r24	; 0x03
	filat.enfileira(a);
    28c6:	ce 01       	movw	r24, r28
    28c8:	42 96       	adiw	r24, 0x12	; 18
    28ca:	6b 81       	ldd	r22, Y+3	; 0x03
    28cc:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <_ZN4FilaIhLi10EE9enfileiraEh>
	display.LCD_Char(a);
    28d0:	ce 01       	movw	r24, r28
    28d2:	cc 96       	adiw	r24, 0x3c	; 60
    28d4:	6b 81       	ldd	r22, Y+3	; 0x03
    28d6:	af dc       	rcall	.-1698   	; 0x2236 <_ZN3LCD8LCD_CharEh>
	display.LCD_String("Digite a seq");
	display.LCD_Command(0xC0);
	int i = 0;
	char a = 'n';
	Fila <uint8_t, 10> filat;
	while(i < 9){
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	09 97       	sbiw	r24, 0x09	; 9
    28de:	0c f4       	brge	.+2      	; 0x28e2 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x162>
    28e0:	70 cf       	rjmp	.-288    	; 0x27c2 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x42>
	a = teclado.retKey();
	filat.enfileira(a);
	display.LCD_Char(a);

	}
	eeprom.write_string(posi, filat);
    28e2:	4a a1       	ldd	r20, Y+34	; 0x22
    28e4:	5b a1       	ldd	r21, Y+35	; 0x23
    28e6:	2a ad       	ldd	r18, Y+58	; 0x3a
    28e8:	3b ad       	ldd	r19, Y+59	; 0x3b
    28ea:	8d b7       	in	r24, 0x3d	; 61
    28ec:	9e b7       	in	r25, 0x3e	; 62
    28ee:	40 97       	sbiw	r24, 0x10	; 16
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	9e bf       	out	0x3e, r25	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	8d bf       	out	0x3d, r24	; 61
    28fa:	8d b7       	in	r24, 0x3d	; 61
    28fc:	9e b7       	in	r25, 0x3e	; 62
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	60 e1       	ldi	r22, 0x10	; 16
    2902:	fe 01       	movw	r30, r28
    2904:	72 96       	adiw	r30, 0x12	; 18
    2906:	dc 01       	movw	r26, r24
    2908:	01 90       	ld	r0, Z+
    290a:	0d 92       	st	X+, r0
    290c:	6a 95       	dec	r22
    290e:	e1 f7       	brne	.-8      	; 0x2908 <_Z6addSeqPh8Keyboard6EEPROM3LCD+0x188>
    2910:	ba 01       	movw	r22, r20
    2912:	c9 01       	movw	r24, r18
    2914:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN6EEPROM12write_stringEPh4FilaIhLi10EE>
    2918:	8d b7       	in	r24, 0x3d	; 61
    291a:	9e b7       	in	r25, 0x3e	; 62
    291c:	40 96       	adiw	r24, 0x10	; 16
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
	display.LCD_Clear();
    2928:	ce 01       	movw	r24, r28
    292a:	cc 96       	adiw	r24, 0x3c	; 60
    292c:	fa de       	rcall	.-524    	; 0x2722 <_ZN3LCD9LCD_ClearEv>

}
    292e:	a3 96       	adiw	r28, 0x23	; 35
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <main>:
int main() {
    2940:	6f 92       	push	r6
    2942:	7f 92       	push	r7
    2944:	8f 92       	push	r8
    2946:	9f 92       	push	r9
    2948:	af 92       	push	r10
    294a:	bf 92       	push	r11
    294c:	cf 92       	push	r12
    294e:	df 92       	push	r13
    2950:	ef 92       	push	r14
    2952:	ff 92       	push	r15
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	c9 59       	subi	r28, 0x99	; 153
    2962:	d1 40       	sbci	r29, 0x01	; 1
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61

//------------------------- Instancias linhas e colunas do teclado------------------------
	GPIO l1 = GPIO(11, GPIO::OUTPUT);
    296e:	ce 01       	movw	r24, r28
    2970:	8c 52       	subi	r24, 0x2C	; 44
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	41 e0       	ldi	r20, 0x01	; 1
    2976:	6b e0       	ldi	r22, 0x0B	; 11
    2978:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO l2 = GPIO(10, GPIO::OUTPUT);
    297c:	ce 01       	movw	r24, r28
    297e:	89 52       	subi	r24, 0x29	; 41
    2980:	9f 4f       	sbci	r25, 0xFF	; 255
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	6a e0       	ldi	r22, 0x0A	; 10
    2986:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO l3 = GPIO(9, GPIO::OUTPUT);
    298a:	ce 01       	movw	r24, r28
    298c:	86 52       	subi	r24, 0x26	; 38
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	41 e0       	ldi	r20, 0x01	; 1
    2992:	69 e0       	ldi	r22, 0x09	; 9
    2994:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO l4 = GPIO(8, GPIO::OUTPUT);
    2998:	ce 01       	movw	r24, r28
    299a:	83 52       	subi	r24, 0x23	; 35
    299c:	9f 4f       	sbci	r25, 0xFF	; 255
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	68 e0       	ldi	r22, 0x08	; 8
    29a2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO c1 = GPIO(7, GPIO::INPUT);
    29a6:	ce 01       	movw	r24, r28
    29a8:	80 52       	subi	r24, 0x20	; 32
    29aa:	9f 4f       	sbci	r25, 0xFF	; 255
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	67 e0       	ldi	r22, 0x07	; 7
    29b0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO c2 = GPIO(6, GPIO::INPUT);
    29b4:	ce 01       	movw	r24, r28
    29b6:	8d 51       	subi	r24, 0x1D	; 29
    29b8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	66 e0       	ldi	r22, 0x06	; 6
    29be:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO c3 = GPIO(5, GPIO::INPUT);
    29c2:	ce 01       	movw	r24, r28
    29c4:	8a 51       	subi	r24, 0x1A	; 26
    29c6:	9f 4f       	sbci	r25, 0xFF	; 255
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	65 e0       	ldi	r22, 0x05	; 5
    29cc:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO c4 = GPIO(4, GPIO::INPUT);
    29d0:	ce 01       	movw	r24, r28
    29d2:	87 51       	subi	r24, 0x17	; 23
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	64 e0       	ldi	r22, 0x04	; 4
    29da:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>

	//Instancias linhas e colunas DTMF

	GPIO c1_d(29 , GPIO::OUTPUT);
    29de:	ce 01       	movw	r24, r28
    29e0:	84 51       	subi	r24, 0x14	; 20
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	6d e1       	ldi	r22, 0x1D	; 29
    29e8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO c2_d(23 , GPIO::OUTPUT);
    29ec:	ce 01       	movw	r24, r28
    29ee:	81 51       	subi	r24, 0x11	; 17
    29f0:	9f 4f       	sbci	r25, 0xFF	; 255
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	67 e1       	ldi	r22, 0x17	; 23
    29f6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO c3_d(25 , GPIO::OUTPUT);
    29fa:	ce 01       	movw	r24, r28
    29fc:	8e 50       	subi	r24, 0x0E	; 14
    29fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2a00:	41 e0       	ldi	r20, 0x01	; 1
    2a02:	69 e1       	ldi	r22, 0x19	; 25
    2a04:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO c4_d(27 , GPIO::OUTPUT);
    2a08:	ce 01       	movw	r24, r28
    2a0a:	8b 50       	subi	r24, 0x0B	; 11
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	6b e1       	ldi	r22, 0x1B	; 27
    2a12:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>

	GPIO l1_d(26 , GPIO::OUTPUT);
    2a16:	ce 01       	movw	r24, r28
    2a18:	88 50       	subi	r24, 0x08	; 8
    2a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	6a e1       	ldi	r22, 0x1A	; 26
    2a20:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO l2_d(24 , GPIO::OUTPUT);
    2a24:	ce 01       	movw	r24, r28
    2a26:	85 50       	subi	r24, 0x05	; 5
    2a28:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	68 e1       	ldi	r22, 0x18	; 24
    2a2e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO l3_d(22 , GPIO::OUTPUT);
    2a32:	ce 01       	movw	r24, r28
    2a34:	82 50       	subi	r24, 0x02	; 2
    2a36:	9f 4f       	sbci	r25, 0xFF	; 255
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	66 e1       	ldi	r22, 0x16	; 22
    2a3c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>
	GPIO l4_d(28 , GPIO::OUTPUT);
    2a40:	ce 01       	movw	r24, r28
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
    2a44:	9e 4f       	sbci	r25, 0xFE	; 254
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	6c e1       	ldi	r22, 0x1C	; 28
    2a4a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>

//----------------------------------------------------

	//led de teste
	GPIO led = GPIO(13, GPIO::OUTPUT);
    2a4e:	ce 01       	movw	r24, r28
    2a50:	8c 5f       	subi	r24, 0xFC	; 252
    2a52:	9e 4f       	sbci	r25, 0xFE	; 254
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	6d e0       	ldi	r22, 0x0D	; 13
    2a58:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN4GPIOC1EhNS_15PortDirection_tE>

	int currentState = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	89 83       	std	Y+1, r24	; 0x01
	int ctl = false;
    2a64:	18 a2       	std	Y+32, r1	; 0x20
    2a66:	1f 8e       	std	Y+31, r1	; 0x1f
	char a = 'n';
    2a68:	8e e6       	ldi	r24, 0x6E	; 110
    2a6a:	89 a3       	std	Y+33, r24	; 0x21
	///// 1 - Idle, 2 - Online, 3 - Conf seq, 4 - Discar seq

	UART uart = UART(0, 9600, UART::NORMAL_SPEED, UART::DATABITS_8,UART::NONE, UART::STOPBIT_2);
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	88 58       	subi	r24, 0x88	; 136
    2a70:	9e 4f       	sbci	r25, 0xFE	; 254
    2a72:	68 94       	set
    2a74:	aa 24       	eor	r10, r10
    2a76:	a3 f8       	bld	r10, 3
    2a78:	c1 2c       	mov	r12, r1
    2a7a:	0f 2e       	mov	r0, r31
    2a7c:	f6 e0       	ldi	r31, 0x06	; 6
    2a7e:	ef 2e       	mov	r14, r31
    2a80:	f0 2d       	mov	r31, r0
    2a82:	00 e0       	ldi	r16, 0x00	; 0
    2a84:	20 e8       	ldi	r18, 0x80	; 128
    2a86:	35 e2       	ldi	r19, 0x25	; 37
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	50 e0       	ldi	r21, 0x00	; 0
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	0e 94 38 24 	call	0x4870	; 0x4870 <_ZN4UARTC1EhmNS_7SPEED_tENS_10DATABITS_tENS_8PARITY_tENS_10STOPBITS_tE>

	DTMF dtmf = DTMF(&c1_d,&c2_d,&c3_d,&c4_d,&l1_d,&l2_d, &l3_d,&l4_d);
    2a92:	6e 01       	movw	r12, r28
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	c8 0e       	add	r12, r24
    2a98:	d8 1e       	adc	r13, r24
    2a9a:	7e 01       	movw	r14, r28
    2a9c:	9e ef       	ldi	r25, 0xFE	; 254
    2a9e:	e9 0e       	add	r14, r25
    2aa0:	f1 1c       	adc	r15, r1
    2aa2:	8e 01       	movw	r16, r28
    2aa4:	05 50       	subi	r16, 0x05	; 5
    2aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa8:	de 01       	movw	r26, r28
    2aaa:	a8 50       	subi	r26, 0x08	; 8
    2aac:	bf 4f       	sbci	r27, 0xFF	; 255
    2aae:	fe 01       	movw	r30, r28
    2ab0:	eb 50       	subi	r30, 0x0B	; 11
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	9e 01       	movw	r18, r28
    2ab6:	2e 50       	subi	r18, 0x0E	; 14
    2ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aba:	ae 01       	movw	r20, r28
    2abc:	41 51       	subi	r20, 0x11	; 17
    2abe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac0:	be 01       	movw	r22, r28
    2ac2:	64 51       	subi	r22, 0x14	; 20
    2ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	89 5f       	subi	r24, 0xF9	; 249
    2aca:	9e 4f       	sbci	r25, 0xFE	; 254
    2acc:	46 01       	movw	r8, r12
    2ace:	57 01       	movw	r10, r14
    2ad0:	68 01       	movw	r12, r16
    2ad2:	7d 01       	movw	r14, r26
    2ad4:	8f 01       	movw	r16, r30
    2ad6:	0e 94 ab 00 	call	0x156	; 0x156 <_ZN4DTMFC1EP4GPIOS1_S1_S1_S1_S1_S1_S1_>

	Keyboard teclado = Keyboard(&l1, &l2, &l3, &l4, &c1, &c2, &c3, &c4);
    2ada:	6e 01       	movw	r12, r28
    2adc:	e9 ee       	ldi	r30, 0xE9	; 233
    2ade:	ce 0e       	add	r12, r30
    2ae0:	d1 1c       	adc	r13, r1
    2ae2:	7e 01       	movw	r14, r28
    2ae4:	f6 ee       	ldi	r31, 0xE6	; 230
    2ae6:	ef 0e       	add	r14, r31
    2ae8:	f1 1c       	adc	r15, r1
    2aea:	8e 01       	movw	r16, r28
    2aec:	0d 51       	subi	r16, 0x1D	; 29
    2aee:	1f 4f       	sbci	r17, 0xFF	; 255
    2af0:	de 01       	movw	r26, r28
    2af2:	a0 52       	subi	r26, 0x20	; 32
    2af4:	bf 4f       	sbci	r27, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	e3 52       	subi	r30, 0x23	; 35
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	9e 01       	movw	r18, r28
    2afe:	26 52       	subi	r18, 0x26	; 38
    2b00:	3f 4f       	sbci	r19, 0xFF	; 255
    2b02:	ae 01       	movw	r20, r28
    2b04:	49 52       	subi	r20, 0x29	; 41
    2b06:	5f 4f       	sbci	r21, 0xFF	; 255
    2b08:	be 01       	movw	r22, r28
    2b0a:	6c 52       	subi	r22, 0x2C	; 44
    2b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0e:	ce 01       	movw	r24, r28
    2b10:	89 5e       	subi	r24, 0xE9	; 233
    2b12:	9e 4f       	sbci	r25, 0xFE	; 254
    2b14:	46 01       	movw	r8, r12
    2b16:	57 01       	movw	r10, r14
    2b18:	68 01       	movw	r12, r16
    2b1a:	7d 01       	movw	r14, r26
    2b1c:	8f 01       	movw	r16, r30
    2b1e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZN8KeyboardC1EP4GPIOS1_S1_S1_S1_S1_S1_S1_>

	LCD display = LCD();
    2b22:	ce 01       	movw	r24, r28
    2b24:	88 5d       	subi	r24, 0xD8	; 216
    2b26:	9e 4f       	sbci	r25, 0xFE	; 254
    2b28:	d9 d9       	rcall	.-3150   	; 0x1edc <_ZN3LCDC1Ev>

	EEPROM eeprom;
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	87 5d       	subi	r24, 0xD7	; 215
    2b2e:	9e 4f       	sbci	r25, 0xFE	; 254
    2b30:	0d de       	rcall	.-998    	; 0x274c <_ZN6EEPROMC1Ev>

	uint8_t * pos = 0;
    2b32:	1b a2       	std	Y+35, r1	; 0x23
    2b34:	1a a2       	std	Y+34, r1	; 0x22
	uint8_t * pos2 = pos + 10;
    2b36:	8a a1       	ldd	r24, Y+34	; 0x22
    2b38:	9b a1       	ldd	r25, Y+35	; 0x23
    2b3a:	0a 96       	adiw	r24, 0x0a	; 10
    2b3c:	9d a3       	std	Y+37, r25	; 0x25
    2b3e:	8c a3       	std	Y+36, r24	; 0x24
	uint8_t * pos3 = pos + 20;
    2b40:	8a a1       	ldd	r24, Y+34	; 0x22
    2b42:	9b a1       	ldd	r25, Y+35	; 0x23
    2b44:	44 96       	adiw	r24, 0x14	; 20
    2b46:	9f a3       	std	Y+39, r25	; 0x27
    2b48:	8e a3       	std	Y+38, r24	; 0x26

	Fila <uint8_t, 10> fila;
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	86 5d       	subi	r24, 0xD6	; 214
    2b4e:	9e 4f       	sbci	r25, 0xFE	; 254
    2b50:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <_ZN4FilaIhLi10EEC1Ev>
	Fila <uint8_t, 10> fila2;
    2b54:	ce 01       	movw	r24, r28
    2b56:	86 5c       	subi	r24, 0xC6	; 198
    2b58:	9e 4f       	sbci	r25, 0xFE	; 254
    2b5a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <_ZN4FilaIhLi10EEC1Ev>
	Fila <uint8_t, 10> fila3;
    2b5e:	ce 01       	movw	r24, r28
    2b60:	86 5b       	subi	r24, 0xB6	; 182
    2b62:	9e 4f       	sbci	r25, 0xFE	; 254
    2b64:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <_ZN4FilaIhLi10EEC1Ev>

	unsigned char sequencia[] = "123456789";
    2b68:	ce 01       	movw	r24, r28
    2b6a:	86 5a       	subi	r24, 0xA6	; 166
    2b6c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b6e:	2a e0       	ldi	r18, 0x0A	; 10
    2b70:	e2 ee       	ldi	r30, 0xE2	; 226
    2b72:	f2 e0       	ldi	r31, 0x02	; 2
    2b74:	dc 01       	movw	r26, r24
    2b76:	01 90       	ld	r0, Z+
    2b78:	0d 92       	st	X+, r0
    2b7a:	2a 95       	dec	r18
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <main+0x236>
	for(unsigned int i = 0; i < sizeof(sequencia); i++){
    2b7e:	1c 82       	std	Y+4, r1	; 0x04
    2b80:	1b 82       	std	Y+3, r1	; 0x03
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <main+0x26c>
		fila.enfileira(sequencia[i]);
    2b84:	9e 01       	movw	r18, r28
    2b86:	26 5a       	subi	r18, 0xA6	; 166
    2b88:	3e 4f       	sbci	r19, 0xFE	; 254
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	82 0f       	add	r24, r18
    2b90:	93 1f       	adc	r25, r19
    2b92:	fc 01       	movw	r30, r24
    2b94:	20 81       	ld	r18, Z
    2b96:	ce 01       	movw	r24, r28
    2b98:	86 5d       	subi	r24, 0xD6	; 214
    2b9a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b9c:	62 2f       	mov	r22, r18
    2b9e:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <_ZN4FilaIhLi10EE9enfileiraEh>
	Fila <uint8_t, 10> fila;
	Fila <uint8_t, 10> fila2;
	Fila <uint8_t, 10> fila3;

	unsigned char sequencia[] = "123456789";
	for(unsigned int i = 0; i < sizeof(sequencia); i++){
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	9c 83       	std	Y+4, r25	; 0x04
    2baa:	8b 83       	std	Y+3, r24	; 0x03
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb0:	0a 97       	sbiw	r24, 0x0a	; 10
    2bb2:	40 f3       	brcs	.-48     	; 0x2b84 <main+0x244>
		fila.enfileira(sequencia[i]);
	}

	unsigned char sequencia2[] = "eeeeeeeee";
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	8c 59       	subi	r24, 0x9C	; 156
    2bb8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bba:	2a e0       	ldi	r18, 0x0A	; 10
    2bbc:	ec ee       	ldi	r30, 0xEC	; 236
    2bbe:	f2 e0       	ldi	r31, 0x02	; 2
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	01 90       	ld	r0, Z+
    2bc4:	0d 92       	st	X+, r0
    2bc6:	2a 95       	dec	r18
    2bc8:	e1 f7       	brne	.-8      	; 0x2bc2 <main+0x282>
	for(unsigned int i = 0; i < sizeof(sequencia2); i++){
    2bca:	1e 82       	std	Y+6, r1	; 0x06
    2bcc:	1d 82       	std	Y+5, r1	; 0x05
    2bce:	14 c0       	rjmp	.+40     	; 0x2bf8 <main+0x2b8>
		fila2.enfileira(sequencia2[i]);
    2bd0:	9e 01       	movw	r18, r28
    2bd2:	2c 59       	subi	r18, 0x9C	; 156
    2bd4:	3e 4f       	sbci	r19, 0xFE	; 254
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	82 0f       	add	r24, r18
    2bdc:	93 1f       	adc	r25, r19
    2bde:	fc 01       	movw	r30, r24
    2be0:	20 81       	ld	r18, Z
    2be2:	ce 01       	movw	r24, r28
    2be4:	86 5c       	subi	r24, 0xC6	; 198
    2be6:	9e 4f       	sbci	r25, 0xFE	; 254
    2be8:	62 2f       	mov	r22, r18
    2bea:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <_ZN4FilaIhLi10EE9enfileiraEh>
	for(unsigned int i = 0; i < sizeof(sequencia); i++){
		fila.enfileira(sequencia[i]);
	}

	unsigned char sequencia2[] = "eeeeeeeee";
	for(unsigned int i = 0; i < sizeof(sequencia2); i++){
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	01 96       	adiw	r24, 0x01	; 1
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	0a 97       	sbiw	r24, 0x0a	; 10
    2bfe:	40 f3       	brcs	.-48     	; 0x2bd0 <main+0x290>
		fila2.enfileira(sequencia2[i]);
	}

	unsigned char sequencia3[] = "eeeeeeeee";
    2c00:	ce 01       	movw	r24, r28
    2c02:	82 59       	subi	r24, 0x92	; 146
    2c04:	9e 4f       	sbci	r25, 0xFE	; 254
    2c06:	2a e0       	ldi	r18, 0x0A	; 10
    2c08:	ec ee       	ldi	r30, 0xEC	; 236
    2c0a:	f2 e0       	ldi	r31, 0x02	; 2
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	01 90       	ld	r0, Z+
    2c10:	0d 92       	st	X+, r0
    2c12:	2a 95       	dec	r18
    2c14:	e1 f7       	brne	.-8      	; 0x2c0e <main+0x2ce>
	for(unsigned int i = 0; i < sizeof(sequencia3); i++){
    2c16:	18 86       	std	Y+8, r1	; 0x08
    2c18:	1f 82       	std	Y+7, r1	; 0x07
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <main+0x304>
		fila3.enfileira(sequencia3[i]);
    2c1c:	9e 01       	movw	r18, r28
    2c1e:	22 59       	subi	r18, 0x92	; 146
    2c20:	3e 4f       	sbci	r19, 0xFE	; 254
    2c22:	8f 81       	ldd	r24, Y+7	; 0x07
    2c24:	98 85       	ldd	r25, Y+8	; 0x08
    2c26:	82 0f       	add	r24, r18
    2c28:	93 1f       	adc	r25, r19
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	20 81       	ld	r18, Z
    2c2e:	ce 01       	movw	r24, r28
    2c30:	86 5b       	subi	r24, 0xB6	; 182
    2c32:	9e 4f       	sbci	r25, 0xFE	; 254
    2c34:	62 2f       	mov	r22, r18
    2c36:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <_ZN4FilaIhLi10EE9enfileiraEh>
	for(unsigned int i = 0; i < sizeof(sequencia2); i++){
		fila2.enfileira(sequencia2[i]);
	}

	unsigned char sequencia3[] = "eeeeeeeee";
	for(unsigned int i = 0; i < sizeof(sequencia3); i++){
    2c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c3c:	98 85       	ldd	r25, Y+8	; 0x08
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	98 87       	std	Y+8, r25	; 0x08
    2c42:	8f 83       	std	Y+7, r24	; 0x07
    2c44:	8f 81       	ldd	r24, Y+7	; 0x07
    2c46:	98 85       	ldd	r25, Y+8	; 0x08
    2c48:	0a 97       	sbiw	r24, 0x0a	; 10
    2c4a:	40 f3       	brcs	.-48     	; 0x2c1c <main+0x2dc>
		fila3.enfileira(sequencia3[i]);
	}

	eeprom.write_string(pos, fila);
    2c4c:	6a a1       	ldd	r22, Y+34	; 0x22
    2c4e:	7b a1       	ldd	r23, Y+35	; 0x23
    2c50:	ae 01       	movw	r20, r28
    2c52:	47 5d       	subi	r20, 0xD7	; 215
    2c54:	5e 4f       	sbci	r21, 0xFE	; 254
    2c56:	9e 01       	movw	r18, r28
    2c58:	26 5d       	subi	r18, 0xD6	; 214
    2c5a:	3e 4f       	sbci	r19, 0xFE	; 254
    2c5c:	8d b7       	in	r24, 0x3d	; 61
    2c5e:	9e b7       	in	r25, 0x3e	; 62
    2c60:	40 97       	sbiw	r24, 0x10	; 16
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	9e bf       	out	0x3e, r25	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	8d bf       	out	0x3d, r24	; 61
    2c6c:	8d b7       	in	r24, 0x3d	; 61
    2c6e:	9e b7       	in	r25, 0x3e	; 62
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	10 e1       	ldi	r17, 0x10	; 16
    2c74:	f9 01       	movw	r30, r18
    2c76:	dc 01       	movw	r26, r24
    2c78:	01 90       	ld	r0, Z+
    2c7a:	0d 92       	st	X+, r0
    2c7c:	1a 95       	dec	r17
    2c7e:	e1 f7       	brne	.-8      	; 0x2c78 <main+0x338>
    2c80:	ca 01       	movw	r24, r20
    2c82:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN6EEPROM12write_stringEPh4FilaIhLi10EE>
    2c86:	ed b7       	in	r30, 0x3d	; 61
    2c88:	fe b7       	in	r31, 0x3e	; 62
    2c8a:	70 96       	adiw	r30, 0x10	; 16
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
	//eeprom.write_string(pos2, fila2);
	//eeprom.write_string(pos3, fila3);


	sei();
    2c96:	78 94       	sei

	display.LCD_Init();
    2c98:	ce 01       	movw	r24, r28
    2c9a:	88 5d       	subi	r24, 0xD8	; 216
    2c9c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c9e:	6b dc       	rcall	.-1834   	; 0x2576 <_ZN3LCD8LCD_InitEv>

	int print = 0;
    2ca0:	1a 86       	std	Y+10, r1	; 0x0a
    2ca2:	19 86       	std	Y+9, r1	; 0x09
	int controle = 0;
    2ca4:	1c 86       	std	Y+12, r1	; 0x0c
    2ca6:	1b 86       	std	Y+11, r1	; 0x0b
	while(1) {
		if (currentState == 1) { //idle
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <main+0x372>
    2cb0:	dd c0       	rjmp	.+442    	; 0x2e6c <main+0x52c>
			if (print == 0) {
    2cb2:	89 85       	ldd	r24, Y+9	; 0x09
    2cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb6:	89 2b       	or	r24, r25
    2cb8:	d1 f4       	brne	.+52     	; 0x2cee <main+0x3ae>
				display.LCD_Clear();
    2cba:	ce 01       	movw	r24, r28
    2cbc:	88 5d       	subi	r24, 0xD8	; 216
    2cbe:	9e 4f       	sbci	r25, 0xFE	; 254
    2cc0:	30 dd       	rcall	.-1440   	; 0x2722 <_ZN3LCD9LCD_ClearEv>
				display.LCD_String("Sel. Modo. A: On");	/* write string on 1st line of LCD*/
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	88 5d       	subi	r24, 0xD8	; 216
    2cc6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cc8:	6b e3       	ldi	r22, 0x3B	; 59
    2cca:	72 e0       	ldi	r23, 0x02	; 2
    2ccc:	f9 dc       	rcall	.-1550   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
				display.LCD_Command(0xC0);		/* Go to 2nd line*/
    2cce:	ce 01       	movw	r24, r28
    2cd0:	88 5d       	subi	r24, 0xD8	; 216
    2cd2:	9e 4f       	sbci	r25, 0xFE	; 254
    2cd4:	60 ec       	ldi	r22, 0xC0	; 192
    2cd6:	0f d9       	rcall	.-3554   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
				display.LCD_String("B:CSeq.   C:DSeq");	/* Write string on 2nd line*/
    2cd8:	ce 01       	movw	r24, r28
    2cda:	88 5d       	subi	r24, 0xD8	; 216
    2cdc:	9e 4f       	sbci	r25, 0xFE	; 254
    2cde:	6c e4       	ldi	r22, 0x4C	; 76
    2ce0:	72 e0       	ldi	r23, 0x02	; 2
    2ce2:	ee dc       	rcall	.-1572   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
				print++;
    2ce4:	89 85       	ldd	r24, Y+9	; 0x09
    2ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce8:	01 96       	adiw	r24, 0x01	; 1
    2cea:	9a 87       	std	Y+10, r25	; 0x0a
    2cec:	89 87       	std	Y+9, r24	; 0x09
			}

			while(teclado.Percorre()){
    2cee:	77 c0       	rjmp	.+238    	; 0x2dde <main+0x49e>
				led.toggle();
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	8c 5f       	subi	r24, 0xFC	; 252
    2cf4:	9e 4f       	sbci	r25, 0xFE	; 254
    2cf6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a0 ea       	ldi	r26, 0xA0	; 160
    2d00:	b1 e4       	ldi	r27, 0x41	; 65
    2d02:	8a a7       	std	Y+42, r24	; 0x2a
    2d04:	9b a7       	std	Y+43, r25	; 0x2b
    2d06:	ac a7       	std	Y+44, r26	; 0x2c
    2d08:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	4a e7       	ldi	r20, 0x7A	; 122
    2d10:	55 e4       	ldi	r21, 0x45	; 69
    2d12:	6a a5       	ldd	r22, Y+42	; 0x2a
    2d14:	7b a5       	ldd	r23, Y+43	; 0x2b
    2d16:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d18:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d1a:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	8e a7       	std	Y+46, r24	; 0x2e
    2d24:	9f a7       	std	Y+47, r25	; 0x2f
    2d26:	a8 ab       	std	Y+48, r26	; 0x30
    2d28:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e8       	ldi	r20, 0x80	; 128
    2d30:	5f e3       	ldi	r21, 0x3F	; 63
    2d32:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d34:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d36:	88 a9       	ldd	r24, Y+48	; 0x30
    2d38:	99 a9       	ldd	r25, Y+49	; 0x31
    2d3a:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <main+0x40c>
		__ticks = 1;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9b ab       	std	Y+51, r25	; 0x33
    2d48:	8a ab       	std	Y+50, r24	; 0x32
    2d4a:	3f c0       	rjmp	.+126    	; 0x2dca <main+0x48a>
	else if (__tmp > 65535)
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	3f ef       	ldi	r19, 0xFF	; 255
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	57 e4       	ldi	r21, 0x47	; 71
    2d54:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d56:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d58:	88 a9       	ldd	r24, Y+48	; 0x30
    2d5a:	99 a9       	ldd	r25, Y+49	; 0x31
    2d5c:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	4c f5       	brge	.+82     	; 0x2db6 <main+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e2       	ldi	r20, 0x20	; 32
    2d6a:	51 e4       	ldi	r21, 0x41	; 65
    2d6c:	6a a5       	ldd	r22, Y+42	; 0x2a
    2d6e:	7b a5       	ldd	r23, Y+43	; 0x2b
    2d70:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d72:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d74:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9b ab       	std	Y+51, r25	; 0x33
    2d8a:	8a ab       	std	Y+50, r24	; 0x32
    2d8c:	0f c0       	rjmp	.+30     	; 0x2dac <main+0x46c>
    2d8e:	80 e9       	ldi	r24, 0x90	; 144
    2d90:	91 e0       	ldi	r25, 0x01	; 1
    2d92:	9d ab       	std	Y+53, r25	; 0x35
    2d94:	8c ab       	std	Y+52, r24	; 0x34
    2d96:	8c a9       	ldd	r24, Y+52	; 0x34
    2d98:	9d a9       	ldd	r25, Y+53	; 0x35
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <main+0x45a>
    2d9e:	9d ab       	std	Y+53, r25	; 0x35
    2da0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da2:	8a a9       	ldd	r24, Y+50	; 0x32
    2da4:	9b a9       	ldd	r25, Y+51	; 0x33
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	9b ab       	std	Y+51, r25	; 0x33
    2daa:	8a ab       	std	Y+50, r24	; 0x32
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dac:	8a a9       	ldd	r24, Y+50	; 0x32
    2dae:	9b a9       	ldd	r25, Y+51	; 0x33
    2db0:	89 2b       	or	r24, r25
    2db2:	69 f7       	brne	.-38     	; 0x2d8e <main+0x44e>
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <main+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db6:	6e a5       	ldd	r22, Y+46	; 0x2e
    2db8:	7f a5       	ldd	r23, Y+47	; 0x2f
    2dba:	88 a9       	ldd	r24, Y+48	; 0x30
    2dbc:	99 a9       	ldd	r25, Y+49	; 0x31
    2dbe:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9b ab       	std	Y+51, r25	; 0x33
    2dc8:	8a ab       	std	Y+50, r24	; 0x32
    2dca:	8a a9       	ldd	r24, Y+50	; 0x32
    2dcc:	9b a9       	ldd	r25, Y+51	; 0x33
    2dce:	9f ab       	std	Y+55, r25	; 0x37
    2dd0:	8e ab       	std	Y+54, r24	; 0x36
    2dd2:	8e a9       	ldd	r24, Y+54	; 0x36
    2dd4:	9f a9       	ldd	r25, Y+55	; 0x37
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <main+0x496>
    2dda:	9f ab       	std	Y+55, r25	; 0x37
    2ddc:	8e ab       	std	Y+54, r24	; 0x36
				display.LCD_Command(0xC0);		/* Go to 2nd line*/
				display.LCD_String("B:CSeq.   C:DSeq");	/* Write string on 2nd line*/
				print++;
			}

			while(teclado.Percorre()){
    2dde:	ce 01       	movw	r24, r28
    2de0:	89 5e       	subi	r24, 0xE9	; 233
    2de2:	9e 4f       	sbci	r25, 0xFE	; 254
    2de4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN8Keyboard8PercorreEv>
    2de8:	88 23       	and	r24, r24
    2dea:	09 f0       	breq	.+2      	; 0x2dee <main+0x4ae>
    2dec:	81 cf       	rjmp	.-254    	; 0x2cf0 <main+0x3b0>
				led.toggle();
				_delay_ms(20);
			};
			a = teclado.retKey();
    2dee:	ce 01       	movw	r24, r28
    2df0:	89 5e       	subi	r24, 0xE9	; 233
    2df2:	9e 4f       	sbci	r25, 0xFE	; 254
    2df4:	29 d8       	rcall	.-4014   	; 0x1e48 <_ZN8Keyboard6retKeyEv>
    2df6:	89 a3       	std	Y+33, r24	; 0x21

			switch(a) {
    2df8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	82 34       	cpi	r24, 0x42	; 66
    2e00:	91 05       	cpc	r25, r1
    2e02:	b1 f0       	breq	.+44     	; 0x2e30 <main+0x4f0>
    2e04:	83 34       	cpi	r24, 0x43	; 67
    2e06:	91 05       	cpc	r25, r1
    2e08:	09 f1       	breq	.+66     	; 0x2e4c <main+0x50c>
    2e0a:	81 34       	cpi	r24, 0x41	; 65
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	11 f0       	breq	.+4      	; 0x2e14 <main+0x4d4>
    2e10:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <main+0x1e74>
				case 'A':
					currentState = 2;
    2e14:	82 e0       	ldi	r24, 0x02	; 2
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	89 83       	std	Y+1, r24	; 0x01
					uart.puts("Indo On");
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	88 58       	subi	r24, 0x88	; 136
    2e20:	9e 4f       	sbci	r25, 0xFE	; 254
    2e22:	6d e5       	ldi	r22, 0x5D	; 93
    2e24:	72 e0       	ldi	r23, 0x02	; 2
    2e26:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN4UART4putsEPc>
					print = 0;
    2e2a:	1a 86       	std	Y+10, r1	; 0x0a
    2e2c:	19 86       	std	Y+9, r1	; 0x09
					break;
    2e2e:	1c c0       	rjmp	.+56     	; 0x2e68 <main+0x528>
				case 'B':
					currentState = 3;
    2e30:	83 e0       	ldi	r24, 0x03	; 3
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
					uart.puts("Indo Cseq");
    2e38:	ce 01       	movw	r24, r28
    2e3a:	88 58       	subi	r24, 0x88	; 136
    2e3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e3e:	65 e6       	ldi	r22, 0x65	; 101
    2e40:	72 e0       	ldi	r23, 0x02	; 2
    2e42:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN4UART4putsEPc>
					print = 0;
    2e46:	1a 86       	std	Y+10, r1	; 0x0a
    2e48:	19 86       	std	Y+9, r1	; 0x09
					break;
    2e4a:	0e c0       	rjmp	.+28     	; 0x2e68 <main+0x528>
				case 'C':
					currentState = 4;
    2e4c:	84 e0       	ldi	r24, 0x04	; 4
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
					uart.puts("Indo Dseq");
    2e54:	ce 01       	movw	r24, r28
    2e56:	88 58       	subi	r24, 0x88	; 136
    2e58:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5a:	6f e6       	ldi	r22, 0x6F	; 111
    2e5c:	72 e0       	ldi	r23, 0x02	; 2
    2e5e:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN4UART4putsEPc>
					print = 0;
    2e62:	1a 86       	std	Y+10, r1	; 0x0a
    2e64:	19 86       	std	Y+9, r1	; 0x09
					break;
    2e66:	00 00       	nop
    2e68:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <main+0x1e74>
			}




		} else if (currentState == 2){ //discar online
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	02 97       	sbiw	r24, 0x02	; 2
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <main+0x536>
    2e74:	60 c1       	rjmp	.+704    	; 0x3136 <main+0x7f6>
			if(print == 0){
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	89 2b       	or	r24, r25
    2e7c:	a1 f4       	brne	.+40     	; 0x2ea6 <main+0x566>
				display.LCD_Clear();
    2e7e:	ce 01       	movw	r24, r28
    2e80:	88 5d       	subi	r24, 0xD8	; 216
    2e82:	9e 4f       	sbci	r25, 0xFE	; 254
    2e84:	4e dc       	rcall	.-1892   	; 0x2722 <_ZN3LCD9LCD_ClearEv>
				display.LCD_String("Online. D:Voltar");
    2e86:	ce 01       	movw	r24, r28
    2e88:	88 5d       	subi	r24, 0xD8	; 216
    2e8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e8c:	69 e7       	ldi	r22, 0x79	; 121
    2e8e:	72 e0       	ldi	r23, 0x02	; 2
    2e90:	17 dc       	rcall	.-2002   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
				display.LCD_Command(0xC0);
    2e92:	ce 01       	movw	r24, r28
    2e94:	88 5d       	subi	r24, 0xD8	; 216
    2e96:	9e 4f       	sbci	r25, 0xFE	; 254
    2e98:	60 ec       	ldi	r22, 0xC0	; 192
    2e9a:	2d d8       	rcall	.-4006   	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
				print ++;
    2e9c:	89 85       	ldd	r24, Y+9	; 0x09
    2e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	9a 87       	std	Y+10, r25	; 0x0a
    2ea4:	89 87       	std	Y+9, r24	; 0x09
			}

			a = 'n';
    2ea6:	8e e6       	ldi	r24, 0x6E	; 110
    2ea8:	89 a3       	std	Y+33, r24	; 0x21
			while(teclado.Percorre()){
    2eaa:	ad c0       	rjmp	.+346    	; 0x3006 <main+0x6c6>
				led.toggle();
    2eac:	ce 01       	movw	r24, r28
    2eae:	8c 5f       	subi	r24, 0xFC	; 252
    2eb0:	9e 4f       	sbci	r25, 0xFE	; 254
    2eb2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 ea       	ldi	r26, 0xA0	; 160
    2ebc:	b1 e4       	ldi	r27, 0x41	; 65
    2ebe:	88 af       	std	Y+56, r24	; 0x38
    2ec0:	99 af       	std	Y+57, r25	; 0x39
    2ec2:	aa af       	std	Y+58, r26	; 0x3a
    2ec4:	bb af       	std	Y+59, r27	; 0x3b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	4a e7       	ldi	r20, 0x7A	; 122
    2ecc:	55 e4       	ldi	r21, 0x45	; 69
    2ece:	68 ad       	ldd	r22, Y+56	; 0x38
    2ed0:	79 ad       	ldd	r23, Y+57	; 0x39
    2ed2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2ed4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2ed6:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	8c af       	std	Y+60, r24	; 0x3c
    2ee0:	9d af       	std	Y+61, r25	; 0x3d
    2ee2:	ae af       	std	Y+62, r26	; 0x3e
    2ee4:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e8       	ldi	r20, 0x80	; 128
    2eec:	5f e3       	ldi	r21, 0x3F	; 63
    2eee:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ef0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ef2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ef6:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	4c f4       	brge	.+18     	; 0x2f10 <main+0x5d0>
		__ticks = 1;
    2efe:	ce 01       	movw	r24, r28
    2f00:	80 5c       	subi	r24, 0xC0	; 192
    2f02:	9f 4f       	sbci	r25, 0xFF	; 255
    2f04:	21 e0       	ldi	r18, 0x01	; 1
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	fc 01       	movw	r30, r24
    2f0a:	31 83       	std	Z+1, r19	; 0x01
    2f0c:	20 83       	st	Z, r18
    2f0e:	61 c0       	rjmp	.+194    	; 0x2fd2 <main+0x692>
	else if (__tmp > 65535)
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f1a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f20:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	0c f0       	brlt	.+2      	; 0x2f2a <main+0x5ea>
    2f28:	46 c0       	rjmp	.+140    	; 0x2fb6 <main+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	68 ad       	ldd	r22, Y+56	; 0x38
    2f34:	79 ad       	ldd	r23, Y+57	; 0x39
    2f36:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f38:	9b ad       	ldd	r25, Y+59	; 0x3b
    2f3a:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	8e 01       	movw	r16, r28
    2f44:	00 5c       	subi	r16, 0xC0	; 192
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	f8 01       	movw	r30, r16
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	80 83       	st	Z, r24
    2f5a:	24 c0       	rjmp	.+72     	; 0x2fa4 <main+0x664>
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	8e 5b       	subi	r24, 0xBE	; 190
    2f60:	9f 4f       	sbci	r25, 0xFF	; 255
    2f62:	20 e9       	ldi	r18, 0x90	; 144
    2f64:	31 e0       	ldi	r19, 0x01	; 1
    2f66:	fc 01       	movw	r30, r24
    2f68:	31 83       	std	Z+1, r19	; 0x01
    2f6a:	20 83       	st	Z, r18
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	8e 5b       	subi	r24, 0xBE	; 190
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	fc 01       	movw	r30, r24
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <main+0x638>
    2f7c:	9e 01       	movw	r18, r28
    2f7e:	2e 5b       	subi	r18, 0xBE	; 190
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	f9 01       	movw	r30, r18
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f88:	ce 01       	movw	r24, r28
    2f8a:	80 5c       	subi	r24, 0xC0	; 192
    2f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8e:	9e 01       	movw	r18, r28
    2f90:	20 5c       	subi	r18, 0xC0	; 192
    2f92:	3f 4f       	sbci	r19, 0xFF	; 255
    2f94:	f9 01       	movw	r30, r18
    2f96:	20 81       	ld	r18, Z
    2f98:	31 81       	ldd	r19, Z+1	; 0x01
    2f9a:	21 50       	subi	r18, 0x01	; 1
    2f9c:	31 09       	sbc	r19, r1
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	31 83       	std	Z+1, r19	; 0x01
    2fa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	80 5c       	subi	r24, 0xC0	; 192
    2fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2faa:	fc 01       	movw	r30, r24
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	89 2b       	or	r24, r25
    2fb2:	a1 f6       	brne	.-88     	; 0x2f5c <main+0x61c>
    2fb4:	28 c0       	rjmp	.+80     	; 0x3006 <main+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	8e 01       	movw	r16, r28
    2fb8:	00 5c       	subi	r16, 0xC0	; 192
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	6c ad       	ldd	r22, Y+60	; 0x3c
    2fbe:	7d ad       	ldd	r23, Y+61	; 0x3d
    2fc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fc4:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	f8 01       	movw	r30, r16
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	8c 5b       	subi	r24, 0xBC	; 188
    2fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd8:	9e 01       	movw	r18, r28
    2fda:	20 5c       	subi	r18, 0xC0	; 192
    2fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fde:	f9 01       	movw	r30, r18
    2fe0:	20 81       	ld	r18, Z
    2fe2:	31 81       	ldd	r19, Z+1	; 0x01
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	31 83       	std	Z+1, r19	; 0x01
    2fe8:	20 83       	st	Z, r18
    2fea:	ce 01       	movw	r24, r28
    2fec:	8c 5b       	subi	r24, 0xBC	; 188
    2fee:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	80 81       	ld	r24, Z
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <main+0x6b6>
    2ffa:	9e 01       	movw	r18, r28
    2ffc:	2c 5b       	subi	r18, 0xBC	; 188
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	f9 01       	movw	r30, r18
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	80 83       	st	Z, r24
				display.LCD_Command(0xC0);
				print ++;
			}

			a = 'n';
			while(teclado.Percorre()){
    3006:	ce 01       	movw	r24, r28
    3008:	89 5e       	subi	r24, 0xE9	; 233
    300a:	9e 4f       	sbci	r25, 0xFE	; 254
    300c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN8Keyboard8PercorreEv>
    3010:	88 23       	and	r24, r24
    3012:	09 f0       	breq	.+2      	; 0x3016 <main+0x6d6>
    3014:	4b cf       	rjmp	.-362    	; 0x2eac <main+0x56c>
				led.toggle();
				_delay_ms(20);
			};

			a = teclado.retKey();
    3016:	ce 01       	movw	r24, r28
    3018:	89 5e       	subi	r24, 0xE9	; 233
    301a:	9e 4f       	sbci	r25, 0xFE	; 254
    301c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN8Keyboard6retKeyEv>
    3020:	89 a3       	std	Y+33, r24	; 0x21

			if(a == '*' or a == '#' or a == '0' or a == '1' or a == '2' or a == '3' or a == '4' or a == '5' or a == '6' or a == '7' or a == '8' or a == '9'){
    3022:	89 a1       	ldd	r24, Y+33	; 0x21
    3024:	8a 32       	cpi	r24, 0x2A	; 42
    3026:	11 f1       	breq	.+68     	; 0x306c <main+0x72c>
    3028:	89 a1       	ldd	r24, Y+33	; 0x21
    302a:	83 32       	cpi	r24, 0x23	; 35
    302c:	f9 f0       	breq	.+62     	; 0x306c <main+0x72c>
    302e:	89 a1       	ldd	r24, Y+33	; 0x21
    3030:	80 33       	cpi	r24, 0x30	; 48
    3032:	e1 f0       	breq	.+56     	; 0x306c <main+0x72c>
    3034:	89 a1       	ldd	r24, Y+33	; 0x21
    3036:	81 33       	cpi	r24, 0x31	; 49
    3038:	c9 f0       	breq	.+50     	; 0x306c <main+0x72c>
    303a:	89 a1       	ldd	r24, Y+33	; 0x21
    303c:	82 33       	cpi	r24, 0x32	; 50
    303e:	b1 f0       	breq	.+44     	; 0x306c <main+0x72c>
    3040:	89 a1       	ldd	r24, Y+33	; 0x21
    3042:	83 33       	cpi	r24, 0x33	; 51
    3044:	99 f0       	breq	.+38     	; 0x306c <main+0x72c>
    3046:	89 a1       	ldd	r24, Y+33	; 0x21
    3048:	84 33       	cpi	r24, 0x34	; 52
    304a:	81 f0       	breq	.+32     	; 0x306c <main+0x72c>
    304c:	89 a1       	ldd	r24, Y+33	; 0x21
    304e:	85 33       	cpi	r24, 0x35	; 53
    3050:	69 f0       	breq	.+26     	; 0x306c <main+0x72c>
    3052:	89 a1       	ldd	r24, Y+33	; 0x21
    3054:	86 33       	cpi	r24, 0x36	; 54
    3056:	51 f0       	breq	.+20     	; 0x306c <main+0x72c>
    3058:	89 a1       	ldd	r24, Y+33	; 0x21
    305a:	87 33       	cpi	r24, 0x37	; 55
    305c:	39 f0       	breq	.+14     	; 0x306c <main+0x72c>
    305e:	89 a1       	ldd	r24, Y+33	; 0x21
    3060:	88 33       	cpi	r24, 0x38	; 56
    3062:	21 f0       	breq	.+8      	; 0x306c <main+0x72c>
    3064:	89 a1       	ldd	r24, Y+33	; 0x21
    3066:	89 33       	cpi	r24, 0x39	; 57
    3068:	09 f0       	breq	.+2      	; 0x306c <main+0x72c>
    306a:	4d c0       	rjmp	.+154    	; 0x3106 <main+0x7c6>
				if(controle < 9){
    306c:	8b 85       	ldd	r24, Y+11	; 0x0b
    306e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3070:	09 97       	sbiw	r24, 0x09	; 9
    3072:	f4 f4       	brge	.+60     	; 0x30b0 <main+0x770>
					display.LCD_Char(a);
    3074:	ce 01       	movw	r24, r28
    3076:	88 5d       	subi	r24, 0xD8	; 216
    3078:	9e 4f       	sbci	r25, 0xFE	; 254
    307a:	69 a1       	ldd	r22, Y+33	; 0x21
    307c:	dc d8       	rcall	.-3656   	; 0x2236 <_ZN3LCD8LCD_CharEh>
					dtmf.send(a);
    307e:	ce 01       	movw	r24, r28
    3080:	89 5f       	subi	r24, 0xF9	; 249
    3082:	9e 4f       	sbci	r25, 0xFE	; 254
    3084:	69 a1       	ldd	r22, Y+33	; 0x21
    3086:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN4DTMF4sendEc>
					uart.puts("Discou: ");
    308a:	ce 01       	movw	r24, r28
    308c:	88 58       	subi	r24, 0x88	; 136
    308e:	9e 4f       	sbci	r25, 0xFE	; 254
    3090:	6a e8       	ldi	r22, 0x8A	; 138
    3092:	72 e0       	ldi	r23, 0x02	; 2
    3094:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN4UART4putsEPc>
					uart.put(a);
    3098:	ce 01       	movw	r24, r28
    309a:	88 58       	subi	r24, 0x88	; 136
    309c:	9e 4f       	sbci	r25, 0xFE	; 254
    309e:	69 a1       	ldd	r22, Y+33	; 0x21
    30a0:	0e 94 92 24 	call	0x4924	; 0x4924 <_ZN4UART3putEh>
					controle ++;
    30a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    30a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    30a8:	01 96       	adiw	r24, 0x01	; 1
    30aa:	9c 87       	std	Y+12, r25	; 0x0c
    30ac:	8b 87       	std	Y+11, r24	; 0x0b
			};

			a = teclado.retKey();

			if(a == '*' or a == '#' or a == '0' or a == '1' or a == '2' or a == '3' or a == '4' or a == '5' or a == '6' or a == '7' or a == '8' or a == '9'){
				if(controle < 9){
    30ae:	41 c0       	rjmp	.+130    	; 0x3132 <main+0x7f2>
					uart.puts("Discou: ");
					uart.put(a);
					controle ++;
				} else {
					//print = 0;
					display.LCD_Clear();
    30b0:	ce 01       	movw	r24, r28
    30b2:	88 5d       	subi	r24, 0xD8	; 216
    30b4:	9e 4f       	sbci	r25, 0xFE	; 254
    30b6:	35 db       	rcall	.-2454   	; 0x2722 <_ZN3LCD9LCD_ClearEv>
					display.LCD_String("Online. D:Voltar");
    30b8:	ce 01       	movw	r24, r28
    30ba:	88 5d       	subi	r24, 0xD8	; 216
    30bc:	9e 4f       	sbci	r25, 0xFE	; 254
    30be:	69 e7       	ldi	r22, 0x79	; 121
    30c0:	72 e0       	ldi	r23, 0x02	; 2
    30c2:	fe da       	rcall	.-2564   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
					display.LCD_Command(0xC0);
    30c4:	ce 01       	movw	r24, r28
    30c6:	88 5d       	subi	r24, 0xD8	; 216
    30c8:	9e 4f       	sbci	r25, 0xFE	; 254
    30ca:	60 ec       	ldi	r22, 0xC0	; 192
    30cc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
					display.LCD_Char(a);
    30d0:	ce 01       	movw	r24, r28
    30d2:	88 5d       	subi	r24, 0xD8	; 216
    30d4:	9e 4f       	sbci	r25, 0xFE	; 254
    30d6:	69 a1       	ldd	r22, Y+33	; 0x21
    30d8:	ae d8       	rcall	.-3748   	; 0x2236 <_ZN3LCD8LCD_CharEh>
					dtmf.send(a);
    30da:	ce 01       	movw	r24, r28
    30dc:	89 5f       	subi	r24, 0xF9	; 249
    30de:	9e 4f       	sbci	r25, 0xFE	; 254
    30e0:	69 a1       	ldd	r22, Y+33	; 0x21
    30e2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN4DTMF4sendEc>
					uart.puts("Discou: ");
    30e6:	ce 01       	movw	r24, r28
    30e8:	88 58       	subi	r24, 0x88	; 136
    30ea:	9e 4f       	sbci	r25, 0xFE	; 254
    30ec:	6a e8       	ldi	r22, 0x8A	; 138
    30ee:	72 e0       	ldi	r23, 0x02	; 2
    30f0:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN4UART4putsEPc>
					uart.put(a);
    30f4:	ce 01       	movw	r24, r28
    30f6:	88 58       	subi	r24, 0x88	; 136
    30f8:	9e 4f       	sbci	r25, 0xFE	; 254
    30fa:	69 a1       	ldd	r22, Y+33	; 0x21
    30fc:	0e 94 92 24 	call	0x4924	; 0x4924 <_ZN4UART3putEh>
					controle = 0;
    3100:	1c 86       	std	Y+12, r1	; 0x0c
    3102:	1b 86       	std	Y+11, r1	; 0x0b
			};

			a = teclado.retKey();

			if(a == '*' or a == '#' or a == '0' or a == '1' or a == '2' or a == '3' or a == '4' or a == '5' or a == '6' or a == '7' or a == '8' or a == '9'){
				if(controle < 9){
    3104:	16 c0       	rjmp	.+44     	; 0x3132 <main+0x7f2>
					uart.put(a);
					controle = 0;

				}

			} else if (a == 'D') {
    3106:	89 a1       	ldd	r24, Y+33	; 0x21
    3108:	84 34       	cpi	r24, 0x44	; 68
    310a:	11 f0       	breq	.+4      	; 0x3110 <main+0x7d0>
    310c:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <main+0x1e74>
				currentState = 1;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
				uart.puts("Volt. Idle");
    3118:	ce 01       	movw	r24, r28
    311a:	88 58       	subi	r24, 0x88	; 136
    311c:	9e 4f       	sbci	r25, 0xFE	; 254
    311e:	63 e9       	ldi	r22, 0x93	; 147
    3120:	72 e0       	ldi	r23, 0x02	; 2
    3122:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN4UART4putsEPc>
				print = 0;
    3126:	1a 86       	std	Y+10, r1	; 0x0a
    3128:	19 86       	std	Y+9, r1	; 0x09
				controle = 0;
    312a:	1c 86       	std	Y+12, r1	; 0x0c
    312c:	1b 86       	std	Y+11, r1	; 0x0b
    312e:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <main+0x1e74>
    3132:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <main+0x1e74>
			}

		} else if (currentState == 3){ //configurar sequencias
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	9a 81       	ldd	r25, Y+2	; 0x02
    313a:	03 97       	sbiw	r24, 0x03	; 3
    313c:	09 f0       	breq	.+2      	; 0x3140 <main+0x800>
    313e:	a7 c3       	rjmp	.+1870   	; 0x388e <main+0xf4e>
			uint8_t * _pos = 0;
    3140:	19 a6       	std	Y+41, r1	; 0x29
    3142:	18 a6       	std	Y+40, r1	; 0x28
			uint8_t * _pos2 = _pos+10;
    3144:	88 a5       	ldd	r24, Y+40	; 0x28
    3146:	99 a5       	ldd	r25, Y+41	; 0x29
    3148:	0a 96       	adiw	r24, 0x0a	; 10
    314a:	9e 87       	std	Y+14, r25	; 0x0e
    314c:	8d 87       	std	Y+13, r24	; 0x0d
			uint8_t * _pos3 = _pos+20;
    314e:	88 a5       	ldd	r24, Y+40	; 0x28
    3150:	99 a5       	ldd	r25, Y+41	; 0x29
    3152:	44 96       	adiw	r24, 0x14	; 20
    3154:	98 8b       	std	Y+16, r25	; 0x10
    3156:	8f 87       	std	Y+15, r24	; 0x0f
			if(print == 0){
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	89 2b       	or	r24, r25
    315e:	09 f0       	breq	.+2      	; 0x3162 <main+0x822>
    3160:	2e c2       	rjmp	.+1116   	; 0x35be <main+0xc7e>
				display.LCD_Clear();
    3162:	ce 01       	movw	r24, r28
    3164:	88 5d       	subi	r24, 0xD8	; 216
    3166:	9e 4f       	sbci	r25, 0xFE	; 254
    3168:	dc da       	rcall	.-2632   	; 0x2722 <_ZN3LCD9LCD_ClearEv>
				display.LCD_String("Seq:");
    316a:	ce 01       	movw	r24, r28
    316c:	88 5d       	subi	r24, 0xD8	; 216
    316e:	9e 4f       	sbci	r25, 0xFE	; 254
    3170:	6e e9       	ldi	r22, 0x9E	; 158
    3172:	72 e0       	ldi	r23, 0x02	; 2
    3174:	a5 da       	rcall	.-2742   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>

				if(eeprom.read(_pos2) != 'e'){
    3176:	2d 85       	ldd	r18, Y+13	; 0x0d
    3178:	3e 85       	ldd	r19, Y+14	; 0x0e
    317a:	ce 01       	movw	r24, r28
    317c:	87 5d       	subi	r24, 0xD7	; 215
    317e:	9e 4f       	sbci	r25, 0xFE	; 254
    3180:	b9 01       	movw	r22, r18
    3182:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    3186:	98 2f       	mov	r25, r24
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	95 36       	cpi	r25, 0x65	; 101
    318c:	09 f4       	brne	.+2      	; 0x3190 <main+0x850>
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	88 23       	and	r24, r24
    3192:	09 f4       	brne	.+2      	; 0x3196 <main+0x856>
    3194:	ef c0       	rjmp	.+478    	; 0x3374 <main+0xa34>
					display.LCD_String("A:");
    3196:	ce 01       	movw	r24, r28
    3198:	88 5d       	subi	r24, 0xD8	; 216
    319a:	9e 4f       	sbci	r25, 0xFE	; 254
    319c:	63 ea       	ldi	r22, 0xA3	; 163
    319e:	72 e0       	ldi	r23, 0x02	; 2
    31a0:	8f da       	rcall	.-2786   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
					for (uint8_t  i = 0; i < 9; i++){
    31a2:	19 8a       	std	Y+17, r1	; 0x11
    31a4:	e0 c0       	rjmp	.+448    	; 0x3366 <main+0xa26>
						a = eeprom.read(_pos2);
    31a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    31a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    31aa:	ce 01       	movw	r24, r28
    31ac:	87 5d       	subi	r24, 0xD7	; 215
    31ae:	9e 4f       	sbci	r25, 0xFE	; 254
    31b0:	b9 01       	movw	r22, r18
    31b2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    31b6:	89 a3       	std	Y+33, r24	; 0x21
						uart.put(a);
    31b8:	ce 01       	movw	r24, r28
    31ba:	88 58       	subi	r24, 0x88	; 136
    31bc:	9e 4f       	sbci	r25, 0xFE	; 254
    31be:	69 a1       	ldd	r22, Y+33	; 0x21
    31c0:	0e 94 92 24 	call	0x4924	; 0x4924 <_ZN4UART3putEh>
						display.LCD_Char(a);
    31c4:	ce 01       	movw	r24, r28
    31c6:	88 5d       	subi	r24, 0xD8	; 216
    31c8:	9e 4f       	sbci	r25, 0xFE	; 254
    31ca:	69 a1       	ldd	r22, Y+33	; 0x21
    31cc:	34 d8       	rcall	.-3992   	; 0x2236 <_ZN3LCD8LCD_CharEh>
						_pos2++;
    31ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	9e 87       	std	Y+14, r25	; 0x0e
    31d6:	8d 87       	std	Y+13, r24	; 0x0d
    31d8:	9e 01       	movw	r18, r28
    31da:	2a 5b       	subi	r18, 0xBA	; 186
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	aa ef       	ldi	r26, 0xFA	; 250
    31e4:	b3 e4       	ldi	r27, 0x43	; 67
    31e6:	f9 01       	movw	r30, r18
    31e8:	80 83       	st	Z, r24
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	a2 83       	std	Z+2, r26	; 0x02
    31ee:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    31f0:	8e 01       	movw	r16, r28
    31f2:	06 5b       	subi	r16, 0xB6	; 182
    31f4:	1f 4f       	sbci	r17, 0xFF	; 255
    31f6:	ce 01       	movw	r24, r28
    31f8:	8a 5b       	subi	r24, 0xBA	; 186
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a e7       	ldi	r20, 0x7A	; 122
    3202:	55 e4       	ldi	r21, 0x45	; 69
    3204:	fc 01       	movw	r30, r24
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	f8 01       	movw	r30, r16
    3218:	80 83       	st	Z, r24
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	a2 83       	std	Z+2, r26	; 0x02
    321e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3220:	ce 01       	movw	r24, r28
    3222:	86 5b       	subi	r24, 0xB6	; 182
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e8       	ldi	r20, 0x80	; 128
    322c:	5f e3       	ldi	r21, 0x3F	; 63
    322e:	fc 01       	movw	r30, r24
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    323c:	88 23       	and	r24, r24
    323e:	4c f4       	brge	.+18     	; 0x3252 <main+0x912>
		__ticks = 1;
    3240:	ce 01       	movw	r24, r28
    3242:	82 5b       	subi	r24, 0xB2	; 178
    3244:	9f 4f       	sbci	r25, 0xFF	; 255
    3246:	21 e0       	ldi	r18, 0x01	; 1
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	fc 01       	movw	r30, r24
    324c:	31 83       	std	Z+1, r19	; 0x01
    324e:	20 83       	st	Z, r18
    3250:	6d c0       	rjmp	.+218    	; 0x332c <main+0x9ec>
	else if (__tmp > 65535)
    3252:	ce 01       	movw	r24, r28
    3254:	86 5b       	subi	r24, 0xB6	; 182
    3256:	9f 4f       	sbci	r25, 0xFF	; 255
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	3f ef       	ldi	r19, 0xFF	; 255
    325c:	4f e7       	ldi	r20, 0x7F	; 127
    325e:	57 e4       	ldi	r21, 0x47	; 71
    3260:	fc 01       	movw	r30, r24
    3262:	60 81       	ld	r22, Z
    3264:	71 81       	ldd	r23, Z+1	; 0x01
    3266:	82 81       	ldd	r24, Z+2	; 0x02
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    326e:	18 16       	cp	r1, r24
    3270:	0c f0       	brlt	.+2      	; 0x3274 <main+0x934>
    3272:	4a c0       	rjmp	.+148    	; 0x3308 <main+0x9c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3274:	ce 01       	movw	r24, r28
    3276:	8a 5b       	subi	r24, 0xBA	; 186
    3278:	9f 4f       	sbci	r25, 0xFF	; 255
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	fc 01       	movw	r30, r24
    3284:	60 81       	ld	r22, Z
    3286:	71 81       	ldd	r23, Z+1	; 0x01
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	8e 01       	movw	r16, r28
    3296:	02 5b       	subi	r16, 0xB2	; 178
    3298:	1f 4f       	sbci	r17, 0xFF	; 255
    329a:	bc 01       	movw	r22, r24
    329c:	cd 01       	movw	r24, r26
    329e:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	f8 01       	movw	r30, r16
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	80 83       	st	Z, r24
    32ac:	24 c0       	rjmp	.+72     	; 0x32f6 <main+0x9b6>
    32ae:	ce 01       	movw	r24, r28
    32b0:	80 5b       	subi	r24, 0xB0	; 176
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	20 e9       	ldi	r18, 0x90	; 144
    32b6:	31 e0       	ldi	r19, 0x01	; 1
    32b8:	fc 01       	movw	r30, r24
    32ba:	31 83       	std	Z+1, r19	; 0x01
    32bc:	20 83       	st	Z, r18
    32be:	ce 01       	movw	r24, r28
    32c0:	80 5b       	subi	r24, 0xB0	; 176
    32c2:	9f 4f       	sbci	r25, 0xFF	; 255
    32c4:	fc 01       	movw	r30, r24
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <main+0x98a>
    32ce:	9e 01       	movw	r18, r28
    32d0:	20 5b       	subi	r18, 0xB0	; 176
    32d2:	3f 4f       	sbci	r19, 0xFF	; 255
    32d4:	f9 01       	movw	r30, r18
    32d6:	91 83       	std	Z+1, r25	; 0x01
    32d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32da:	ce 01       	movw	r24, r28
    32dc:	82 5b       	subi	r24, 0xB2	; 178
    32de:	9f 4f       	sbci	r25, 0xFF	; 255
    32e0:	9e 01       	movw	r18, r28
    32e2:	22 5b       	subi	r18, 0xB2	; 178
    32e4:	3f 4f       	sbci	r19, 0xFF	; 255
    32e6:	f9 01       	movw	r30, r18
    32e8:	20 81       	ld	r18, Z
    32ea:	31 81       	ldd	r19, Z+1	; 0x01
    32ec:	21 50       	subi	r18, 0x01	; 1
    32ee:	31 09       	sbc	r19, r1
    32f0:	fc 01       	movw	r30, r24
    32f2:	31 83       	std	Z+1, r19	; 0x01
    32f4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f6:	ce 01       	movw	r24, r28
    32f8:	82 5b       	subi	r24, 0xB2	; 178
    32fa:	9f 4f       	sbci	r25, 0xFF	; 255
    32fc:	fc 01       	movw	r30, r24
    32fe:	80 81       	ld	r24, Z
    3300:	91 81       	ldd	r25, Z+1	; 0x01
    3302:	89 2b       	or	r24, r25
    3304:	a1 f6       	brne	.-88     	; 0x32ae <main+0x96e>
    3306:	2c c0       	rjmp	.+88     	; 0x3360 <main+0xa20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3308:	8e 01       	movw	r16, r28
    330a:	02 5b       	subi	r16, 0xB2	; 178
    330c:	1f 4f       	sbci	r17, 0xFF	; 255
    330e:	ce 01       	movw	r24, r28
    3310:	86 5b       	subi	r24, 0xB6	; 182
    3312:	9f 4f       	sbci	r25, 0xFF	; 255
    3314:	fc 01       	movw	r30, r24
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	f8 01       	movw	r30, r16
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	80 83       	st	Z, r24
    332c:	ce 01       	movw	r24, r28
    332e:	8e 5a       	subi	r24, 0xAE	; 174
    3330:	9f 4f       	sbci	r25, 0xFF	; 255
    3332:	9e 01       	movw	r18, r28
    3334:	22 5b       	subi	r18, 0xB2	; 178
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	f9 01       	movw	r30, r18
    333a:	20 81       	ld	r18, Z
    333c:	31 81       	ldd	r19, Z+1	; 0x01
    333e:	fc 01       	movw	r30, r24
    3340:	31 83       	std	Z+1, r19	; 0x01
    3342:	20 83       	st	Z, r18
    3344:	ce 01       	movw	r24, r28
    3346:	8e 5a       	subi	r24, 0xAE	; 174
    3348:	9f 4f       	sbci	r25, 0xFF	; 255
    334a:	fc 01       	movw	r30, r24
    334c:	80 81       	ld	r24, Z
    334e:	91 81       	ldd	r25, Z+1	; 0x01
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <main+0xa10>
    3354:	9e 01       	movw	r18, r28
    3356:	2e 5a       	subi	r18, 0xAE	; 174
    3358:	3f 4f       	sbci	r19, 0xFF	; 255
    335a:	f9 01       	movw	r30, r18
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	80 83       	st	Z, r24
				display.LCD_Clear();
				display.LCD_String("Seq:");

				if(eeprom.read(_pos2) != 'e'){
					display.LCD_String("A:");
					for (uint8_t  i = 0; i < 9; i++){
    3360:	89 89       	ldd	r24, Y+17	; 0x11
    3362:	8f 5f       	subi	r24, 0xFF	; 255
    3364:	89 8b       	std	Y+17, r24	; 0x11
    3366:	89 89       	ldd	r24, Y+17	; 0x11
    3368:	89 30       	cpi	r24, 0x09	; 9
    336a:	08 f4       	brcc	.+2      	; 0x336e <main+0xa2e>
    336c:	1c cf       	rjmp	.-456    	; 0x31a6 <main+0x866>
						uart.put(a);
						display.LCD_Char(a);
						_pos2++;
						_delay_ms(500);
					}
					_pos = 0;
    336e:	19 a6       	std	Y+41, r1	; 0x29
    3370:	18 a6       	std	Y+40, r1	; 0x28
    3372:	08 c0       	rjmp	.+16     	; 0x3384 <main+0xa44>
				} else {
					//display.LCD_Command(0xC0);
					display.LCD_String("A:Add ");
    3374:	ce 01       	movw	r24, r28
    3376:	88 5d       	subi	r24, 0xD8	; 216
    3378:	9e 4f       	sbci	r25, 0xFE	; 254
    337a:	66 ea       	ldi	r22, 0xA6	; 166
    337c:	72 e0       	ldi	r23, 0x02	; 2
    337e:	a0 d9       	rcall	.-3264   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
					ctl = false;
    3380:	18 a2       	std	Y+32, r1	; 0x20
    3382:	1f 8e       	std	Y+31, r1	; 0x1f

				}

				if(eeprom.read(_pos3) != 'e'){
    3384:	2f 85       	ldd	r18, Y+15	; 0x0f
    3386:	38 89       	ldd	r19, Y+16	; 0x10
    3388:	ce 01       	movw	r24, r28
    338a:	87 5d       	subi	r24, 0xD7	; 215
    338c:	9e 4f       	sbci	r25, 0xFE	; 254
    338e:	b9 01       	movw	r22, r18
    3390:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    3394:	98 2f       	mov	r25, r24
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	95 36       	cpi	r25, 0x65	; 101
    339a:	09 f4       	brne	.+2      	; 0x339e <main+0xa5e>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	88 23       	and	r24, r24
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <main+0xa64>
    33a2:	f6 c0       	rjmp	.+492    	; 0x3590 <main+0xc50>
					display.LCD_Command(0xC0);
    33a4:	ce 01       	movw	r24, r28
    33a6:	88 5d       	subi	r24, 0xD8	; 216
    33a8:	9e 4f       	sbci	r25, 0xFE	; 254
    33aa:	60 ec       	ldi	r22, 0xC0	; 192
    33ac:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
					display.LCD_String("B:");
    33b0:	ce 01       	movw	r24, r28
    33b2:	88 5d       	subi	r24, 0xD8	; 216
    33b4:	9e 4f       	sbci	r25, 0xFE	; 254
    33b6:	6d ea       	ldi	r22, 0xAD	; 173
    33b8:	72 e0       	ldi	r23, 0x02	; 2
    33ba:	82 d9       	rcall	.-3324   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
					for (uint8_t  i = 0; i < 9; i++){
    33bc:	1a 8a       	std	Y+18, r1	; 0x12
    33be:	e1 c0       	rjmp	.+450    	; 0x3582 <main+0xc42>
						a = eeprom.read(_pos3);
    33c0:	2f 85       	ldd	r18, Y+15	; 0x0f
    33c2:	38 89       	ldd	r19, Y+16	; 0x10
    33c4:	ce 01       	movw	r24, r28
    33c6:	87 5d       	subi	r24, 0xD7	; 215
    33c8:	9e 4f       	sbci	r25, 0xFE	; 254
    33ca:	b9 01       	movw	r22, r18
    33cc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    33d0:	89 a3       	std	Y+33, r24	; 0x21
						uart.put(a);
    33d2:	ce 01       	movw	r24, r28
    33d4:	88 58       	subi	r24, 0x88	; 136
    33d6:	9e 4f       	sbci	r25, 0xFE	; 254
    33d8:	69 a1       	ldd	r22, Y+33	; 0x21
    33da:	0e 94 92 24 	call	0x4924	; 0x4924 <_ZN4UART3putEh>
						display.LCD_Char(a);
    33de:	ce 01       	movw	r24, r28
    33e0:	88 5d       	subi	r24, 0xD8	; 216
    33e2:	9e 4f       	sbci	r25, 0xFE	; 254
    33e4:	69 a1       	ldd	r22, Y+33	; 0x21
    33e6:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN3LCD8LCD_CharEh>
						_pos3++;
    33ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ec:	98 89       	ldd	r25, Y+16	; 0x10
    33ee:	01 96       	adiw	r24, 0x01	; 1
    33f0:	98 8b       	std	Y+16, r25	; 0x10
    33f2:	8f 87       	std	Y+15, r24	; 0x0f
    33f4:	9e 01       	movw	r18, r28
    33f6:	2c 5a       	subi	r18, 0xAC	; 172
    33f8:	3f 4f       	sbci	r19, 0xFF	; 255
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	aa ef       	ldi	r26, 0xFA	; 250
    3400:	b3 e4       	ldi	r27, 0x43	; 67
    3402:	f9 01       	movw	r30, r18
    3404:	80 83       	st	Z, r24
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	a2 83       	std	Z+2, r26	; 0x02
    340a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    340c:	8e 01       	movw	r16, r28
    340e:	08 5a       	subi	r16, 0xA8	; 168
    3410:	1f 4f       	sbci	r17, 0xFF	; 255
    3412:	ce 01       	movw	r24, r28
    3414:	8c 5a       	subi	r24, 0xAC	; 172
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	4a e7       	ldi	r20, 0x7A	; 122
    341e:	55 e4       	ldi	r21, 0x45	; 69
    3420:	fc 01       	movw	r30, r24
    3422:	60 81       	ld	r22, Z
    3424:	71 81       	ldd	r23, Z+1	; 0x01
    3426:	82 81       	ldd	r24, Z+2	; 0x02
    3428:	93 81       	ldd	r25, Z+3	; 0x03
    342a:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	f8 01       	movw	r30, r16
    3434:	80 83       	st	Z, r24
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	a2 83       	std	Z+2, r26	; 0x02
    343a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    343c:	ce 01       	movw	r24, r28
    343e:	88 5a       	subi	r24, 0xA8	; 168
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f e3       	ldi	r21, 0x3F	; 63
    344a:	fc 01       	movw	r30, r24
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    3458:	88 23       	and	r24, r24
    345a:	4c f4       	brge	.+18     	; 0x346e <main+0xb2e>
		__ticks = 1;
    345c:	ce 01       	movw	r24, r28
    345e:	84 5a       	subi	r24, 0xA4	; 164
    3460:	9f 4f       	sbci	r25, 0xFF	; 255
    3462:	21 e0       	ldi	r18, 0x01	; 1
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	fc 01       	movw	r30, r24
    3468:	31 83       	std	Z+1, r19	; 0x01
    346a:	20 83       	st	Z, r18
    346c:	6d c0       	rjmp	.+218    	; 0x3548 <main+0xc08>
	else if (__tmp > 65535)
    346e:	ce 01       	movw	r24, r28
    3470:	88 5a       	subi	r24, 0xA8	; 168
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	3f ef       	ldi	r19, 0xFF	; 255
    3478:	4f e7       	ldi	r20, 0x7F	; 127
    347a:	57 e4       	ldi	r21, 0x47	; 71
    347c:	fc 01       	movw	r30, r24
    347e:	60 81       	ld	r22, Z
    3480:	71 81       	ldd	r23, Z+1	; 0x01
    3482:	82 81       	ldd	r24, Z+2	; 0x02
    3484:	93 81       	ldd	r25, Z+3	; 0x03
    3486:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    348a:	18 16       	cp	r1, r24
    348c:	0c f0       	brlt	.+2      	; 0x3490 <main+0xb50>
    348e:	4a c0       	rjmp	.+148    	; 0x3524 <main+0xbe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3490:	ce 01       	movw	r24, r28
    3492:	8c 5a       	subi	r24, 0xAC	; 172
    3494:	9f 4f       	sbci	r25, 0xFF	; 255
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e2       	ldi	r20, 0x20	; 32
    349c:	51 e4       	ldi	r21, 0x41	; 65
    349e:	fc 01       	movw	r30, r24
    34a0:	60 81       	ld	r22, Z
    34a2:	71 81       	ldd	r23, Z+1	; 0x01
    34a4:	82 81       	ldd	r24, Z+2	; 0x02
    34a6:	93 81       	ldd	r25, Z+3	; 0x03
    34a8:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	8e 01       	movw	r16, r28
    34b2:	04 5a       	subi	r16, 0xA4	; 164
    34b4:	1f 4f       	sbci	r17, 0xFF	; 255
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	f8 01       	movw	r30, r16
    34c4:	91 83       	std	Z+1, r25	; 0x01
    34c6:	80 83       	st	Z, r24
    34c8:	24 c0       	rjmp	.+72     	; 0x3512 <main+0xbd2>
    34ca:	ce 01       	movw	r24, r28
    34cc:	82 5a       	subi	r24, 0xA2	; 162
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	20 e9       	ldi	r18, 0x90	; 144
    34d2:	31 e0       	ldi	r19, 0x01	; 1
    34d4:	fc 01       	movw	r30, r24
    34d6:	31 83       	std	Z+1, r19	; 0x01
    34d8:	20 83       	st	Z, r18
    34da:	ce 01       	movw	r24, r28
    34dc:	82 5a       	subi	r24, 0xA2	; 162
    34de:	9f 4f       	sbci	r25, 0xFF	; 255
    34e0:	fc 01       	movw	r30, r24
    34e2:	80 81       	ld	r24, Z
    34e4:	91 81       	ldd	r25, Z+1	; 0x01
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <main+0xba6>
    34ea:	9e 01       	movw	r18, r28
    34ec:	22 5a       	subi	r18, 0xA2	; 162
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	f9 01       	movw	r30, r18
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f6:	ce 01       	movw	r24, r28
    34f8:	84 5a       	subi	r24, 0xA4	; 164
    34fa:	9f 4f       	sbci	r25, 0xFF	; 255
    34fc:	9e 01       	movw	r18, r28
    34fe:	24 5a       	subi	r18, 0xA4	; 164
    3500:	3f 4f       	sbci	r19, 0xFF	; 255
    3502:	f9 01       	movw	r30, r18
    3504:	20 81       	ld	r18, Z
    3506:	31 81       	ldd	r19, Z+1	; 0x01
    3508:	21 50       	subi	r18, 0x01	; 1
    350a:	31 09       	sbc	r19, r1
    350c:	fc 01       	movw	r30, r24
    350e:	31 83       	std	Z+1, r19	; 0x01
    3510:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3512:	ce 01       	movw	r24, r28
    3514:	84 5a       	subi	r24, 0xA4	; 164
    3516:	9f 4f       	sbci	r25, 0xFF	; 255
    3518:	fc 01       	movw	r30, r24
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	89 2b       	or	r24, r25
    3520:	a1 f6       	brne	.-88     	; 0x34ca <main+0xb8a>
    3522:	2c c0       	rjmp	.+88     	; 0x357c <main+0xc3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3524:	8e 01       	movw	r16, r28
    3526:	04 5a       	subi	r16, 0xA4	; 164
    3528:	1f 4f       	sbci	r17, 0xFF	; 255
    352a:	ce 01       	movw	r24, r28
    352c:	88 5a       	subi	r24, 0xA8	; 168
    352e:	9f 4f       	sbci	r25, 0xFF	; 255
    3530:	fc 01       	movw	r30, r24
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	f8 01       	movw	r30, r16
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	80 83       	st	Z, r24
    3548:	ce 01       	movw	r24, r28
    354a:	80 5a       	subi	r24, 0xA0	; 160
    354c:	9f 4f       	sbci	r25, 0xFF	; 255
    354e:	9e 01       	movw	r18, r28
    3550:	24 5a       	subi	r18, 0xA4	; 164
    3552:	3f 4f       	sbci	r19, 0xFF	; 255
    3554:	f9 01       	movw	r30, r18
    3556:	20 81       	ld	r18, Z
    3558:	31 81       	ldd	r19, Z+1	; 0x01
    355a:	fc 01       	movw	r30, r24
    355c:	31 83       	std	Z+1, r19	; 0x01
    355e:	20 83       	st	Z, r18
    3560:	ce 01       	movw	r24, r28
    3562:	80 5a       	subi	r24, 0xA0	; 160
    3564:	9f 4f       	sbci	r25, 0xFF	; 255
    3566:	fc 01       	movw	r30, r24
    3568:	80 81       	ld	r24, Z
    356a:	91 81       	ldd	r25, Z+1	; 0x01
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <main+0xc2c>
    3570:	9e 01       	movw	r18, r28
    3572:	20 5a       	subi	r18, 0xA0	; 160
    3574:	3f 4f       	sbci	r19, 0xFF	; 255
    3576:	f9 01       	movw	r30, r18
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
				}

				if(eeprom.read(_pos3) != 'e'){
					display.LCD_Command(0xC0);
					display.LCD_String("B:");
					for (uint8_t  i = 0; i < 9; i++){
    357c:	8a 89       	ldd	r24, Y+18	; 0x12
    357e:	8f 5f       	subi	r24, 0xFF	; 255
    3580:	8a 8b       	std	Y+18, r24	; 0x12
    3582:	8a 89       	ldd	r24, Y+18	; 0x12
    3584:	89 30       	cpi	r24, 0x09	; 9
    3586:	08 f4       	brcc	.+2      	; 0x358a <main+0xc4a>
    3588:	1b cf       	rjmp	.-458    	; 0x33c0 <main+0xa80>
						uart.put(a);
						display.LCD_Char(a);
						_pos3++;
						_delay_ms(500);
					}
					_pos = 0;
    358a:	19 a6       	std	Y+41, r1	; 0x29
    358c:	18 a6       	std	Y+40, r1	; 0x28
    358e:	0c c0       	rjmp	.+24     	; 0x35a8 <main+0xc68>
				} else {
					display.LCD_Command(0xC0);
    3590:	ce 01       	movw	r24, r28
    3592:	88 5d       	subi	r24, 0xD8	; 216
    3594:	9e 4f       	sbci	r25, 0xFE	; 254
    3596:	60 ec       	ldi	r22, 0xC0	; 192
    3598:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
					display.LCD_String("B:Add");
    359c:	ce 01       	movw	r24, r28
    359e:	88 5d       	subi	r24, 0xD8	; 216
    35a0:	9e 4f       	sbci	r25, 0xFE	; 254
    35a2:	60 eb       	ldi	r22, 0xB0	; 176
    35a4:	72 e0       	ldi	r23, 0x02	; 2
    35a6:	8c d8       	rcall	.-3816   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
				}

				display.LCD_String("D:Vol");
    35a8:	ce 01       	movw	r24, r28
    35aa:	88 5d       	subi	r24, 0xD8	; 216
    35ac:	9e 4f       	sbci	r25, 0xFE	; 254
    35ae:	66 eb       	ldi	r22, 0xB6	; 182
    35b0:	72 e0       	ldi	r23, 0x02	; 2
    35b2:	86 d8       	rcall	.-3828   	; 0x26c0 <_ZN3LCD10LCD_StringEPc>

				//display.LCD_Command(0xC0);
				print ++;
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	01 96       	adiw	r24, 0x01	; 1
    35ba:	9a 87       	std	Y+10, r25	; 0x0a
    35bc:	89 87       	std	Y+9, r24	; 0x09
			}

			a = 'n';
    35be:	8e e6       	ldi	r24, 0x6E	; 110
    35c0:	89 a3       	std	Y+33, r24	; 0x21
			while(teclado.Percorre()){
    35c2:	c9 c0       	rjmp	.+402    	; 0x3756 <main+0xe16>
				led.toggle();
    35c4:	ce 01       	movw	r24, r28
    35c6:	8c 5f       	subi	r24, 0xFC	; 252
    35c8:	9e 4f       	sbci	r25, 0xFE	; 254
    35ca:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
    35ce:	9e 01       	movw	r18, r28
    35d0:	2e 59       	subi	r18, 0x9E	; 158
    35d2:	3f 4f       	sbci	r19, 0xFF	; 255
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	a0 ea       	ldi	r26, 0xA0	; 160
    35da:	b1 e4       	ldi	r27, 0x41	; 65
    35dc:	f9 01       	movw	r30, r18
    35de:	80 83       	st	Z, r24
    35e0:	91 83       	std	Z+1, r25	; 0x01
    35e2:	a2 83       	std	Z+2, r26	; 0x02
    35e4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    35e6:	8e 01       	movw	r16, r28
    35e8:	0a 59       	subi	r16, 0x9A	; 154
    35ea:	1f 4f       	sbci	r17, 0xFF	; 255
    35ec:	ce 01       	movw	r24, r28
    35ee:	8e 59       	subi	r24, 0x9E	; 158
    35f0:	9f 4f       	sbci	r25, 0xFF	; 255
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	4a e7       	ldi	r20, 0x7A	; 122
    35f8:	55 e4       	ldi	r21, 0x45	; 69
    35fa:	fc 01       	movw	r30, r24
    35fc:	60 81       	ld	r22, Z
    35fe:	71 81       	ldd	r23, Z+1	; 0x01
    3600:	82 81       	ldd	r24, Z+2	; 0x02
    3602:	93 81       	ldd	r25, Z+3	; 0x03
    3604:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	f8 01       	movw	r30, r16
    360e:	80 83       	st	Z, r24
    3610:	91 83       	std	Z+1, r25	; 0x01
    3612:	a2 83       	std	Z+2, r26	; 0x02
    3614:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3616:	ce 01       	movw	r24, r28
    3618:	8a 59       	subi	r24, 0x9A	; 154
    361a:	9f 4f       	sbci	r25, 0xFF	; 255
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e8       	ldi	r20, 0x80	; 128
    3622:	5f e3       	ldi	r21, 0x3F	; 63
    3624:	fc 01       	movw	r30, r24
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	93 81       	ldd	r25, Z+3	; 0x03
    362e:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    3632:	88 23       	and	r24, r24
    3634:	4c f4       	brge	.+18     	; 0x3648 <main+0xd08>
		__ticks = 1;
    3636:	ce 01       	movw	r24, r28
    3638:	86 59       	subi	r24, 0x96	; 150
    363a:	9f 4f       	sbci	r25, 0xFF	; 255
    363c:	21 e0       	ldi	r18, 0x01	; 1
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	fc 01       	movw	r30, r24
    3642:	31 83       	std	Z+1, r19	; 0x01
    3644:	20 83       	st	Z, r18
    3646:	6d c0       	rjmp	.+218    	; 0x3722 <main+0xde2>
	else if (__tmp > 65535)
    3648:	ce 01       	movw	r24, r28
    364a:	8a 59       	subi	r24, 0x9A	; 154
    364c:	9f 4f       	sbci	r25, 0xFF	; 255
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	3f ef       	ldi	r19, 0xFF	; 255
    3652:	4f e7       	ldi	r20, 0x7F	; 127
    3654:	57 e4       	ldi	r21, 0x47	; 71
    3656:	fc 01       	movw	r30, r24
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    3664:	18 16       	cp	r1, r24
    3666:	0c f0       	brlt	.+2      	; 0x366a <main+0xd2a>
    3668:	4a c0       	rjmp	.+148    	; 0x36fe <main+0xdbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366a:	ce 01       	movw	r24, r28
    366c:	8e 59       	subi	r24, 0x9E	; 158
    366e:	9f 4f       	sbci	r25, 0xFF	; 255
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	fc 01       	movw	r30, r24
    367a:	60 81       	ld	r22, Z
    367c:	71 81       	ldd	r23, Z+1	; 0x01
    367e:	82 81       	ldd	r24, Z+2	; 0x02
    3680:	93 81       	ldd	r25, Z+3	; 0x03
    3682:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	8e 01       	movw	r16, r28
    368c:	06 59       	subi	r16, 0x96	; 150
    368e:	1f 4f       	sbci	r17, 0xFF	; 255
    3690:	bc 01       	movw	r22, r24
    3692:	cd 01       	movw	r24, r26
    3694:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	f8 01       	movw	r30, r16
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
    36a2:	24 c0       	rjmp	.+72     	; 0x36ec <main+0xdac>
    36a4:	ce 01       	movw	r24, r28
    36a6:	84 59       	subi	r24, 0x94	; 148
    36a8:	9f 4f       	sbci	r25, 0xFF	; 255
    36aa:	20 e9       	ldi	r18, 0x90	; 144
    36ac:	31 e0       	ldi	r19, 0x01	; 1
    36ae:	fc 01       	movw	r30, r24
    36b0:	31 83       	std	Z+1, r19	; 0x01
    36b2:	20 83       	st	Z, r18
    36b4:	ce 01       	movw	r24, r28
    36b6:	84 59       	subi	r24, 0x94	; 148
    36b8:	9f 4f       	sbci	r25, 0xFF	; 255
    36ba:	fc 01       	movw	r30, r24
    36bc:	80 81       	ld	r24, Z
    36be:	91 81       	ldd	r25, Z+1	; 0x01
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <main+0xd80>
    36c4:	9e 01       	movw	r18, r28
    36c6:	24 59       	subi	r18, 0x94	; 148
    36c8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ca:	f9 01       	movw	r30, r18
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d0:	ce 01       	movw	r24, r28
    36d2:	86 59       	subi	r24, 0x96	; 150
    36d4:	9f 4f       	sbci	r25, 0xFF	; 255
    36d6:	9e 01       	movw	r18, r28
    36d8:	26 59       	subi	r18, 0x96	; 150
    36da:	3f 4f       	sbci	r19, 0xFF	; 255
    36dc:	f9 01       	movw	r30, r18
    36de:	20 81       	ld	r18, Z
    36e0:	31 81       	ldd	r19, Z+1	; 0x01
    36e2:	21 50       	subi	r18, 0x01	; 1
    36e4:	31 09       	sbc	r19, r1
    36e6:	fc 01       	movw	r30, r24
    36e8:	31 83       	std	Z+1, r19	; 0x01
    36ea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ec:	ce 01       	movw	r24, r28
    36ee:	86 59       	subi	r24, 0x96	; 150
    36f0:	9f 4f       	sbci	r25, 0xFF	; 255
    36f2:	fc 01       	movw	r30, r24
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	89 2b       	or	r24, r25
    36fa:	a1 f6       	brne	.-88     	; 0x36a4 <main+0xd64>
    36fc:	2c c0       	rjmp	.+88     	; 0x3756 <main+0xe16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fe:	8e 01       	movw	r16, r28
    3700:	06 59       	subi	r16, 0x96	; 150
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	ce 01       	movw	r24, r28
    3706:	8a 59       	subi	r24, 0x9A	; 154
    3708:	9f 4f       	sbci	r25, 0xFF	; 255
    370a:	fc 01       	movw	r30, r24
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	f8 01       	movw	r30, r16
    371e:	91 83       	std	Z+1, r25	; 0x01
    3720:	80 83       	st	Z, r24
    3722:	ce 01       	movw	r24, r28
    3724:	82 59       	subi	r24, 0x92	; 146
    3726:	9f 4f       	sbci	r25, 0xFF	; 255
    3728:	9e 01       	movw	r18, r28
    372a:	26 59       	subi	r18, 0x96	; 150
    372c:	3f 4f       	sbci	r19, 0xFF	; 255
    372e:	f9 01       	movw	r30, r18
    3730:	20 81       	ld	r18, Z
    3732:	31 81       	ldd	r19, Z+1	; 0x01
    3734:	fc 01       	movw	r30, r24
    3736:	31 83       	std	Z+1, r19	; 0x01
    3738:	20 83       	st	Z, r18
    373a:	ce 01       	movw	r24, r28
    373c:	82 59       	subi	r24, 0x92	; 146
    373e:	9f 4f       	sbci	r25, 0xFF	; 255
    3740:	fc 01       	movw	r30, r24
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <main+0xe06>
    374a:	9e 01       	movw	r18, r28
    374c:	22 59       	subi	r18, 0x92	; 146
    374e:	3f 4f       	sbci	r19, 0xFF	; 255
    3750:	f9 01       	movw	r30, r18
    3752:	91 83       	std	Z+1, r25	; 0x01
    3754:	80 83       	st	Z, r24
				//display.LCD_Command(0xC0);
				print ++;
			}

			a = 'n';
			while(teclado.Percorre()){
    3756:	ce 01       	movw	r24, r28
    3758:	89 5e       	subi	r24, 0xE9	; 233
    375a:	9e 4f       	sbci	r25, 0xFE	; 254
    375c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN8Keyboard8PercorreEv>
    3760:	88 23       	and	r24, r24
    3762:	09 f0       	breq	.+2      	; 0x3766 <main+0xe26>
    3764:	2f cf       	rjmp	.-418    	; 0x35c4 <main+0xc84>
				led.toggle();
				_delay_ms(20);
			};

			a = teclado.retKey();
    3766:	ce 01       	movw	r24, r28
    3768:	89 5e       	subi	r24, 0xE9	; 233
    376a:	9e 4f       	sbci	r25, 0xFE	; 254
    376c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN8Keyboard6retKeyEv>
    3770:	89 a3       	std	Y+33, r24	; 0x21
			_pos = 0;
    3772:	19 a6       	std	Y+41, r1	; 0x29
    3774:	18 a6       	std	Y+40, r1	; 0x28
			_pos2 = _pos+10;
    3776:	88 a5       	ldd	r24, Y+40	; 0x28
    3778:	99 a5       	ldd	r25, Y+41	; 0x29
    377a:	0a 96       	adiw	r24, 0x0a	; 10
    377c:	9e 87       	std	Y+14, r25	; 0x0e
    377e:	8d 87       	std	Y+13, r24	; 0x0d
			_pos3 = _pos + 20;
    3780:	88 a5       	ldd	r24, Y+40	; 0x28
    3782:	99 a5       	ldd	r25, Y+41	; 0x29
    3784:	44 96       	adiw	r24, 0x14	; 20
    3786:	98 8b       	std	Y+16, r25	; 0x10
    3788:	8f 87       	std	Y+15, r24	; 0x0f
			switch (a) {
    378a:	89 a1       	ldd	r24, Y+33	; 0x21
    378c:	88 2f       	mov	r24, r24
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	82 34       	cpi	r24, 0x42	; 66
    3792:	91 05       	cpc	r25, r1
    3794:	d1 f1       	breq	.+116    	; 0x380a <main+0xeca>
    3796:	84 34       	cpi	r24, 0x44	; 68
    3798:	91 05       	cpc	r25, r1
    379a:	09 f4       	brne	.+2      	; 0x379e <main+0xe5e>
    379c:	67 c0       	rjmp	.+206    	; 0x386c <main+0xf2c>
    379e:	81 34       	cpi	r24, 0x41	; 65
    37a0:	91 05       	cpc	r25, r1
    37a2:	11 f0       	breq	.+4      	; 0x37a8 <main+0xe68>
    37a4:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <main+0x1e74>
				case 'A':
					addSeq(_pos2, teclado, eeprom, display);
    37a8:	4d 85       	ldd	r20, Y+13	; 0x0d
    37aa:	5e 85       	ldd	r21, Y+14	; 0x0e
    37ac:	6f 92       	push	r6
    37ae:	ce 01       	movw	r24, r28
    37b0:	8d 52       	subi	r24, 0x2D	; 45
    37b2:	9f 4f       	sbci	r25, 0xFF	; 255
    37b4:	29 2f       	mov	r18, r25
    37b6:	2f 93       	push	r18
    37b8:	8f 93       	push	r24
    37ba:	9e 01       	movw	r18, r28
    37bc:	29 5e       	subi	r18, 0xE9	; 233
    37be:	3e 4f       	sbci	r19, 0xFE	; 254
    37c0:	8d b7       	in	r24, 0x3d	; 61
    37c2:	9e b7       	in	r25, 0x3e	; 62
    37c4:	41 97       	sbiw	r24, 0x11	; 17
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	f8 94       	cli
    37ca:	9e bf       	out	0x3e, r25	; 62
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	8d bf       	out	0x3d, r24	; 61
    37d0:	8d b7       	in	r24, 0x3d	; 61
    37d2:	9e b7       	in	r25, 0x3e	; 62
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	61 e1       	ldi	r22, 0x11	; 17
    37d8:	f9 01       	movw	r30, r18
    37da:	dc 01       	movw	r26, r24
    37dc:	01 90       	ld	r0, Z+
    37de:	0d 92       	st	X+, r0
    37e0:	6a 95       	dec	r22
    37e2:	e1 f7       	brne	.-8      	; 0x37dc <main+0xe9c>
    37e4:	ca 01       	movw	r24, r20
    37e6:	0e 94 c0 13 	call	0x2780	; 0x2780 <_Z6addSeqPh8Keyboard6EEPROM3LCD>
    37ea:	ed b7       	in	r30, 0x3d	; 61
    37ec:	fe b7       	in	r31, 0x3e	; 62
    37ee:	74 96       	adiw	r30, 0x14	; 20
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	ce 01       	movw	r24, r28
    37fc:	8d 52       	subi	r24, 0x2D	; 45
    37fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3800:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN6EEPROMD1Ev>
					//currentState =1;
					//uart.puts("Voltando para Idle");
					print = 0;
    3804:	1a 86       	std	Y+10, r1	; 0x0a
    3806:	19 86       	std	Y+9, r1	; 0x09
					//controle = 0;
					break;
    3808:	41 c0       	rjmp	.+130    	; 0x388c <main+0xf4c>

				case 'B':
					addSeq(_pos3, teclado, eeprom, display);
    380a:	4f 85       	ldd	r20, Y+15	; 0x0f
    380c:	58 89       	ldd	r21, Y+16	; 0x10
    380e:	7f 92       	push	r7
    3810:	ce 01       	movw	r24, r28
    3812:	8e 52       	subi	r24, 0x2E	; 46
    3814:	9f 4f       	sbci	r25, 0xFF	; 255
    3816:	29 2f       	mov	r18, r25
    3818:	2f 93       	push	r18
    381a:	8f 93       	push	r24
    381c:	9e 01       	movw	r18, r28
    381e:	29 5e       	subi	r18, 0xE9	; 233
    3820:	3e 4f       	sbci	r19, 0xFE	; 254
    3822:	8d b7       	in	r24, 0x3d	; 61
    3824:	9e b7       	in	r25, 0x3e	; 62
    3826:	41 97       	sbiw	r24, 0x11	; 17
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	9e bf       	out	0x3e, r25	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	8d bf       	out	0x3d, r24	; 61
    3832:	8d b7       	in	r24, 0x3d	; 61
    3834:	9e b7       	in	r25, 0x3e	; 62
    3836:	01 96       	adiw	r24, 0x01	; 1
    3838:	61 e1       	ldi	r22, 0x11	; 17
    383a:	f9 01       	movw	r30, r18
    383c:	dc 01       	movw	r26, r24
    383e:	01 90       	ld	r0, Z+
    3840:	0d 92       	st	X+, r0
    3842:	6a 95       	dec	r22
    3844:	e1 f7       	brne	.-8      	; 0x383e <main+0xefe>
    3846:	ca 01       	movw	r24, r20
    3848:	0e 94 c0 13 	call	0x2780	; 0x2780 <_Z6addSeqPh8Keyboard6EEPROM3LCD>
    384c:	ed b7       	in	r30, 0x3d	; 61
    384e:	fe b7       	in	r31, 0x3e	; 62
    3850:	74 96       	adiw	r30, 0x14	; 20
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	ce 01       	movw	r24, r28
    385e:	8e 52       	subi	r24, 0x2E	; 46
    3860:	9f 4f       	sbci	r25, 0xFF	; 255
    3862:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN6EEPROMD1Ev>
					//currentState =1;
					//uart.puts("Voltando para Idle");
					print = 0;
    3866:	1a 86       	std	Y+10, r1	; 0x0a
    3868:	19 86       	std	Y+9, r1	; 0x09
					//controle = 0;
					break;
    386a:	10 c0       	rjmp	.+32     	; 0x388c <main+0xf4c>
				case 'D':
					currentState = 1;
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9a 83       	std	Y+2, r25	; 0x02
    3872:	89 83       	std	Y+1, r24	; 0x01
					uart.puts("Volt. Idle");
    3874:	ce 01       	movw	r24, r28
    3876:	88 58       	subi	r24, 0x88	; 136
    3878:	9e 4f       	sbci	r25, 0xFE	; 254
    387a:	63 e9       	ldi	r22, 0x93	; 147
    387c:	72 e0       	ldi	r23, 0x02	; 2
    387e:	0e 94 b4 24 	call	0x4968	; 0x4968 <_ZN4UART4putsEPc>
					print = 0;
    3882:	1a 86       	std	Y+10, r1	; 0x0a
    3884:	19 86       	std	Y+9, r1	; 0x09
					controle = 0;
    3886:	1c 86       	std	Y+12, r1	; 0x0c
    3888:	1b 86       	std	Y+11, r1	; 0x0b
					break;
    388a:	00 00       	nop
    388c:	93 c7       	rjmp	.+3878   	; 0x47b4 <main+0x1e74>
			}


		} else if (currentState == 4) { //discar sequencias
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	9a 81       	ldd	r25, Y+2	; 0x02
    3892:	04 97       	sbiw	r24, 0x04	; 4
    3894:	09 f0       	breq	.+2      	; 0x3898 <main+0xf58>
    3896:	8e c7       	rjmp	.+3868   	; 0x47b4 <main+0x1e74>
			//verificar sequencias, printar e discar
			uint8_t * _pos = 0;
    3898:	1c 8a       	std	Y+20, r1	; 0x14
    389a:	1b 8a       	std	Y+19, r1	; 0x13
			uint8_t * _pos2 = _pos+10;
    389c:	8b 89       	ldd	r24, Y+19	; 0x13
    389e:	9c 89       	ldd	r25, Y+20	; 0x14
    38a0:	0a 96       	adiw	r24, 0x0a	; 10
    38a2:	9e 8b       	std	Y+22, r25	; 0x16
    38a4:	8d 8b       	std	Y+21, r24	; 0x15
			uint8_t * _pos3 = _pos+20;
    38a6:	8b 89       	ldd	r24, Y+19	; 0x13
    38a8:	9c 89       	ldd	r25, Y+20	; 0x14
    38aa:	44 96       	adiw	r24, 0x14	; 20
    38ac:	98 8f       	std	Y+24, r25	; 0x18
    38ae:	8f 8b       	std	Y+23, r24	; 0x17
			if(print == 0){
    38b0:	89 85       	ldd	r24, Y+9	; 0x09
    38b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b4:	89 2b       	or	r24, r25
    38b6:	09 f0       	breq	.+2      	; 0x38ba <main+0xf7a>
    38b8:	29 c3       	rjmp	.+1618   	; 0x3f0c <main+0x15cc>
				display.LCD_Clear();
    38ba:	ce 01       	movw	r24, r28
    38bc:	88 5d       	subi	r24, 0xD8	; 216
    38be:	9e 4f       	sbci	r25, 0xFE	; 254
    38c0:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZN3LCD9LCD_ClearEv>
				display.LCD_String("Dseq:");
    38c4:	ce 01       	movw	r24, r28
    38c6:	88 5d       	subi	r24, 0xD8	; 216
    38c8:	9e 4f       	sbci	r25, 0xFE	; 254
    38ca:	6c eb       	ldi	r22, 0xBC	; 188
    38cc:	72 e0       	ldi	r23, 0x02	; 2
    38ce:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
				if(eeprom.read(_pos2) != 'e'){
    38d2:	2d 89       	ldd	r18, Y+21	; 0x15
    38d4:	3e 89       	ldd	r19, Y+22	; 0x16
    38d6:	ce 01       	movw	r24, r28
    38d8:	87 5d       	subi	r24, 0xD7	; 215
    38da:	9e 4f       	sbci	r25, 0xFE	; 254
    38dc:	b9 01       	movw	r22, r18
    38de:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    38e2:	98 2f       	mov	r25, r24
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	95 36       	cpi	r25, 0x65	; 101
    38e8:	09 f4       	brne	.+2      	; 0x38ec <main+0xfac>
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	88 23       	and	r24, r24
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <main+0xfb2>
    38f0:	f0 c0       	rjmp	.+480    	; 0x3ad2 <main+0x1192>
					display.LCD_String("A:");
    38f2:	ce 01       	movw	r24, r28
    38f4:	88 5d       	subi	r24, 0xD8	; 216
    38f6:	9e 4f       	sbci	r25, 0xFE	; 254
    38f8:	63 ea       	ldi	r22, 0xA3	; 163
    38fa:	72 e0       	ldi	r23, 0x02	; 2
    38fc:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
					for (uint8_t  i = 0; i < 9; i++){
    3900:	19 8e       	std	Y+25, r1	; 0x19
    3902:	e1 c0       	rjmp	.+450    	; 0x3ac6 <main+0x1186>
						a = eeprom.read(_pos2);
    3904:	2d 89       	ldd	r18, Y+21	; 0x15
    3906:	3e 89       	ldd	r19, Y+22	; 0x16
    3908:	ce 01       	movw	r24, r28
    390a:	87 5d       	subi	r24, 0xD7	; 215
    390c:	9e 4f       	sbci	r25, 0xFE	; 254
    390e:	b9 01       	movw	r22, r18
    3910:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    3914:	89 a3       	std	Y+33, r24	; 0x21
						uart.put(a);
    3916:	ce 01       	movw	r24, r28
    3918:	88 58       	subi	r24, 0x88	; 136
    391a:	9e 4f       	sbci	r25, 0xFE	; 254
    391c:	69 a1       	ldd	r22, Y+33	; 0x21
    391e:	0e 94 92 24 	call	0x4924	; 0x4924 <_ZN4UART3putEh>
						display.LCD_Char(a);
    3922:	ce 01       	movw	r24, r28
    3924:	88 5d       	subi	r24, 0xD8	; 216
    3926:	9e 4f       	sbci	r25, 0xFE	; 254
    3928:	69 a1       	ldd	r22, Y+33	; 0x21
    392a:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN3LCD8LCD_CharEh>
						//dtmf.send(a);
						_pos2++;
    392e:	8d 89       	ldd	r24, Y+21	; 0x15
    3930:	9e 89       	ldd	r25, Y+22	; 0x16
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	9e 8b       	std	Y+22, r25	; 0x16
    3936:	8d 8b       	std	Y+21, r24	; 0x15
    3938:	9e 01       	movw	r18, r28
    393a:	20 59       	subi	r18, 0x90	; 144
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	aa ef       	ldi	r26, 0xFA	; 250
    3944:	b3 e4       	ldi	r27, 0x43	; 67
    3946:	f9 01       	movw	r30, r18
    3948:	80 83       	st	Z, r24
    394a:	91 83       	std	Z+1, r25	; 0x01
    394c:	a2 83       	std	Z+2, r26	; 0x02
    394e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3950:	8e 01       	movw	r16, r28
    3952:	0c 58       	subi	r16, 0x8C	; 140
    3954:	1f 4f       	sbci	r17, 0xFF	; 255
    3956:	ce 01       	movw	r24, r28
    3958:	80 59       	subi	r24, 0x90	; 144
    395a:	9f 4f       	sbci	r25, 0xFF	; 255
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	4a e7       	ldi	r20, 0x7A	; 122
    3962:	55 e4       	ldi	r21, 0x45	; 69
    3964:	fc 01       	movw	r30, r24
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	82 81       	ldd	r24, Z+2	; 0x02
    396c:	93 81       	ldd	r25, Z+3	; 0x03
    396e:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	f8 01       	movw	r30, r16
    3978:	80 83       	st	Z, r24
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	a2 83       	std	Z+2, r26	; 0x02
    397e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3980:	ce 01       	movw	r24, r28
    3982:	8c 58       	subi	r24, 0x8C	; 140
    3984:	9f 4f       	sbci	r25, 0xFF	; 255
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e8       	ldi	r20, 0x80	; 128
    398c:	5f e3       	ldi	r21, 0x3F	; 63
    398e:	fc 01       	movw	r30, r24
    3990:	60 81       	ld	r22, Z
    3992:	71 81       	ldd	r23, Z+1	; 0x01
    3994:	82 81       	ldd	r24, Z+2	; 0x02
    3996:	93 81       	ldd	r25, Z+3	; 0x03
    3998:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    399c:	88 23       	and	r24, r24
    399e:	4c f4       	brge	.+18     	; 0x39b2 <main+0x1072>
		__ticks = 1;
    39a0:	ce 01       	movw	r24, r28
    39a2:	88 58       	subi	r24, 0x88	; 136
    39a4:	9f 4f       	sbci	r25, 0xFF	; 255
    39a6:	21 e0       	ldi	r18, 0x01	; 1
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	fc 01       	movw	r30, r24
    39ac:	31 83       	std	Z+1, r19	; 0x01
    39ae:	20 83       	st	Z, r18
    39b0:	6d c0       	rjmp	.+218    	; 0x3a8c <main+0x114c>
	else if (__tmp > 65535)
    39b2:	ce 01       	movw	r24, r28
    39b4:	8c 58       	subi	r24, 0x8C	; 140
    39b6:	9f 4f       	sbci	r25, 0xFF	; 255
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	3f ef       	ldi	r19, 0xFF	; 255
    39bc:	4f e7       	ldi	r20, 0x7F	; 127
    39be:	57 e4       	ldi	r21, 0x47	; 71
    39c0:	fc 01       	movw	r30, r24
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    39ce:	18 16       	cp	r1, r24
    39d0:	0c f0       	brlt	.+2      	; 0x39d4 <main+0x1094>
    39d2:	4a c0       	rjmp	.+148    	; 0x3a68 <main+0x1128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d4:	ce 01       	movw	r24, r28
    39d6:	80 59       	subi	r24, 0x90	; 144
    39d8:	9f 4f       	sbci	r25, 0xFF	; 255
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e2       	ldi	r20, 0x20	; 32
    39e0:	51 e4       	ldi	r21, 0x41	; 65
    39e2:	fc 01       	movw	r30, r24
    39e4:	60 81       	ld	r22, Z
    39e6:	71 81       	ldd	r23, Z+1	; 0x01
    39e8:	82 81       	ldd	r24, Z+2	; 0x02
    39ea:	93 81       	ldd	r25, Z+3	; 0x03
    39ec:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	8e 01       	movw	r16, r28
    39f6:	08 58       	subi	r16, 0x88	; 136
    39f8:	1f 4f       	sbci	r17, 0xFF	; 255
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	f8 01       	movw	r30, r16
    3a08:	91 83       	std	Z+1, r25	; 0x01
    3a0a:	80 83       	st	Z, r24
    3a0c:	24 c0       	rjmp	.+72     	; 0x3a56 <main+0x1116>
    3a0e:	ce 01       	movw	r24, r28
    3a10:	86 58       	subi	r24, 0x86	; 134
    3a12:	9f 4f       	sbci	r25, 0xFF	; 255
    3a14:	20 e9       	ldi	r18, 0x90	; 144
    3a16:	31 e0       	ldi	r19, 0x01	; 1
    3a18:	fc 01       	movw	r30, r24
    3a1a:	31 83       	std	Z+1, r19	; 0x01
    3a1c:	20 83       	st	Z, r18
    3a1e:	ce 01       	movw	r24, r28
    3a20:	86 58       	subi	r24, 0x86	; 134
    3a22:	9f 4f       	sbci	r25, 0xFF	; 255
    3a24:	fc 01       	movw	r30, r24
    3a26:	80 81       	ld	r24, Z
    3a28:	91 81       	ldd	r25, Z+1	; 0x01
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <main+0x10ea>
    3a2e:	9e 01       	movw	r18, r28
    3a30:	26 58       	subi	r18, 0x86	; 134
    3a32:	3f 4f       	sbci	r19, 0xFF	; 255
    3a34:	f9 01       	movw	r30, r18
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	88 58       	subi	r24, 0x88	; 136
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	9e 01       	movw	r18, r28
    3a42:	28 58       	subi	r18, 0x88	; 136
    3a44:	3f 4f       	sbci	r19, 0xFF	; 255
    3a46:	f9 01       	movw	r30, r18
    3a48:	20 81       	ld	r18, Z
    3a4a:	31 81       	ldd	r19, Z+1	; 0x01
    3a4c:	21 50       	subi	r18, 0x01	; 1
    3a4e:	31 09       	sbc	r19, r1
    3a50:	fc 01       	movw	r30, r24
    3a52:	31 83       	std	Z+1, r19	; 0x01
    3a54:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a56:	ce 01       	movw	r24, r28
    3a58:	88 58       	subi	r24, 0x88	; 136
    3a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	80 81       	ld	r24, Z
    3a60:	91 81       	ldd	r25, Z+1	; 0x01
    3a62:	89 2b       	or	r24, r25
    3a64:	a1 f6       	brne	.-88     	; 0x3a0e <main+0x10ce>
    3a66:	2c c0       	rjmp	.+88     	; 0x3ac0 <main+0x1180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a68:	8e 01       	movw	r16, r28
    3a6a:	08 58       	subi	r16, 0x88	; 136
    3a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6e:	ce 01       	movw	r24, r28
    3a70:	8c 58       	subi	r24, 0x8C	; 140
    3a72:	9f 4f       	sbci	r25, 0xFF	; 255
    3a74:	fc 01       	movw	r30, r24
    3a76:	60 81       	ld	r22, Z
    3a78:	71 81       	ldd	r23, Z+1	; 0x01
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	f8 01       	movw	r30, r16
    3a88:	91 83       	std	Z+1, r25	; 0x01
    3a8a:	80 83       	st	Z, r24
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	84 58       	subi	r24, 0x84	; 132
    3a90:	9f 4f       	sbci	r25, 0xFF	; 255
    3a92:	9e 01       	movw	r18, r28
    3a94:	28 58       	subi	r18, 0x88	; 136
    3a96:	3f 4f       	sbci	r19, 0xFF	; 255
    3a98:	f9 01       	movw	r30, r18
    3a9a:	20 81       	ld	r18, Z
    3a9c:	31 81       	ldd	r19, Z+1	; 0x01
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	31 83       	std	Z+1, r19	; 0x01
    3aa2:	20 83       	st	Z, r18
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	84 58       	subi	r24, 0x84	; 132
    3aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    3aaa:	fc 01       	movw	r30, r24
    3aac:	80 81       	ld	r24, Z
    3aae:	91 81       	ldd	r25, Z+1	; 0x01
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <main+0x1170>
    3ab4:	9e 01       	movw	r18, r28
    3ab6:	24 58       	subi	r18, 0x84	; 132
    3ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aba:	f9 01       	movw	r30, r18
    3abc:	91 83       	std	Z+1, r25	; 0x01
    3abe:	80 83       	st	Z, r24
			if(print == 0){
				display.LCD_Clear();
				display.LCD_String("Dseq:");
				if(eeprom.read(_pos2) != 'e'){
					display.LCD_String("A:");
					for (uint8_t  i = 0; i < 9; i++){
    3ac0:	89 8d       	ldd	r24, Y+25	; 0x19
    3ac2:	8f 5f       	subi	r24, 0xFF	; 255
    3ac4:	89 8f       	std	Y+25, r24	; 0x19
    3ac6:	89 8d       	ldd	r24, Y+25	; 0x19
    3ac8:	89 30       	cpi	r24, 0x09	; 9
    3aca:	08 f4       	brcc	.+2      	; 0x3ace <main+0x118e>
    3acc:	1b cf       	rjmp	.-458    	; 0x3904 <main+0xfc4>
						display.LCD_Char(a);
						//dtmf.send(a);
						_pos2++;
						_delay_ms(500);
					}
				_pos = 0;
    3ace:	1c 8a       	std	Y+20, r1	; 0x14
    3ad0:	1b 8a       	std	Y+19, r1	; 0x13
				} else {
				//display.LCD_Command(0xC0);
				}

				if(eeprom.read(_pos3) != 'e'){
    3ad2:	2f 89       	ldd	r18, Y+23	; 0x17
    3ad4:	38 8d       	ldd	r19, Y+24	; 0x18
    3ad6:	ce 01       	movw	r24, r28
    3ad8:	87 5d       	subi	r24, 0xD7	; 215
    3ada:	9e 4f       	sbci	r25, 0xFE	; 254
    3adc:	b9 01       	movw	r22, r18
    3ade:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	95 36       	cpi	r25, 0x65	; 101
    3ae8:	09 f4       	brne	.+2      	; 0x3aec <main+0x11ac>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	88 23       	and	r24, r24
    3aee:	09 f4       	brne	.+2      	; 0x3af2 <main+0x11b2>
    3af0:	f6 c0       	rjmp	.+492    	; 0x3cde <main+0x139e>
					display.LCD_Command(0xC0);
    3af2:	ce 01       	movw	r24, r28
    3af4:	88 5d       	subi	r24, 0xD8	; 216
    3af6:	9e 4f       	sbci	r25, 0xFE	; 254
    3af8:	60 ec       	ldi	r22, 0xC0	; 192
    3afa:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
					display.LCD_String("B:");
    3afe:	ce 01       	movw	r24, r28
    3b00:	88 5d       	subi	r24, 0xD8	; 216
    3b02:	9e 4f       	sbci	r25, 0xFE	; 254
    3b04:	6d ea       	ldi	r22, 0xAD	; 173
    3b06:	72 e0       	ldi	r23, 0x02	; 2
    3b08:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
					for (uint8_t  i = 0; i < 9; i++){
    3b0c:	1a 8e       	std	Y+26, r1	; 0x1a
    3b0e:	e0 c0       	rjmp	.+448    	; 0x3cd0 <main+0x1390>
						a = eeprom.read(_pos3);
    3b10:	2f 89       	ldd	r18, Y+23	; 0x17
    3b12:	38 8d       	ldd	r19, Y+24	; 0x18
    3b14:	ce 01       	movw	r24, r28
    3b16:	87 5d       	subi	r24, 0xD7	; 215
    3b18:	9e 4f       	sbci	r25, 0xFE	; 254
    3b1a:	b9 01       	movw	r22, r18
    3b1c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    3b20:	89 a3       	std	Y+33, r24	; 0x21
						uart.put(a);
    3b22:	ce 01       	movw	r24, r28
    3b24:	88 58       	subi	r24, 0x88	; 136
    3b26:	9e 4f       	sbci	r25, 0xFE	; 254
    3b28:	69 a1       	ldd	r22, Y+33	; 0x21
    3b2a:	fc d6       	rcall	.+3576   	; 0x4924 <_ZN4UART3putEh>
						display.LCD_Char(a);
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	88 5d       	subi	r24, 0xD8	; 216
    3b30:	9e 4f       	sbci	r25, 0xFE	; 254
    3b32:	69 a1       	ldd	r22, Y+33	; 0x21
    3b34:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN3LCD8LCD_CharEh>
						//dtmf.send(a);
						_pos3++;
    3b38:	8f 89       	ldd	r24, Y+23	; 0x17
    3b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b3c:	01 96       	adiw	r24, 0x01	; 1
    3b3e:	98 8f       	std	Y+24, r25	; 0x18
    3b40:	8f 8b       	std	Y+23, r24	; 0x17
    3b42:	9e 01       	movw	r18, r28
    3b44:	22 58       	subi	r18, 0x82	; 130
    3b46:	3f 4f       	sbci	r19, 0xFF	; 255
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	aa ef       	ldi	r26, 0xFA	; 250
    3b4e:	b3 e4       	ldi	r27, 0x43	; 67
    3b50:	f9 01       	movw	r30, r18
    3b52:	80 83       	st	Z, r24
    3b54:	91 83       	std	Z+1, r25	; 0x01
    3b56:	a2 83       	std	Z+2, r26	; 0x02
    3b58:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3b5a:	8e 01       	movw	r16, r28
    3b5c:	0e 57       	subi	r16, 0x7E	; 126
    3b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b60:	ce 01       	movw	r24, r28
    3b62:	82 58       	subi	r24, 0x82	; 130
    3b64:	9f 4f       	sbci	r25, 0xFF	; 255
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	4a e7       	ldi	r20, 0x7A	; 122
    3b6c:	55 e4       	ldi	r21, 0x45	; 69
    3b6e:	fc 01       	movw	r30, r24
    3b70:	60 81       	ld	r22, Z
    3b72:	71 81       	ldd	r23, Z+1	; 0x01
    3b74:	82 81       	ldd	r24, Z+2	; 0x02
    3b76:	93 81       	ldd	r25, Z+3	; 0x03
    3b78:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	f8 01       	movw	r30, r16
    3b82:	80 83       	st	Z, r24
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	a2 83       	std	Z+2, r26	; 0x02
    3b88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b8a:	ce 01       	movw	r24, r28
    3b8c:	8e 57       	subi	r24, 0x7E	; 126
    3b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	fc 01       	movw	r30, r24
    3b9a:	60 81       	ld	r22, Z
    3b9c:	71 81       	ldd	r23, Z+1	; 0x01
    3b9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ba0:	93 81       	ldd	r25, Z+3	; 0x03
    3ba2:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    3ba6:	88 23       	and	r24, r24
    3ba8:	4c f4       	brge	.+18     	; 0x3bbc <main+0x127c>
		__ticks = 1;
    3baa:	ce 01       	movw	r24, r28
    3bac:	8a 57       	subi	r24, 0x7A	; 122
    3bae:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb0:	21 e0       	ldi	r18, 0x01	; 1
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	31 83       	std	Z+1, r19	; 0x01
    3bb8:	20 83       	st	Z, r18
    3bba:	6d c0       	rjmp	.+218    	; 0x3c96 <main+0x1356>
	else if (__tmp > 65535)
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	8e 57       	subi	r24, 0x7E	; 126
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	3f ef       	ldi	r19, 0xFF	; 255
    3bc6:	4f e7       	ldi	r20, 0x7F	; 127
    3bc8:	57 e4       	ldi	r21, 0x47	; 71
    3bca:	fc 01       	movw	r30, r24
    3bcc:	60 81       	ld	r22, Z
    3bce:	71 81       	ldd	r23, Z+1	; 0x01
    3bd0:	82 81       	ldd	r24, Z+2	; 0x02
    3bd2:	93 81       	ldd	r25, Z+3	; 0x03
    3bd4:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    3bd8:	18 16       	cp	r1, r24
    3bda:	0c f0       	brlt	.+2      	; 0x3bde <main+0x129e>
    3bdc:	4a c0       	rjmp	.+148    	; 0x3c72 <main+0x1332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bde:	ce 01       	movw	r24, r28
    3be0:	82 58       	subi	r24, 0x82	; 130
    3be2:	9f 4f       	sbci	r25, 0xFF	; 255
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e2       	ldi	r20, 0x20	; 32
    3bea:	51 e4       	ldi	r21, 0x41	; 65
    3bec:	fc 01       	movw	r30, r24
    3bee:	60 81       	ld	r22, Z
    3bf0:	71 81       	ldd	r23, Z+1	; 0x01
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	8e 01       	movw	r16, r28
    3c00:	0a 57       	subi	r16, 0x7A	; 122
    3c02:	1f 4f       	sbci	r17, 0xFF	; 255
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	f8 01       	movw	r30, r16
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	80 83       	st	Z, r24
    3c16:	24 c0       	rjmp	.+72     	; 0x3c60 <main+0x1320>
    3c18:	ce 01       	movw	r24, r28
    3c1a:	88 57       	subi	r24, 0x78	; 120
    3c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1e:	20 e9       	ldi	r18, 0x90	; 144
    3c20:	31 e0       	ldi	r19, 0x01	; 1
    3c22:	fc 01       	movw	r30, r24
    3c24:	31 83       	std	Z+1, r19	; 0x01
    3c26:	20 83       	st	Z, r18
    3c28:	ce 01       	movw	r24, r28
    3c2a:	88 57       	subi	r24, 0x78	; 120
    3c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2e:	fc 01       	movw	r30, r24
    3c30:	80 81       	ld	r24, Z
    3c32:	91 81       	ldd	r25, Z+1	; 0x01
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <main+0x12f4>
    3c38:	9e 01       	movw	r18, r28
    3c3a:	28 57       	subi	r18, 0x78	; 120
    3c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3e:	f9 01       	movw	r30, r18
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c44:	ce 01       	movw	r24, r28
    3c46:	8a 57       	subi	r24, 0x7A	; 122
    3c48:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4a:	9e 01       	movw	r18, r28
    3c4c:	2a 57       	subi	r18, 0x7A	; 122
    3c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c50:	f9 01       	movw	r30, r18
    3c52:	20 81       	ld	r18, Z
    3c54:	31 81       	ldd	r19, Z+1	; 0x01
    3c56:	21 50       	subi	r18, 0x01	; 1
    3c58:	31 09       	sbc	r19, r1
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	31 83       	std	Z+1, r19	; 0x01
    3c5e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c60:	ce 01       	movw	r24, r28
    3c62:	8a 57       	subi	r24, 0x7A	; 122
    3c64:	9f 4f       	sbci	r25, 0xFF	; 255
    3c66:	fc 01       	movw	r30, r24
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	89 2b       	or	r24, r25
    3c6e:	a1 f6       	brne	.-88     	; 0x3c18 <main+0x12d8>
    3c70:	2c c0       	rjmp	.+88     	; 0x3cca <main+0x138a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c72:	8e 01       	movw	r16, r28
    3c74:	0a 57       	subi	r16, 0x7A	; 122
    3c76:	1f 4f       	sbci	r17, 0xFF	; 255
    3c78:	ce 01       	movw	r24, r28
    3c7a:	8e 57       	subi	r24, 0x7E	; 126
    3c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7e:	fc 01       	movw	r30, r24
    3c80:	60 81       	ld	r22, Z
    3c82:	71 81       	ldd	r23, Z+1	; 0x01
    3c84:	82 81       	ldd	r24, Z+2	; 0x02
    3c86:	93 81       	ldd	r25, Z+3	; 0x03
    3c88:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	f8 01       	movw	r30, r16
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	80 83       	st	Z, r24
    3c96:	ce 01       	movw	r24, r28
    3c98:	86 57       	subi	r24, 0x76	; 118
    3c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9c:	9e 01       	movw	r18, r28
    3c9e:	2a 57       	subi	r18, 0x7A	; 122
    3ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca2:	f9 01       	movw	r30, r18
    3ca4:	20 81       	ld	r18, Z
    3ca6:	31 81       	ldd	r19, Z+1	; 0x01
    3ca8:	fc 01       	movw	r30, r24
    3caa:	31 83       	std	Z+1, r19	; 0x01
    3cac:	20 83       	st	Z, r18
    3cae:	ce 01       	movw	r24, r28
    3cb0:	86 57       	subi	r24, 0x76	; 118
    3cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	80 81       	ld	r24, Z
    3cb8:	91 81       	ldd	r25, Z+1	; 0x01
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <main+0x137a>
    3cbe:	9e 01       	movw	r18, r28
    3cc0:	26 57       	subi	r18, 0x76	; 118
    3cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc4:	f9 01       	movw	r30, r18
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	80 83       	st	Z, r24
				}

				if(eeprom.read(_pos3) != 'e'){
					display.LCD_Command(0xC0);
					display.LCD_String("B:");
					for (uint8_t  i = 0; i < 9; i++){
    3cca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ccc:	8f 5f       	subi	r24, 0xFF	; 255
    3cce:	8a 8f       	std	Y+26, r24	; 0x1a
    3cd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3cd2:	89 30       	cpi	r24, 0x09	; 9
    3cd4:	08 f4       	brcc	.+2      	; 0x3cd8 <main+0x1398>
    3cd6:	1c cf       	rjmp	.-456    	; 0x3b10 <main+0x11d0>
						display.LCD_Char(a);
						//dtmf.send(a);
						_pos3++;
						_delay_ms(500);
					}
					_pos = 0;
    3cd8:	1c 8a       	std	Y+20, r1	; 0x14
    3cda:	1b 8a       	std	Y+19, r1	; 0x13
    3cdc:	06 c0       	rjmp	.+12     	; 0x3cea <main+0x13aa>
				} else {
				display.LCD_Command(0xC0);
    3cde:	ce 01       	movw	r24, r28
    3ce0:	88 5d       	subi	r24, 0xD8	; 216
    3ce2:	9e 4f       	sbci	r25, 0xFE	; 254
    3ce4:	60 ec       	ldi	r22, 0xC0	; 192
    3ce6:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
				}
				if(eeprom.read(_pos) != 'e'){
    3cea:	2b 89       	ldd	r18, Y+19	; 0x13
    3cec:	3c 89       	ldd	r19, Y+20	; 0x14
    3cee:	ce 01       	movw	r24, r28
    3cf0:	87 5d       	subi	r24, 0xD7	; 215
    3cf2:	9e 4f       	sbci	r25, 0xFE	; 254
    3cf4:	b9 01       	movw	r22, r18
    3cf6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    3cfa:	98 2f       	mov	r25, r24
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	95 36       	cpi	r25, 0x65	; 101
    3d00:	09 f4       	brne	.+2      	; 0x3d04 <main+0x13c4>
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	88 23       	and	r24, r24
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <main+0x13ca>
    3d08:	f5 c0       	rjmp	.+490    	; 0x3ef4 <main+0x15b4>
					display.LCD_Command(0xC0);
    3d0a:	ce 01       	movw	r24, r28
    3d0c:	88 5d       	subi	r24, 0xD8	; 216
    3d0e:	9e 4f       	sbci	r25, 0xFE	; 254
    3d10:	60 ec       	ldi	r22, 0xC0	; 192
    3d12:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
					display.LCD_String("C:");
    3d16:	ce 01       	movw	r24, r28
    3d18:	88 5d       	subi	r24, 0xD8	; 216
    3d1a:	9e 4f       	sbci	r25, 0xFE	; 254
    3d1c:	62 ec       	ldi	r22, 0xC2	; 194
    3d1e:	72 e0       	ldi	r23, 0x02	; 2
    3d20:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
					for (uint8_t  i = 0; i < 9; i++){
    3d24:	1b 8e       	std	Y+27, r1	; 0x1b
    3d26:	e0 c0       	rjmp	.+448    	; 0x3ee8 <main+0x15a8>
						a = eeprom.read(_pos);
    3d28:	2b 89       	ldd	r18, Y+19	; 0x13
    3d2a:	3c 89       	ldd	r19, Y+20	; 0x14
    3d2c:	ce 01       	movw	r24, r28
    3d2e:	87 5d       	subi	r24, 0xD7	; 215
    3d30:	9e 4f       	sbci	r25, 0xFE	; 254
    3d32:	b9 01       	movw	r22, r18
    3d34:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    3d38:	89 a3       	std	Y+33, r24	; 0x21
						uart.put(a);
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	88 58       	subi	r24, 0x88	; 136
    3d3e:	9e 4f       	sbci	r25, 0xFE	; 254
    3d40:	69 a1       	ldd	r22, Y+33	; 0x21
    3d42:	f0 d5       	rcall	.+3040   	; 0x4924 <_ZN4UART3putEh>
						display.LCD_Char(a);
    3d44:	ce 01       	movw	r24, r28
    3d46:	88 5d       	subi	r24, 0xD8	; 216
    3d48:	9e 4f       	sbci	r25, 0xFE	; 254
    3d4a:	69 a1       	ldd	r22, Y+33	; 0x21
    3d4c:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN3LCD8LCD_CharEh>
						//dtmf.send(a);
						_pos++;
    3d50:	8b 89       	ldd	r24, Y+19	; 0x13
    3d52:	9c 89       	ldd	r25, Y+20	; 0x14
    3d54:	01 96       	adiw	r24, 0x01	; 1
    3d56:	9c 8b       	std	Y+20, r25	; 0x14
    3d58:	8b 8b       	std	Y+19, r24	; 0x13
    3d5a:	9e 01       	movw	r18, r28
    3d5c:	24 57       	subi	r18, 0x74	; 116
    3d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	aa ef       	ldi	r26, 0xFA	; 250
    3d66:	b3 e4       	ldi	r27, 0x43	; 67
    3d68:	f9 01       	movw	r30, r18
    3d6a:	80 83       	st	Z, r24
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	a2 83       	std	Z+2, r26	; 0x02
    3d70:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d72:	8e 01       	movw	r16, r28
    3d74:	00 57       	subi	r16, 0x70	; 112
    3d76:	1f 4f       	sbci	r17, 0xFF	; 255
    3d78:	ce 01       	movw	r24, r28
    3d7a:	84 57       	subi	r24, 0x74	; 116
    3d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	4a e7       	ldi	r20, 0x7A	; 122
    3d84:	55 e4       	ldi	r21, 0x45	; 69
    3d86:	fc 01       	movw	r30, r24
    3d88:	60 81       	ld	r22, Z
    3d8a:	71 81       	ldd	r23, Z+1	; 0x01
    3d8c:	82 81       	ldd	r24, Z+2	; 0x02
    3d8e:	93 81       	ldd	r25, Z+3	; 0x03
    3d90:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	f8 01       	movw	r30, r16
    3d9a:	80 83       	st	Z, r24
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	a2 83       	std	Z+2, r26	; 0x02
    3da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3da2:	ce 01       	movw	r24, r28
    3da4:	80 57       	subi	r24, 0x70	; 112
    3da6:	9f 4f       	sbci	r25, 0xFF	; 255
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e8       	ldi	r20, 0x80	; 128
    3dae:	5f e3       	ldi	r21, 0x3F	; 63
    3db0:	fc 01       	movw	r30, r24
    3db2:	60 81       	ld	r22, Z
    3db4:	71 81       	ldd	r23, Z+1	; 0x01
    3db6:	82 81       	ldd	r24, Z+2	; 0x02
    3db8:	93 81       	ldd	r25, Z+3	; 0x03
    3dba:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    3dbe:	88 23       	and	r24, r24
    3dc0:	4c f4       	brge	.+18     	; 0x3dd4 <main+0x1494>
		__ticks = 1;
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	8c 56       	subi	r24, 0x6C	; 108
    3dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc8:	21 e0       	ldi	r18, 0x01	; 1
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	fc 01       	movw	r30, r24
    3dce:	31 83       	std	Z+1, r19	; 0x01
    3dd0:	20 83       	st	Z, r18
    3dd2:	6d c0       	rjmp	.+218    	; 0x3eae <main+0x156e>
	else if (__tmp > 65535)
    3dd4:	ce 01       	movw	r24, r28
    3dd6:	80 57       	subi	r24, 0x70	; 112
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	3f ef       	ldi	r19, 0xFF	; 255
    3dde:	4f e7       	ldi	r20, 0x7F	; 127
    3de0:	57 e4       	ldi	r21, 0x47	; 71
    3de2:	fc 01       	movw	r30, r24
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    3df0:	18 16       	cp	r1, r24
    3df2:	0c f0       	brlt	.+2      	; 0x3df6 <main+0x14b6>
    3df4:	4a c0       	rjmp	.+148    	; 0x3e8a <main+0x154a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df6:	ce 01       	movw	r24, r28
    3df8:	84 57       	subi	r24, 0x74	; 116
    3dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	40 e2       	ldi	r20, 0x20	; 32
    3e02:	51 e4       	ldi	r21, 0x41	; 65
    3e04:	fc 01       	movw	r30, r24
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	8e 01       	movw	r16, r28
    3e18:	0c 56       	subi	r16, 0x6C	; 108
    3e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1c:	bc 01       	movw	r22, r24
    3e1e:	cd 01       	movw	r24, r26
    3e20:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	f8 01       	movw	r30, r16
    3e2a:	91 83       	std	Z+1, r25	; 0x01
    3e2c:	80 83       	st	Z, r24
    3e2e:	24 c0       	rjmp	.+72     	; 0x3e78 <main+0x1538>
    3e30:	ce 01       	movw	r24, r28
    3e32:	8a 56       	subi	r24, 0x6A	; 106
    3e34:	9f 4f       	sbci	r25, 0xFF	; 255
    3e36:	20 e9       	ldi	r18, 0x90	; 144
    3e38:	31 e0       	ldi	r19, 0x01	; 1
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	31 83       	std	Z+1, r19	; 0x01
    3e3e:	20 83       	st	Z, r18
    3e40:	ce 01       	movw	r24, r28
    3e42:	8a 56       	subi	r24, 0x6A	; 106
    3e44:	9f 4f       	sbci	r25, 0xFF	; 255
    3e46:	fc 01       	movw	r30, r24
    3e48:	80 81       	ld	r24, Z
    3e4a:	91 81       	ldd	r25, Z+1	; 0x01
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	f1 f7       	brne	.-4      	; 0x3e4c <main+0x150c>
    3e50:	9e 01       	movw	r18, r28
    3e52:	2a 56       	subi	r18, 0x6A	; 106
    3e54:	3f 4f       	sbci	r19, 0xFF	; 255
    3e56:	f9 01       	movw	r30, r18
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	8c 56       	subi	r24, 0x6C	; 108
    3e60:	9f 4f       	sbci	r25, 0xFF	; 255
    3e62:	9e 01       	movw	r18, r28
    3e64:	2c 56       	subi	r18, 0x6C	; 108
    3e66:	3f 4f       	sbci	r19, 0xFF	; 255
    3e68:	f9 01       	movw	r30, r18
    3e6a:	20 81       	ld	r18, Z
    3e6c:	31 81       	ldd	r19, Z+1	; 0x01
    3e6e:	21 50       	subi	r18, 0x01	; 1
    3e70:	31 09       	sbc	r19, r1
    3e72:	fc 01       	movw	r30, r24
    3e74:	31 83       	std	Z+1, r19	; 0x01
    3e76:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e78:	ce 01       	movw	r24, r28
    3e7a:	8c 56       	subi	r24, 0x6C	; 108
    3e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7e:	fc 01       	movw	r30, r24
    3e80:	80 81       	ld	r24, Z
    3e82:	91 81       	ldd	r25, Z+1	; 0x01
    3e84:	89 2b       	or	r24, r25
    3e86:	a1 f6       	brne	.-88     	; 0x3e30 <main+0x14f0>
    3e88:	2c c0       	rjmp	.+88     	; 0x3ee2 <main+0x15a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8a:	8e 01       	movw	r16, r28
    3e8c:	0c 56       	subi	r16, 0x6C	; 108
    3e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e90:	ce 01       	movw	r24, r28
    3e92:	80 57       	subi	r24, 0x70	; 112
    3e94:	9f 4f       	sbci	r25, 0xFF	; 255
    3e96:	fc 01       	movw	r30, r24
    3e98:	60 81       	ld	r22, Z
    3e9a:	71 81       	ldd	r23, Z+1	; 0x01
    3e9c:	82 81       	ldd	r24, Z+2	; 0x02
    3e9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ea0:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	f8 01       	movw	r30, r16
    3eaa:	91 83       	std	Z+1, r25	; 0x01
    3eac:	80 83       	st	Z, r24
    3eae:	ce 01       	movw	r24, r28
    3eb0:	88 56       	subi	r24, 0x68	; 104
    3eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb4:	9e 01       	movw	r18, r28
    3eb6:	2c 56       	subi	r18, 0x6C	; 108
    3eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eba:	f9 01       	movw	r30, r18
    3ebc:	20 81       	ld	r18, Z
    3ebe:	31 81       	ldd	r19, Z+1	; 0x01
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	31 83       	std	Z+1, r19	; 0x01
    3ec4:	20 83       	st	Z, r18
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	88 56       	subi	r24, 0x68	; 104
    3eca:	9f 4f       	sbci	r25, 0xFF	; 255
    3ecc:	fc 01       	movw	r30, r24
    3ece:	80 81       	ld	r24, Z
    3ed0:	91 81       	ldd	r25, Z+1	; 0x01
    3ed2:	01 97       	sbiw	r24, 0x01	; 1
    3ed4:	f1 f7       	brne	.-4      	; 0x3ed2 <main+0x1592>
    3ed6:	9e 01       	movw	r18, r28
    3ed8:	28 56       	subi	r18, 0x68	; 104
    3eda:	3f 4f       	sbci	r19, 0xFF	; 255
    3edc:	f9 01       	movw	r30, r18
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
				display.LCD_Command(0xC0);
				}
				if(eeprom.read(_pos) != 'e'){
					display.LCD_Command(0xC0);
					display.LCD_String("C:");
					for (uint8_t  i = 0; i < 9; i++){
    3ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ee4:	8f 5f       	subi	r24, 0xFF	; 255
    3ee6:	8b 8f       	std	Y+27, r24	; 0x1b
    3ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eea:	89 30       	cpi	r24, 0x09	; 9
    3eec:	08 f4       	brcc	.+2      	; 0x3ef0 <main+0x15b0>
    3eee:	1c cf       	rjmp	.-456    	; 0x3d28 <main+0x13e8>
						display.LCD_Char(a);
						//dtmf.send(a);
						_pos++;
						_delay_ms(500);
					}
					_pos = 0;
    3ef0:	1c 8a       	std	Y+20, r1	; 0x14
    3ef2:	1b 8a       	std	Y+19, r1	; 0x13
				}
				display.LCD_String("D:Vol");
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	88 5d       	subi	r24, 0xD8	; 216
    3ef8:	9e 4f       	sbci	r25, 0xFE	; 254
    3efa:	66 eb       	ldi	r22, 0xB6	; 182
    3efc:	72 e0       	ldi	r23, 0x02	; 2
    3efe:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>

							//display.LCD_Command(0xC0);
							print ++;
    3f02:	89 85       	ldd	r24, Y+9	; 0x09
    3f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f06:	01 96       	adiw	r24, 0x01	; 1
    3f08:	9a 87       	std	Y+10, r25	; 0x0a
    3f0a:	89 87       	std	Y+9, r24	; 0x09
						}

						a = 'n';
    3f0c:	8e e6       	ldi	r24, 0x6E	; 110
    3f0e:	89 a3       	std	Y+33, r24	; 0x21
						while(teclado.Percorre()){
    3f10:	c9 c0       	rjmp	.+402    	; 0x40a4 <main+0x1764>
							led.toggle();
    3f12:	ce 01       	movw	r24, r28
    3f14:	8c 5f       	subi	r24, 0xFC	; 252
    3f16:	9e 4f       	sbci	r25, 0xFE	; 254
    3f18:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN4GPIO6toggleEv>
    3f1c:	9e 01       	movw	r18, r28
    3f1e:	26 56       	subi	r18, 0x66	; 102
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	a0 ea       	ldi	r26, 0xA0	; 160
    3f28:	b1 e4       	ldi	r27, 0x41	; 65
    3f2a:	f9 01       	movw	r30, r18
    3f2c:	80 83       	st	Z, r24
    3f2e:	91 83       	std	Z+1, r25	; 0x01
    3f30:	a2 83       	std	Z+2, r26	; 0x02
    3f32:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f34:	8e 01       	movw	r16, r28
    3f36:	02 56       	subi	r16, 0x62	; 98
    3f38:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	86 56       	subi	r24, 0x66	; 102
    3f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	4a e7       	ldi	r20, 0x7A	; 122
    3f46:	55 e4       	ldi	r21, 0x45	; 69
    3f48:	fc 01       	movw	r30, r24
    3f4a:	60 81       	ld	r22, Z
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	f8 01       	movw	r30, r16
    3f5c:	80 83       	st	Z, r24
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	a2 83       	std	Z+2, r26	; 0x02
    3f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f64:	ce 01       	movw	r24, r28
    3f66:	82 56       	subi	r24, 0x62	; 98
    3f68:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	40 e8       	ldi	r20, 0x80	; 128
    3f70:	5f e3       	ldi	r21, 0x3F	; 63
    3f72:	fc 01       	movw	r30, r24
    3f74:	60 81       	ld	r22, Z
    3f76:	71 81       	ldd	r23, Z+1	; 0x01
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	0e 94 15 28 	call	0x502a	; 0x502a <__cmpsf2>
    3f80:	88 23       	and	r24, r24
    3f82:	4c f4       	brge	.+18     	; 0x3f96 <main+0x1656>
		__ticks = 1;
    3f84:	ce 01       	movw	r24, r28
    3f86:	8e 55       	subi	r24, 0x5E	; 94
    3f88:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8a:	21 e0       	ldi	r18, 0x01	; 1
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	fc 01       	movw	r30, r24
    3f90:	31 83       	std	Z+1, r19	; 0x01
    3f92:	20 83       	st	Z, r18
    3f94:	6d c0       	rjmp	.+218    	; 0x4070 <main+0x1730>
	else if (__tmp > 65535)
    3f96:	ce 01       	movw	r24, r28
    3f98:	82 56       	subi	r24, 0x62	; 98
    3f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	3f ef       	ldi	r19, 0xFF	; 255
    3fa0:	4f e7       	ldi	r20, 0x7F	; 127
    3fa2:	57 e4       	ldi	r21, 0x47	; 71
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	60 81       	ld	r22, Z
    3fa8:	71 81       	ldd	r23, Z+1	; 0x01
    3faa:	82 81       	ldd	r24, Z+2	; 0x02
    3fac:	93 81       	ldd	r25, Z+3	; 0x03
    3fae:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    3fb2:	18 16       	cp	r1, r24
    3fb4:	0c f0       	brlt	.+2      	; 0x3fb8 <main+0x1678>
    3fb6:	4a c0       	rjmp	.+148    	; 0x404c <main+0x170c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb8:	ce 01       	movw	r24, r28
    3fba:	86 56       	subi	r24, 0x66	; 102
    3fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e2       	ldi	r20, 0x20	; 32
    3fc4:	51 e4       	ldi	r21, 0x41	; 65
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	60 81       	ld	r22, Z
    3fca:	71 81       	ldd	r23, Z+1	; 0x01
    3fcc:	82 81       	ldd	r24, Z+2	; 0x02
    3fce:	93 81       	ldd	r25, Z+3	; 0x03
    3fd0:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	8e 01       	movw	r16, r28
    3fda:	0e 55       	subi	r16, 0x5E	; 94
    3fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3fde:	bc 01       	movw	r22, r24
    3fe0:	cd 01       	movw	r24, r26
    3fe2:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	f8 01       	movw	r30, r16
    3fec:	91 83       	std	Z+1, r25	; 0x01
    3fee:	80 83       	st	Z, r24
    3ff0:	24 c0       	rjmp	.+72     	; 0x403a <main+0x16fa>
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	8c 55       	subi	r24, 0x5C	; 92
    3ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff8:	20 e9       	ldi	r18, 0x90	; 144
    3ffa:	31 e0       	ldi	r19, 0x01	; 1
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	31 83       	std	Z+1, r19	; 0x01
    4000:	20 83       	st	Z, r18
    4002:	ce 01       	movw	r24, r28
    4004:	8c 55       	subi	r24, 0x5C	; 92
    4006:	9f 4f       	sbci	r25, 0xFF	; 255
    4008:	fc 01       	movw	r30, r24
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	f1 f7       	brne	.-4      	; 0x400e <main+0x16ce>
    4012:	9e 01       	movw	r18, r28
    4014:	2c 55       	subi	r18, 0x5C	; 92
    4016:	3f 4f       	sbci	r19, 0xFF	; 255
    4018:	f9 01       	movw	r30, r18
    401a:	91 83       	std	Z+1, r25	; 0x01
    401c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    401e:	ce 01       	movw	r24, r28
    4020:	8e 55       	subi	r24, 0x5E	; 94
    4022:	9f 4f       	sbci	r25, 0xFF	; 255
    4024:	9e 01       	movw	r18, r28
    4026:	2e 55       	subi	r18, 0x5E	; 94
    4028:	3f 4f       	sbci	r19, 0xFF	; 255
    402a:	f9 01       	movw	r30, r18
    402c:	20 81       	ld	r18, Z
    402e:	31 81       	ldd	r19, Z+1	; 0x01
    4030:	21 50       	subi	r18, 0x01	; 1
    4032:	31 09       	sbc	r19, r1
    4034:	fc 01       	movw	r30, r24
    4036:	31 83       	std	Z+1, r19	; 0x01
    4038:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403a:	ce 01       	movw	r24, r28
    403c:	8e 55       	subi	r24, 0x5E	; 94
    403e:	9f 4f       	sbci	r25, 0xFF	; 255
    4040:	fc 01       	movw	r30, r24
    4042:	80 81       	ld	r24, Z
    4044:	91 81       	ldd	r25, Z+1	; 0x01
    4046:	89 2b       	or	r24, r25
    4048:	a1 f6       	brne	.-88     	; 0x3ff2 <main+0x16b2>
    404a:	2c c0       	rjmp	.+88     	; 0x40a4 <main+0x1764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    404c:	8e 01       	movw	r16, r28
    404e:	0e 55       	subi	r16, 0x5E	; 94
    4050:	1f 4f       	sbci	r17, 0xFF	; 255
    4052:	ce 01       	movw	r24, r28
    4054:	82 56       	subi	r24, 0x62	; 98
    4056:	9f 4f       	sbci	r25, 0xFF	; 255
    4058:	fc 01       	movw	r30, r24
    405a:	60 81       	ld	r22, Z
    405c:	71 81       	ldd	r23, Z+1	; 0x01
    405e:	82 81       	ldd	r24, Z+2	; 0x02
    4060:	93 81       	ldd	r25, Z+3	; 0x03
    4062:	0e 94 81 28 	call	0x5102	; 0x5102 <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	f8 01       	movw	r30, r16
    406c:	91 83       	std	Z+1, r25	; 0x01
    406e:	80 83       	st	Z, r24
    4070:	ce 01       	movw	r24, r28
    4072:	8a 55       	subi	r24, 0x5A	; 90
    4074:	9f 4f       	sbci	r25, 0xFF	; 255
    4076:	9e 01       	movw	r18, r28
    4078:	2e 55       	subi	r18, 0x5E	; 94
    407a:	3f 4f       	sbci	r19, 0xFF	; 255
    407c:	f9 01       	movw	r30, r18
    407e:	20 81       	ld	r18, Z
    4080:	31 81       	ldd	r19, Z+1	; 0x01
    4082:	fc 01       	movw	r30, r24
    4084:	31 83       	std	Z+1, r19	; 0x01
    4086:	20 83       	st	Z, r18
    4088:	ce 01       	movw	r24, r28
    408a:	8a 55       	subi	r24, 0x5A	; 90
    408c:	9f 4f       	sbci	r25, 0xFF	; 255
    408e:	fc 01       	movw	r30, r24
    4090:	80 81       	ld	r24, Z
    4092:	91 81       	ldd	r25, Z+1	; 0x01
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <main+0x1754>
    4098:	9e 01       	movw	r18, r28
    409a:	2a 55       	subi	r18, 0x5A	; 90
    409c:	3f 4f       	sbci	r19, 0xFF	; 255
    409e:	f9 01       	movw	r30, r18
    40a0:	91 83       	std	Z+1, r25	; 0x01
    40a2:	80 83       	st	Z, r24
							//display.LCD_Command(0xC0);
							print ++;
						}

						a = 'n';
						while(teclado.Percorre()){
    40a4:	ce 01       	movw	r24, r28
    40a6:	89 5e       	subi	r24, 0xE9	; 233
    40a8:	9e 4f       	sbci	r25, 0xFE	; 254
    40aa:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN8Keyboard8PercorreEv>
    40ae:	88 23       	and	r24, r24
    40b0:	09 f0       	breq	.+2      	; 0x40b4 <main+0x1774>
    40b2:	2f cf       	rjmp	.-418    	; 0x3f12 <main+0x15d2>
							led.toggle();
							_delay_ms(20);
						};
						a = teclado.retKey();
    40b4:	ce 01       	movw	r24, r28
    40b6:	89 5e       	subi	r24, 0xE9	; 233
    40b8:	9e 4f       	sbci	r25, 0xFE	; 254
    40ba:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN8Keyboard6retKeyEv>
    40be:	89 a3       	std	Y+33, r24	; 0x21
						_pos = 0;
    40c0:	1c 8a       	std	Y+20, r1	; 0x14
    40c2:	1b 8a       	std	Y+19, r1	; 0x13
						_pos2 = _pos+10;
    40c4:	8b 89       	ldd	r24, Y+19	; 0x13
    40c6:	9c 89       	ldd	r25, Y+20	; 0x14
    40c8:	0a 96       	adiw	r24, 0x0a	; 10
    40ca:	9e 8b       	std	Y+22, r25	; 0x16
    40cc:	8d 8b       	std	Y+21, r24	; 0x15
						_pos3 = _pos + 20;
    40ce:	8b 89       	ldd	r24, Y+19	; 0x13
    40d0:	9c 89       	ldd	r25, Y+20	; 0x14
    40d2:	44 96       	adiw	r24, 0x14	; 20
    40d4:	98 8f       	std	Y+24, r25	; 0x18
    40d6:	8f 8b       	std	Y+23, r24	; 0x17
								switch (a) {
    40d8:	89 a1       	ldd	r24, Y+33	; 0x21
    40da:	88 2f       	mov	r24, r24
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	82 34       	cpi	r24, 0x42	; 66
    40e0:	91 05       	cpc	r25, r1
    40e2:	09 f4       	brne	.+2      	; 0x40e6 <main+0x17a6>
    40e4:	2a c1       	rjmp	.+596    	; 0x433a <main+0x19fa>
    40e6:	83 34       	cpi	r24, 0x43	; 67
    40e8:	91 05       	cpc	r25, r1
    40ea:	24 f4       	brge	.+8      	; 0x40f4 <main+0x17b4>
    40ec:	81 34       	cpi	r24, 0x41	; 65
    40ee:	91 05       	cpc	r25, r1
    40f0:	51 f0       	breq	.+20     	; 0x4106 <main+0x17c6>
    40f2:	60 c3       	rjmp	.+1728   	; 0x47b4 <main+0x1e74>
    40f4:	83 34       	cpi	r24, 0x43	; 67
    40f6:	91 05       	cpc	r25, r1
    40f8:	09 f4       	brne	.+2      	; 0x40fc <main+0x17bc>
    40fa:	36 c2       	rjmp	.+1132   	; 0x4568 <main+0x1c28>
    40fc:	84 34       	cpi	r24, 0x44	; 68
    40fe:	91 05       	cpc	r25, r1
    4100:	09 f4       	brne	.+2      	; 0x4104 <main+0x17c4>
    4102:	49 c3       	rjmp	.+1682   	; 0x4796 <main+0x1e56>
    4104:	57 c3       	rjmp	.+1710   	; 0x47b4 <main+0x1e74>
									case 'A':
										if(eeprom.read(_pos2) != 'e'){
    4106:	2d 89       	ldd	r18, Y+21	; 0x15
    4108:	3e 89       	ldd	r19, Y+22	; 0x16
    410a:	ce 01       	movw	r24, r28
    410c:	87 5d       	subi	r24, 0xD7	; 215
    410e:	9e 4f       	sbci	r25, 0xFE	; 254
    4110:	b9 01       	movw	r22, r18
    4112:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    4116:	98 2f       	mov	r25, r24
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	95 36       	cpi	r25, 0x65	; 101
    411c:	09 f4       	brne	.+2      	; 0x4120 <main+0x17e0>
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	88 23       	and	r24, r24
    4122:	09 f4       	brne	.+2      	; 0x4126 <main+0x17e6>
    4124:	01 c1       	rjmp	.+514    	; 0x4328 <main+0x19e8>
										display.LCD_Clear();
    4126:	ce 01       	movw	r24, r28
    4128:	88 5d       	subi	r24, 0xD8	; 216
    412a:	9e 4f       	sbci	r25, 0xFE	; 254
    412c:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZN3LCD9LCD_ClearEv>
										display.LCD_String("Discando");
    4130:	ce 01       	movw	r24, r28
    4132:	88 5d       	subi	r24, 0xD8	; 216
    4134:	9e 4f       	sbci	r25, 0xFE	; 254
    4136:	65 ec       	ldi	r22, 0xC5	; 197
    4138:	72 e0       	ldi	r23, 0x02	; 2
    413a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
										uart.puts("discando ");
    413e:	ce 01       	movw	r24, r28
    4140:	88 58       	subi	r24, 0x88	; 136
    4142:	9e 4f       	sbci	r25, 0xFE	; 254
    4144:	6e ec       	ldi	r22, 0xCE	; 206
    4146:	72 e0       	ldi	r23, 0x02	; 2
    4148:	0f d4       	rcall	.+2078   	; 0x4968 <_ZN4UART4putsEPc>
										display.LCD_Command(0xC0);
    414a:	ce 01       	movw	r24, r28
    414c:	88 5d       	subi	r24, 0xD8	; 216
    414e:	9e 4f       	sbci	r25, 0xFE	; 254
    4150:	60 ec       	ldi	r22, 0xC0	; 192
    4152:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>

										for (uint8_t  i = 0; i < 9; i++){
    4156:	1c 8e       	std	Y+28, r1	; 0x1c
    4158:	e3 c0       	rjmp	.+454    	; 0x4320 <main+0x19e0>
											a = eeprom.read(_pos2);
    415a:	2d 89       	ldd	r18, Y+21	; 0x15
    415c:	3e 89       	ldd	r19, Y+22	; 0x16
    415e:	ce 01       	movw	r24, r28
    4160:	87 5d       	subi	r24, 0xD7	; 215
    4162:	9e 4f       	sbci	r25, 0xFE	; 254
    4164:	b9 01       	movw	r22, r18
    4166:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    416a:	89 a3       	std	Y+33, r24	; 0x21
											uart.put(a);
    416c:	ce 01       	movw	r24, r28
    416e:	88 58       	subi	r24, 0x88	; 136
    4170:	9e 4f       	sbci	r25, 0xFE	; 254
    4172:	69 a1       	ldd	r22, Y+33	; 0x21
    4174:	d7 d3       	rcall	.+1966   	; 0x4924 <_ZN4UART3putEh>
											display.LCD_Char(a);
    4176:	ce 01       	movw	r24, r28
    4178:	88 5d       	subi	r24, 0xD8	; 216
    417a:	9e 4f       	sbci	r25, 0xFE	; 254
    417c:	69 a1       	ldd	r22, Y+33	; 0x21
    417e:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN3LCD8LCD_CharEh>
											dtmf.send(a);
    4182:	ce 01       	movw	r24, r28
    4184:	89 5f       	subi	r24, 0xF9	; 249
    4186:	9e 4f       	sbci	r25, 0xFE	; 254
    4188:	69 a1       	ldd	r22, Y+33	; 0x21
    418a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN4DTMF4sendEc>
											_pos2++;
    418e:	8d 89       	ldd	r24, Y+21	; 0x15
    4190:	9e 89       	ldd	r25, Y+22	; 0x16
    4192:	01 96       	adiw	r24, 0x01	; 1
    4194:	9e 8b       	std	Y+22, r25	; 0x16
    4196:	8d 8b       	std	Y+21, r24	; 0x15
    4198:	9e 01       	movw	r18, r28
    419a:	28 55       	subi	r18, 0x58	; 88
    419c:	3f 4f       	sbci	r19, 0xFF	; 255
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	aa ef       	ldi	r26, 0xFA	; 250
    41a4:	b3 e4       	ldi	r27, 0x43	; 67
    41a6:	f9 01       	movw	r30, r18
    41a8:	80 83       	st	Z, r24
    41aa:	91 83       	std	Z+1, r25	; 0x01
    41ac:	a2 83       	std	Z+2, r26	; 0x02
    41ae:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    41b0:	8e 01       	movw	r16, r28
    41b2:	04 55       	subi	r16, 0x54	; 84
    41b4:	1f 4f       	sbci	r17, 0xFF	; 255
    41b6:	ce 01       	movw	r24, r28
    41b8:	88 55       	subi	r24, 0x58	; 88
    41ba:	9f 4f       	sbci	r25, 0xFF	; 255
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	4a e7       	ldi	r20, 0x7A	; 122
    41c2:	55 e4       	ldi	r21, 0x45	; 69
    41c4:	fc 01       	movw	r30, r24
    41c6:	60 81       	ld	r22, Z
    41c8:	71 81       	ldd	r23, Z+1	; 0x01
    41ca:	82 81       	ldd	r24, Z+2	; 0x02
    41cc:	93 81       	ldd	r25, Z+3	; 0x03
    41ce:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	f8 01       	movw	r30, r16
    41d8:	80 83       	st	Z, r24
    41da:	91 83       	std	Z+1, r25	; 0x01
    41dc:	a2 83       	std	Z+2, r26	; 0x02
    41de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41e0:	ce 01       	movw	r24, r28
    41e2:	84 55       	subi	r24, 0x54	; 84
    41e4:	9f 4f       	sbci	r25, 0xFF	; 255
    41e6:	20 e0       	ldi	r18, 0x00	; 0
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	40 e8       	ldi	r20, 0x80	; 128
    41ec:	5f e3       	ldi	r21, 0x3F	; 63
    41ee:	fc 01       	movw	r30, r24
    41f0:	60 81       	ld	r22, Z
    41f2:	71 81       	ldd	r23, Z+1	; 0x01
    41f4:	82 81       	ldd	r24, Z+2	; 0x02
    41f6:	93 81       	ldd	r25, Z+3	; 0x03
    41f8:	18 d7       	rcall	.+3632   	; 0x502a <__cmpsf2>
    41fa:	88 23       	and	r24, r24
    41fc:	4c f4       	brge	.+18     	; 0x4210 <main+0x18d0>
		__ticks = 1;
    41fe:	ce 01       	movw	r24, r28
    4200:	80 55       	subi	r24, 0x50	; 80
    4202:	9f 4f       	sbci	r25, 0xFF	; 255
    4204:	21 e0       	ldi	r18, 0x01	; 1
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	fc 01       	movw	r30, r24
    420a:	31 83       	std	Z+1, r19	; 0x01
    420c:	20 83       	st	Z, r18
    420e:	6b c0       	rjmp	.+214    	; 0x42e6 <main+0x19a6>
	else if (__tmp > 65535)
    4210:	ce 01       	movw	r24, r28
    4212:	84 55       	subi	r24, 0x54	; 84
    4214:	9f 4f       	sbci	r25, 0xFF	; 255
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	3f ef       	ldi	r19, 0xFF	; 255
    421a:	4f e7       	ldi	r20, 0x7F	; 127
    421c:	57 e4       	ldi	r21, 0x47	; 71
    421e:	fc 01       	movw	r30, r24
    4220:	60 81       	ld	r22, Z
    4222:	71 81       	ldd	r23, Z+1	; 0x01
    4224:	82 81       	ldd	r24, Z+2	; 0x02
    4226:	93 81       	ldd	r25, Z+3	; 0x03
    4228:	0e 94 5f 29 	call	0x52be	; 0x52be <__gesf2>
    422c:	18 16       	cp	r1, r24
    422e:	0c f0       	brlt	.+2      	; 0x4232 <main+0x18f2>
    4230:	49 c0       	rjmp	.+146    	; 0x42c4 <main+0x1984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4232:	ce 01       	movw	r24, r28
    4234:	88 55       	subi	r24, 0x58	; 88
    4236:	9f 4f       	sbci	r25, 0xFF	; 255
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	40 e2       	ldi	r20, 0x20	; 32
    423e:	51 e4       	ldi	r21, 0x41	; 65
    4240:	fc 01       	movw	r30, r24
    4242:	60 81       	ld	r22, Z
    4244:	71 81       	ldd	r23, Z+1	; 0x01
    4246:	82 81       	ldd	r24, Z+2	; 0x02
    4248:	93 81       	ldd	r25, Z+3	; 0x03
    424a:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsf3>
    424e:	dc 01       	movw	r26, r24
    4250:	cb 01       	movw	r24, r22
    4252:	8e 01       	movw	r16, r28
    4254:	00 55       	subi	r16, 0x50	; 80
    4256:	1f 4f       	sbci	r17, 0xFF	; 255
    4258:	bc 01       	movw	r22, r24
    425a:	cd 01       	movw	r24, r26
    425c:	52 d7       	rcall	.+3748   	; 0x5102 <__fixunssfsi>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	f8 01       	movw	r30, r16
    4264:	91 83       	std	Z+1, r25	; 0x01
    4266:	80 83       	st	Z, r24
    4268:	24 c0       	rjmp	.+72     	; 0x42b2 <main+0x1972>
    426a:	ce 01       	movw	r24, r28
    426c:	8e 54       	subi	r24, 0x4E	; 78
    426e:	9f 4f       	sbci	r25, 0xFF	; 255
    4270:	20 e9       	ldi	r18, 0x90	; 144
    4272:	31 e0       	ldi	r19, 0x01	; 1
    4274:	fc 01       	movw	r30, r24
    4276:	31 83       	std	Z+1, r19	; 0x01
    4278:	20 83       	st	Z, r18
    427a:	ce 01       	movw	r24, r28
    427c:	8e 54       	subi	r24, 0x4E	; 78
    427e:	9f 4f       	sbci	r25, 0xFF	; 255
    4280:	fc 01       	movw	r30, r24
    4282:	80 81       	ld	r24, Z
    4284:	91 81       	ldd	r25, Z+1	; 0x01
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	f1 f7       	brne	.-4      	; 0x4286 <main+0x1946>
    428a:	9e 01       	movw	r18, r28
    428c:	2e 54       	subi	r18, 0x4E	; 78
    428e:	3f 4f       	sbci	r19, 0xFF	; 255
    4290:	f9 01       	movw	r30, r18
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4296:	ce 01       	movw	r24, r28
    4298:	80 55       	subi	r24, 0x50	; 80
    429a:	9f 4f       	sbci	r25, 0xFF	; 255
    429c:	9e 01       	movw	r18, r28
    429e:	20 55       	subi	r18, 0x50	; 80
    42a0:	3f 4f       	sbci	r19, 0xFF	; 255
    42a2:	f9 01       	movw	r30, r18
    42a4:	20 81       	ld	r18, Z
    42a6:	31 81       	ldd	r19, Z+1	; 0x01
    42a8:	21 50       	subi	r18, 0x01	; 1
    42aa:	31 09       	sbc	r19, r1
    42ac:	fc 01       	movw	r30, r24
    42ae:	31 83       	std	Z+1, r19	; 0x01
    42b0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b2:	ce 01       	movw	r24, r28
    42b4:	80 55       	subi	r24, 0x50	; 80
    42b6:	9f 4f       	sbci	r25, 0xFF	; 255
    42b8:	fc 01       	movw	r30, r24
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	89 2b       	or	r24, r25
    42c0:	a1 f6       	brne	.-88     	; 0x426a <main+0x192a>
    42c2:	2b c0       	rjmp	.+86     	; 0x431a <main+0x19da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c4:	8e 01       	movw	r16, r28
    42c6:	00 55       	subi	r16, 0x50	; 80
    42c8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ca:	ce 01       	movw	r24, r28
    42cc:	84 55       	subi	r24, 0x54	; 84
    42ce:	9f 4f       	sbci	r25, 0xFF	; 255
    42d0:	fc 01       	movw	r30, r24
    42d2:	60 81       	ld	r22, Z
    42d4:	71 81       	ldd	r23, Z+1	; 0x01
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	13 d7       	rcall	.+3622   	; 0x5102 <__fixunssfsi>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	f8 01       	movw	r30, r16
    42e2:	91 83       	std	Z+1, r25	; 0x01
    42e4:	80 83       	st	Z, r24
    42e6:	ce 01       	movw	r24, r28
    42e8:	8c 54       	subi	r24, 0x4C	; 76
    42ea:	9f 4f       	sbci	r25, 0xFF	; 255
    42ec:	9e 01       	movw	r18, r28
    42ee:	20 55       	subi	r18, 0x50	; 80
    42f0:	3f 4f       	sbci	r19, 0xFF	; 255
    42f2:	f9 01       	movw	r30, r18
    42f4:	20 81       	ld	r18, Z
    42f6:	31 81       	ldd	r19, Z+1	; 0x01
    42f8:	fc 01       	movw	r30, r24
    42fa:	31 83       	std	Z+1, r19	; 0x01
    42fc:	20 83       	st	Z, r18
    42fe:	ce 01       	movw	r24, r28
    4300:	8c 54       	subi	r24, 0x4C	; 76
    4302:	9f 4f       	sbci	r25, 0xFF	; 255
    4304:	fc 01       	movw	r30, r24
    4306:	80 81       	ld	r24, Z
    4308:	91 81       	ldd	r25, Z+1	; 0x01
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	f1 f7       	brne	.-4      	; 0x430a <main+0x19ca>
    430e:	9e 01       	movw	r18, r28
    4310:	2c 54       	subi	r18, 0x4C	; 76
    4312:	3f 4f       	sbci	r19, 0xFF	; 255
    4314:	f9 01       	movw	r30, r18
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
										display.LCD_Clear();
										display.LCD_String("Discando");
										uart.puts("discando ");
										display.LCD_Command(0xC0);

										for (uint8_t  i = 0; i < 9; i++){
    431a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    431c:	8f 5f       	subi	r24, 0xFF	; 255
    431e:	8c 8f       	std	Y+28, r24	; 0x1c
    4320:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4322:	89 30       	cpi	r24, 0x09	; 9
    4324:	08 f4       	brcc	.+2      	; 0x4328 <main+0x19e8>
    4326:	19 cf       	rjmp	.-462    	; 0x415a <main+0x181a>
											dtmf.send(a);
											_pos2++;
											_delay_ms(500);
										}
										}
										_pos = 0;
    4328:	1c 8a       	std	Y+20, r1	; 0x14
    432a:	1b 8a       	std	Y+19, r1	; 0x13
										currentState = 1;
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
										//currentState =1;
										//uart.puts("Voltando para Idle");
										print = 0;
    4334:	1a 86       	std	Y+10, r1	; 0x0a
    4336:	19 86       	std	Y+9, r1	; 0x09
										//controle = 0;
										break;
    4338:	3d c2       	rjmp	.+1146   	; 0x47b4 <main+0x1e74>

									case 'B':
										if(eeprom.read(_pos3) != 'e'){
    433a:	2f 89       	ldd	r18, Y+23	; 0x17
    433c:	38 8d       	ldd	r19, Y+24	; 0x18
    433e:	ce 01       	movw	r24, r28
    4340:	87 5d       	subi	r24, 0xD7	; 215
    4342:	9e 4f       	sbci	r25, 0xFE	; 254
    4344:	b9 01       	movw	r22, r18
    4346:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    434a:	98 2f       	mov	r25, r24
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	95 36       	cpi	r25, 0x65	; 101
    4350:	09 f4       	brne	.+2      	; 0x4354 <main+0x1a14>
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	88 23       	and	r24, r24
    4356:	09 f4       	brne	.+2      	; 0x435a <main+0x1a1a>
    4358:	fe c0       	rjmp	.+508    	; 0x4556 <main+0x1c16>
										display.LCD_Clear();
    435a:	ce 01       	movw	r24, r28
    435c:	88 5d       	subi	r24, 0xD8	; 216
    435e:	9e 4f       	sbci	r25, 0xFE	; 254
    4360:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZN3LCD9LCD_ClearEv>
										display.LCD_String("Discando");
    4364:	ce 01       	movw	r24, r28
    4366:	88 5d       	subi	r24, 0xD8	; 216
    4368:	9e 4f       	sbci	r25, 0xFE	; 254
    436a:	65 ec       	ldi	r22, 0xC5	; 197
    436c:	72 e0       	ldi	r23, 0x02	; 2
    436e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
										uart.puts("discando ");
    4372:	ce 01       	movw	r24, r28
    4374:	88 58       	subi	r24, 0x88	; 136
    4376:	9e 4f       	sbci	r25, 0xFE	; 254
    4378:	6e ec       	ldi	r22, 0xCE	; 206
    437a:	72 e0       	ldi	r23, 0x02	; 2
    437c:	f5 d2       	rcall	.+1514   	; 0x4968 <_ZN4UART4putsEPc>
										display.LCD_Command(0xC0);
    437e:	ce 01       	movw	r24, r28
    4380:	88 5d       	subi	r24, 0xD8	; 216
    4382:	9e 4f       	sbci	r25, 0xFE	; 254
    4384:	60 ec       	ldi	r22, 0xC0	; 192
    4386:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
										for (uint8_t  i = 0; i < 9; i++){
    438a:	1d 8e       	std	Y+29, r1	; 0x1d
    438c:	e0 c0       	rjmp	.+448    	; 0x454e <main+0x1c0e>
											a = eeprom.read(_pos3);
    438e:	2f 89       	ldd	r18, Y+23	; 0x17
    4390:	38 8d       	ldd	r19, Y+24	; 0x18
    4392:	ce 01       	movw	r24, r28
    4394:	87 5d       	subi	r24, 0xD7	; 215
    4396:	9e 4f       	sbci	r25, 0xFE	; 254
    4398:	b9 01       	movw	r22, r18
    439a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    439e:	89 a3       	std	Y+33, r24	; 0x21
											dtmf.send(a);
    43a0:	ce 01       	movw	r24, r28
    43a2:	89 5f       	subi	r24, 0xF9	; 249
    43a4:	9e 4f       	sbci	r25, 0xFE	; 254
    43a6:	69 a1       	ldd	r22, Y+33	; 0x21
    43a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN4DTMF4sendEc>
											uart.put(a);
    43ac:	ce 01       	movw	r24, r28
    43ae:	88 58       	subi	r24, 0x88	; 136
    43b0:	9e 4f       	sbci	r25, 0xFE	; 254
    43b2:	69 a1       	ldd	r22, Y+33	; 0x21
    43b4:	b7 d2       	rcall	.+1390   	; 0x4924 <_ZN4UART3putEh>
											display.LCD_Char(a);
    43b6:	ce 01       	movw	r24, r28
    43b8:	88 5d       	subi	r24, 0xD8	; 216
    43ba:	9e 4f       	sbci	r25, 0xFE	; 254
    43bc:	69 a1       	ldd	r22, Y+33	; 0x21
    43be:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN3LCD8LCD_CharEh>
											_pos3++;
    43c2:	8f 89       	ldd	r24, Y+23	; 0x17
    43c4:	98 8d       	ldd	r25, Y+24	; 0x18
    43c6:	01 96       	adiw	r24, 0x01	; 1
    43c8:	98 8f       	std	Y+24, r25	; 0x18
    43ca:	8f 8b       	std	Y+23, r24	; 0x17
    43cc:	9e 01       	movw	r18, r28
    43ce:	2a 54       	subi	r18, 0x4A	; 74
    43d0:	3f 4f       	sbci	r19, 0xFF	; 255
    43d2:	80 e0       	ldi	r24, 0x00	; 0
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	aa ef       	ldi	r26, 0xFA	; 250
    43d8:	b3 e4       	ldi	r27, 0x43	; 67
    43da:	f9 01       	movw	r30, r18
    43dc:	80 83       	st	Z, r24
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	a2 83       	std	Z+2, r26	; 0x02
    43e2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    43e4:	8e 01       	movw	r16, r28
    43e6:	06 54       	subi	r16, 0x46	; 70
    43e8:	1f 4f       	sbci	r17, 0xFF	; 255
    43ea:	ce 01       	movw	r24, r28
    43ec:	8a 54       	subi	r24, 0x4A	; 74
    43ee:	9f 4f       	sbci	r25, 0xFF	; 255
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	4a e7       	ldi	r20, 0x7A	; 122
    43f6:	55 e4       	ldi	r21, 0x45	; 69
    43f8:	fc 01       	movw	r30, r24
    43fa:	60 81       	ld	r22, Z
    43fc:	71 81       	ldd	r23, Z+1	; 0x01
    43fe:	82 81       	ldd	r24, Z+2	; 0x02
    4400:	93 81       	ldd	r25, Z+3	; 0x03
    4402:	61 d7       	rcall	.+3778   	; 0x52c6 <__mulsf3>
    4404:	dc 01       	movw	r26, r24
    4406:	cb 01       	movw	r24, r22
    4408:	f8 01       	movw	r30, r16
    440a:	80 83       	st	Z, r24
    440c:	91 83       	std	Z+1, r25	; 0x01
    440e:	a2 83       	std	Z+2, r26	; 0x02
    4410:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4412:	ce 01       	movw	r24, r28
    4414:	86 54       	subi	r24, 0x46	; 70
    4416:	9f 4f       	sbci	r25, 0xFF	; 255
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	40 e8       	ldi	r20, 0x80	; 128
    441e:	5f e3       	ldi	r21, 0x3F	; 63
    4420:	fc 01       	movw	r30, r24
    4422:	60 81       	ld	r22, Z
    4424:	71 81       	ldd	r23, Z+1	; 0x01
    4426:	82 81       	ldd	r24, Z+2	; 0x02
    4428:	93 81       	ldd	r25, Z+3	; 0x03
    442a:	ff d5       	rcall	.+3070   	; 0x502a <__cmpsf2>
    442c:	88 23       	and	r24, r24
    442e:	4c f4       	brge	.+18     	; 0x4442 <main+0x1b02>
		__ticks = 1;
    4430:	ce 01       	movw	r24, r28
    4432:	82 54       	subi	r24, 0x42	; 66
    4434:	9f 4f       	sbci	r25, 0xFF	; 255
    4436:	21 e0       	ldi	r18, 0x01	; 1
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	fc 01       	movw	r30, r24
    443c:	31 83       	std	Z+1, r19	; 0x01
    443e:	20 83       	st	Z, r18
    4440:	69 c0       	rjmp	.+210    	; 0x4514 <main+0x1bd4>
	else if (__tmp > 65535)
    4442:	ce 01       	movw	r24, r28
    4444:	86 54       	subi	r24, 0x46	; 70
    4446:	9f 4f       	sbci	r25, 0xFF	; 255
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	3f ef       	ldi	r19, 0xFF	; 255
    444c:	4f e7       	ldi	r20, 0x7F	; 127
    444e:	57 e4       	ldi	r21, 0x47	; 71
    4450:	fc 01       	movw	r30, r24
    4452:	60 81       	ld	r22, Z
    4454:	71 81       	ldd	r23, Z+1	; 0x01
    4456:	82 81       	ldd	r24, Z+2	; 0x02
    4458:	93 81       	ldd	r25, Z+3	; 0x03
    445a:	31 d7       	rcall	.+3682   	; 0x52be <__gesf2>
    445c:	18 16       	cp	r1, r24
    445e:	0c f0       	brlt	.+2      	; 0x4462 <main+0x1b22>
    4460:	48 c0       	rjmp	.+144    	; 0x44f2 <main+0x1bb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4462:	ce 01       	movw	r24, r28
    4464:	8a 54       	subi	r24, 0x4A	; 74
    4466:	9f 4f       	sbci	r25, 0xFF	; 255
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e2       	ldi	r20, 0x20	; 32
    446e:	51 e4       	ldi	r21, 0x41	; 65
    4470:	fc 01       	movw	r30, r24
    4472:	60 81       	ld	r22, Z
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	82 81       	ldd	r24, Z+2	; 0x02
    4478:	93 81       	ldd	r25, Z+3	; 0x03
    447a:	25 d7       	rcall	.+3658   	; 0x52c6 <__mulsf3>
    447c:	dc 01       	movw	r26, r24
    447e:	cb 01       	movw	r24, r22
    4480:	8e 01       	movw	r16, r28
    4482:	02 54       	subi	r16, 0x42	; 66
    4484:	1f 4f       	sbci	r17, 0xFF	; 255
    4486:	bc 01       	movw	r22, r24
    4488:	cd 01       	movw	r24, r26
    448a:	3b d6       	rcall	.+3190   	; 0x5102 <__fixunssfsi>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	f8 01       	movw	r30, r16
    4492:	91 83       	std	Z+1, r25	; 0x01
    4494:	80 83       	st	Z, r24
    4496:	24 c0       	rjmp	.+72     	; 0x44e0 <main+0x1ba0>
    4498:	ce 01       	movw	r24, r28
    449a:	80 54       	subi	r24, 0x40	; 64
    449c:	9f 4f       	sbci	r25, 0xFF	; 255
    449e:	20 e9       	ldi	r18, 0x90	; 144
    44a0:	31 e0       	ldi	r19, 0x01	; 1
    44a2:	fc 01       	movw	r30, r24
    44a4:	31 83       	std	Z+1, r19	; 0x01
    44a6:	20 83       	st	Z, r18
    44a8:	ce 01       	movw	r24, r28
    44aa:	80 54       	subi	r24, 0x40	; 64
    44ac:	9f 4f       	sbci	r25, 0xFF	; 255
    44ae:	fc 01       	movw	r30, r24
    44b0:	80 81       	ld	r24, Z
    44b2:	91 81       	ldd	r25, Z+1	; 0x01
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	f1 f7       	brne	.-4      	; 0x44b4 <main+0x1b74>
    44b8:	9e 01       	movw	r18, r28
    44ba:	20 54       	subi	r18, 0x40	; 64
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    44be:	f9 01       	movw	r30, r18
    44c0:	91 83       	std	Z+1, r25	; 0x01
    44c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c4:	ce 01       	movw	r24, r28
    44c6:	82 54       	subi	r24, 0x42	; 66
    44c8:	9f 4f       	sbci	r25, 0xFF	; 255
    44ca:	9e 01       	movw	r18, r28
    44cc:	22 54       	subi	r18, 0x42	; 66
    44ce:	3f 4f       	sbci	r19, 0xFF	; 255
    44d0:	f9 01       	movw	r30, r18
    44d2:	20 81       	ld	r18, Z
    44d4:	31 81       	ldd	r19, Z+1	; 0x01
    44d6:	21 50       	subi	r18, 0x01	; 1
    44d8:	31 09       	sbc	r19, r1
    44da:	fc 01       	movw	r30, r24
    44dc:	31 83       	std	Z+1, r19	; 0x01
    44de:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e0:	ce 01       	movw	r24, r28
    44e2:	82 54       	subi	r24, 0x42	; 66
    44e4:	9f 4f       	sbci	r25, 0xFF	; 255
    44e6:	fc 01       	movw	r30, r24
    44e8:	80 81       	ld	r24, Z
    44ea:	91 81       	ldd	r25, Z+1	; 0x01
    44ec:	89 2b       	or	r24, r25
    44ee:	a1 f6       	brne	.-88     	; 0x4498 <main+0x1b58>
    44f0:	2b c0       	rjmp	.+86     	; 0x4548 <main+0x1c08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f2:	8e 01       	movw	r16, r28
    44f4:	02 54       	subi	r16, 0x42	; 66
    44f6:	1f 4f       	sbci	r17, 0xFF	; 255
    44f8:	ce 01       	movw	r24, r28
    44fa:	86 54       	subi	r24, 0x46	; 70
    44fc:	9f 4f       	sbci	r25, 0xFF	; 255
    44fe:	fc 01       	movw	r30, r24
    4500:	60 81       	ld	r22, Z
    4502:	71 81       	ldd	r23, Z+1	; 0x01
    4504:	82 81       	ldd	r24, Z+2	; 0x02
    4506:	93 81       	ldd	r25, Z+3	; 0x03
    4508:	fc d5       	rcall	.+3064   	; 0x5102 <__fixunssfsi>
    450a:	dc 01       	movw	r26, r24
    450c:	cb 01       	movw	r24, r22
    450e:	f8 01       	movw	r30, r16
    4510:	91 83       	std	Z+1, r25	; 0x01
    4512:	80 83       	st	Z, r24
    4514:	ce 01       	movw	r24, r28
    4516:	8e 53       	subi	r24, 0x3E	; 62
    4518:	9f 4f       	sbci	r25, 0xFF	; 255
    451a:	9e 01       	movw	r18, r28
    451c:	22 54       	subi	r18, 0x42	; 66
    451e:	3f 4f       	sbci	r19, 0xFF	; 255
    4520:	f9 01       	movw	r30, r18
    4522:	20 81       	ld	r18, Z
    4524:	31 81       	ldd	r19, Z+1	; 0x01
    4526:	fc 01       	movw	r30, r24
    4528:	31 83       	std	Z+1, r19	; 0x01
    452a:	20 83       	st	Z, r18
    452c:	ce 01       	movw	r24, r28
    452e:	8e 53       	subi	r24, 0x3E	; 62
    4530:	9f 4f       	sbci	r25, 0xFF	; 255
    4532:	fc 01       	movw	r30, r24
    4534:	80 81       	ld	r24, Z
    4536:	91 81       	ldd	r25, Z+1	; 0x01
    4538:	01 97       	sbiw	r24, 0x01	; 1
    453a:	f1 f7       	brne	.-4      	; 0x4538 <main+0x1bf8>
    453c:	9e 01       	movw	r18, r28
    453e:	2e 53       	subi	r18, 0x3E	; 62
    4540:	3f 4f       	sbci	r19, 0xFF	; 255
    4542:	f9 01       	movw	r30, r18
    4544:	91 83       	std	Z+1, r25	; 0x01
    4546:	80 83       	st	Z, r24
										if(eeprom.read(_pos3) != 'e'){
										display.LCD_Clear();
										display.LCD_String("Discando");
										uart.puts("discando ");
										display.LCD_Command(0xC0);
										for (uint8_t  i = 0; i < 9; i++){
    4548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    454a:	8f 5f       	subi	r24, 0xFF	; 255
    454c:	8d 8f       	std	Y+29, r24	; 0x1d
    454e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4550:	89 30       	cpi	r24, 0x09	; 9
    4552:	08 f4       	brcc	.+2      	; 0x4556 <main+0x1c16>
    4554:	1c cf       	rjmp	.-456    	; 0x438e <main+0x1a4e>
											display.LCD_Char(a);
											_pos3++;
											_delay_ms(500);
										}
										}
										_pos = 0;
    4556:	1c 8a       	std	Y+20, r1	; 0x14
    4558:	1b 8a       	std	Y+19, r1	; 0x13
										currentState = 1;
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	9a 83       	std	Y+2, r25	; 0x02
    4560:	89 83       	std	Y+1, r24	; 0x01
										print = 0;
    4562:	1a 86       	std	Y+10, r1	; 0x0a
    4564:	19 86       	std	Y+9, r1	; 0x09
										//controle = 0;
										break;
    4566:	26 c1       	rjmp	.+588    	; 0x47b4 <main+0x1e74>
									case 'C':
										if(eeprom.read(_pos) != 'e'){
    4568:	2b 89       	ldd	r18, Y+19	; 0x13
    456a:	3c 89       	ldd	r19, Y+20	; 0x14
    456c:	ce 01       	movw	r24, r28
    456e:	87 5d       	subi	r24, 0xD7	; 215
    4570:	9e 4f       	sbci	r25, 0xFE	; 254
    4572:	b9 01       	movw	r22, r18
    4574:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    4578:	98 2f       	mov	r25, r24
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	95 36       	cpi	r25, 0x65	; 101
    457e:	09 f4       	brne	.+2      	; 0x4582 <main+0x1c42>
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	88 23       	and	r24, r24
    4584:	09 f4       	brne	.+2      	; 0x4588 <main+0x1c48>
    4586:	fe c0       	rjmp	.+508    	; 0x4784 <main+0x1e44>
										display.LCD_Clear();
    4588:	ce 01       	movw	r24, r28
    458a:	88 5d       	subi	r24, 0xD8	; 216
    458c:	9e 4f       	sbci	r25, 0xFE	; 254
    458e:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZN3LCD9LCD_ClearEv>
										display.LCD_String("Discando");
    4592:	ce 01       	movw	r24, r28
    4594:	88 5d       	subi	r24, 0xD8	; 216
    4596:	9e 4f       	sbci	r25, 0xFE	; 254
    4598:	65 ec       	ldi	r22, 0xC5	; 197
    459a:	72 e0       	ldi	r23, 0x02	; 2
    459c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN3LCD10LCD_StringEPc>
										uart.puts("discando ");
    45a0:	ce 01       	movw	r24, r28
    45a2:	88 58       	subi	r24, 0x88	; 136
    45a4:	9e 4f       	sbci	r25, 0xFE	; 254
    45a6:	6e ec       	ldi	r22, 0xCE	; 206
    45a8:	72 e0       	ldi	r23, 0x02	; 2
    45aa:	de d1       	rcall	.+956    	; 0x4968 <_ZN4UART4putsEPc>
										display.LCD_Command(0xC0);
    45ac:	ce 01       	movw	r24, r28
    45ae:	88 5d       	subi	r24, 0xD8	; 216
    45b0:	9e 4f       	sbci	r25, 0xFE	; 254
    45b2:	60 ec       	ldi	r22, 0xC0	; 192
    45b4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN3LCD11LCD_CommandEh>
										for (uint8_t  i = 0; i < 9; i++){
    45b8:	1e 8e       	std	Y+30, r1	; 0x1e
    45ba:	e0 c0       	rjmp	.+448    	; 0x477c <main+0x1e3c>
											a = eeprom.read(_pos);
    45bc:	2b 89       	ldd	r18, Y+19	; 0x13
    45be:	3c 89       	ldd	r19, Y+20	; 0x14
    45c0:	ce 01       	movw	r24, r28
    45c2:	87 5d       	subi	r24, 0xD7	; 215
    45c4:	9e 4f       	sbci	r25, 0xFE	; 254
    45c6:	b9 01       	movw	r22, r18
    45c8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_ZN6EEPROM4readEPh>
    45cc:	89 a3       	std	Y+33, r24	; 0x21
											dtmf.send(a);
    45ce:	ce 01       	movw	r24, r28
    45d0:	89 5f       	subi	r24, 0xF9	; 249
    45d2:	9e 4f       	sbci	r25, 0xFE	; 254
    45d4:	69 a1       	ldd	r22, Y+33	; 0x21
    45d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN4DTMF4sendEc>
											uart.put(a);
    45da:	ce 01       	movw	r24, r28
    45dc:	88 58       	subi	r24, 0x88	; 136
    45de:	9e 4f       	sbci	r25, 0xFE	; 254
    45e0:	69 a1       	ldd	r22, Y+33	; 0x21
    45e2:	a0 d1       	rcall	.+832    	; 0x4924 <_ZN4UART3putEh>
											display.LCD_Char(a);
    45e4:	ce 01       	movw	r24, r28
    45e6:	88 5d       	subi	r24, 0xD8	; 216
    45e8:	9e 4f       	sbci	r25, 0xFE	; 254
    45ea:	69 a1       	ldd	r22, Y+33	; 0x21
    45ec:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZN3LCD8LCD_CharEh>

											_pos++;
    45f0:	8b 89       	ldd	r24, Y+19	; 0x13
    45f2:	9c 89       	ldd	r25, Y+20	; 0x14
    45f4:	01 96       	adiw	r24, 0x01	; 1
    45f6:	9c 8b       	std	Y+20, r25	; 0x14
    45f8:	8b 8b       	std	Y+19, r24	; 0x13
    45fa:	9e 01       	movw	r18, r28
    45fc:	2c 53       	subi	r18, 0x3C	; 60
    45fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	aa ef       	ldi	r26, 0xFA	; 250
    4606:	b3 e4       	ldi	r27, 0x43	; 67
    4608:	f9 01       	movw	r30, r18
    460a:	80 83       	st	Z, r24
    460c:	91 83       	std	Z+1, r25	; 0x01
    460e:	a2 83       	std	Z+2, r26	; 0x02
    4610:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4612:	8e 01       	movw	r16, r28
    4614:	08 53       	subi	r16, 0x38	; 56
    4616:	1f 4f       	sbci	r17, 0xFF	; 255
    4618:	ce 01       	movw	r24, r28
    461a:	8c 53       	subi	r24, 0x3C	; 60
    461c:	9f 4f       	sbci	r25, 0xFF	; 255
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	4a e7       	ldi	r20, 0x7A	; 122
    4624:	55 e4       	ldi	r21, 0x45	; 69
    4626:	fc 01       	movw	r30, r24
    4628:	60 81       	ld	r22, Z
    462a:	71 81       	ldd	r23, Z+1	; 0x01
    462c:	82 81       	ldd	r24, Z+2	; 0x02
    462e:	93 81       	ldd	r25, Z+3	; 0x03
    4630:	4a d6       	rcall	.+3220   	; 0x52c6 <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	f8 01       	movw	r30, r16
    4638:	80 83       	st	Z, r24
    463a:	91 83       	std	Z+1, r25	; 0x01
    463c:	a2 83       	std	Z+2, r26	; 0x02
    463e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4640:	ce 01       	movw	r24, r28
    4642:	88 53       	subi	r24, 0x38	; 56
    4644:	9f 4f       	sbci	r25, 0xFF	; 255
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	40 e8       	ldi	r20, 0x80	; 128
    464c:	5f e3       	ldi	r21, 0x3F	; 63
    464e:	fc 01       	movw	r30, r24
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	e8 d4       	rcall	.+2512   	; 0x502a <__cmpsf2>
    465a:	88 23       	and	r24, r24
    465c:	4c f4       	brge	.+18     	; 0x4670 <main+0x1d30>
		__ticks = 1;
    465e:	ce 01       	movw	r24, r28
    4660:	84 53       	subi	r24, 0x34	; 52
    4662:	9f 4f       	sbci	r25, 0xFF	; 255
    4664:	21 e0       	ldi	r18, 0x01	; 1
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	fc 01       	movw	r30, r24
    466a:	31 83       	std	Z+1, r19	; 0x01
    466c:	20 83       	st	Z, r18
    466e:	69 c0       	rjmp	.+210    	; 0x4742 <main+0x1e02>
	else if (__tmp > 65535)
    4670:	ce 01       	movw	r24, r28
    4672:	88 53       	subi	r24, 0x38	; 56
    4674:	9f 4f       	sbci	r25, 0xFF	; 255
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	3f ef       	ldi	r19, 0xFF	; 255
    467a:	4f e7       	ldi	r20, 0x7F	; 127
    467c:	57 e4       	ldi	r21, 0x47	; 71
    467e:	fc 01       	movw	r30, r24
    4680:	60 81       	ld	r22, Z
    4682:	71 81       	ldd	r23, Z+1	; 0x01
    4684:	82 81       	ldd	r24, Z+2	; 0x02
    4686:	93 81       	ldd	r25, Z+3	; 0x03
    4688:	1a d6       	rcall	.+3124   	; 0x52be <__gesf2>
    468a:	18 16       	cp	r1, r24
    468c:	0c f0       	brlt	.+2      	; 0x4690 <main+0x1d50>
    468e:	48 c0       	rjmp	.+144    	; 0x4720 <main+0x1de0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4690:	ce 01       	movw	r24, r28
    4692:	8c 53       	subi	r24, 0x3C	; 60
    4694:	9f 4f       	sbci	r25, 0xFF	; 255
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	40 e2       	ldi	r20, 0x20	; 32
    469c:	51 e4       	ldi	r21, 0x41	; 65
    469e:	fc 01       	movw	r30, r24
    46a0:	60 81       	ld	r22, Z
    46a2:	71 81       	ldd	r23, Z+1	; 0x01
    46a4:	82 81       	ldd	r24, Z+2	; 0x02
    46a6:	93 81       	ldd	r25, Z+3	; 0x03
    46a8:	0e d6       	rcall	.+3100   	; 0x52c6 <__mulsf3>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	8e 01       	movw	r16, r28
    46b0:	04 53       	subi	r16, 0x34	; 52
    46b2:	1f 4f       	sbci	r17, 0xFF	; 255
    46b4:	bc 01       	movw	r22, r24
    46b6:	cd 01       	movw	r24, r26
    46b8:	24 d5       	rcall	.+2632   	; 0x5102 <__fixunssfsi>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	f8 01       	movw	r30, r16
    46c0:	91 83       	std	Z+1, r25	; 0x01
    46c2:	80 83       	st	Z, r24
    46c4:	24 c0       	rjmp	.+72     	; 0x470e <main+0x1dce>
    46c6:	ce 01       	movw	r24, r28
    46c8:	82 53       	subi	r24, 0x32	; 50
    46ca:	9f 4f       	sbci	r25, 0xFF	; 255
    46cc:	20 e9       	ldi	r18, 0x90	; 144
    46ce:	31 e0       	ldi	r19, 0x01	; 1
    46d0:	fc 01       	movw	r30, r24
    46d2:	31 83       	std	Z+1, r19	; 0x01
    46d4:	20 83       	st	Z, r18
    46d6:	ce 01       	movw	r24, r28
    46d8:	82 53       	subi	r24, 0x32	; 50
    46da:	9f 4f       	sbci	r25, 0xFF	; 255
    46dc:	fc 01       	movw	r30, r24
    46de:	80 81       	ld	r24, Z
    46e0:	91 81       	ldd	r25, Z+1	; 0x01
    46e2:	01 97       	sbiw	r24, 0x01	; 1
    46e4:	f1 f7       	brne	.-4      	; 0x46e2 <main+0x1da2>
    46e6:	9e 01       	movw	r18, r28
    46e8:	22 53       	subi	r18, 0x32	; 50
    46ea:	3f 4f       	sbci	r19, 0xFF	; 255
    46ec:	f9 01       	movw	r30, r18
    46ee:	91 83       	std	Z+1, r25	; 0x01
    46f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f2:	ce 01       	movw	r24, r28
    46f4:	84 53       	subi	r24, 0x34	; 52
    46f6:	9f 4f       	sbci	r25, 0xFF	; 255
    46f8:	9e 01       	movw	r18, r28
    46fa:	24 53       	subi	r18, 0x34	; 52
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
    46fe:	f9 01       	movw	r30, r18
    4700:	20 81       	ld	r18, Z
    4702:	31 81       	ldd	r19, Z+1	; 0x01
    4704:	21 50       	subi	r18, 0x01	; 1
    4706:	31 09       	sbc	r19, r1
    4708:	fc 01       	movw	r30, r24
    470a:	31 83       	std	Z+1, r19	; 0x01
    470c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    470e:	ce 01       	movw	r24, r28
    4710:	84 53       	subi	r24, 0x34	; 52
    4712:	9f 4f       	sbci	r25, 0xFF	; 255
    4714:	fc 01       	movw	r30, r24
    4716:	80 81       	ld	r24, Z
    4718:	91 81       	ldd	r25, Z+1	; 0x01
    471a:	89 2b       	or	r24, r25
    471c:	a1 f6       	brne	.-88     	; 0x46c6 <main+0x1d86>
    471e:	2b c0       	rjmp	.+86     	; 0x4776 <main+0x1e36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4720:	8e 01       	movw	r16, r28
    4722:	04 53       	subi	r16, 0x34	; 52
    4724:	1f 4f       	sbci	r17, 0xFF	; 255
    4726:	ce 01       	movw	r24, r28
    4728:	88 53       	subi	r24, 0x38	; 56
    472a:	9f 4f       	sbci	r25, 0xFF	; 255
    472c:	fc 01       	movw	r30, r24
    472e:	60 81       	ld	r22, Z
    4730:	71 81       	ldd	r23, Z+1	; 0x01
    4732:	82 81       	ldd	r24, Z+2	; 0x02
    4734:	93 81       	ldd	r25, Z+3	; 0x03
    4736:	e5 d4       	rcall	.+2506   	; 0x5102 <__fixunssfsi>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	f8 01       	movw	r30, r16
    473e:	91 83       	std	Z+1, r25	; 0x01
    4740:	80 83       	st	Z, r24
    4742:	ce 01       	movw	r24, r28
    4744:	80 53       	subi	r24, 0x30	; 48
    4746:	9f 4f       	sbci	r25, 0xFF	; 255
    4748:	9e 01       	movw	r18, r28
    474a:	24 53       	subi	r18, 0x34	; 52
    474c:	3f 4f       	sbci	r19, 0xFF	; 255
    474e:	f9 01       	movw	r30, r18
    4750:	20 81       	ld	r18, Z
    4752:	31 81       	ldd	r19, Z+1	; 0x01
    4754:	fc 01       	movw	r30, r24
    4756:	31 83       	std	Z+1, r19	; 0x01
    4758:	20 83       	st	Z, r18
    475a:	ce 01       	movw	r24, r28
    475c:	80 53       	subi	r24, 0x30	; 48
    475e:	9f 4f       	sbci	r25, 0xFF	; 255
    4760:	fc 01       	movw	r30, r24
    4762:	80 81       	ld	r24, Z
    4764:	91 81       	ldd	r25, Z+1	; 0x01
    4766:	01 97       	sbiw	r24, 0x01	; 1
    4768:	f1 f7       	brne	.-4      	; 0x4766 <main+0x1e26>
    476a:	9e 01       	movw	r18, r28
    476c:	20 53       	subi	r18, 0x30	; 48
    476e:	3f 4f       	sbci	r19, 0xFF	; 255
    4770:	f9 01       	movw	r30, r18
    4772:	91 83       	std	Z+1, r25	; 0x01
    4774:	80 83       	st	Z, r24
										if(eeprom.read(_pos) != 'e'){
										display.LCD_Clear();
										display.LCD_String("Discando");
										uart.puts("discando ");
										display.LCD_Command(0xC0);
										for (uint8_t  i = 0; i < 9; i++){
    4776:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4778:	8f 5f       	subi	r24, 0xFF	; 255
    477a:	8e 8f       	std	Y+30, r24	; 0x1e
    477c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    477e:	89 30       	cpi	r24, 0x09	; 9
    4780:	08 f4       	brcc	.+2      	; 0x4784 <main+0x1e44>
    4782:	1c cf       	rjmp	.-456    	; 0x45bc <main+0x1c7c>

											_pos++;
											_delay_ms(500);
										}
										}
										_pos = 0;
    4784:	1c 8a       	std	Y+20, r1	; 0x14
    4786:	1b 8a       	std	Y+19, r1	; 0x13
										print = 0;
    4788:	1a 86       	std	Y+10, r1	; 0x0a
    478a:	19 86       	std	Y+9, r1	; 0x09
										currentState = 1;
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	9a 83       	std	Y+2, r25	; 0x02
    4792:	89 83       	std	Y+1, r24	; 0x01
									break;
    4794:	0f c0       	rjmp	.+30     	; 0x47b4 <main+0x1e74>

									case 'D':
										currentState = 1;
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	9a 83       	std	Y+2, r25	; 0x02
    479c:	89 83       	std	Y+1, r24	; 0x01
										uart.puts("Volt.DSeq");
    479e:	ce 01       	movw	r24, r28
    47a0:	88 58       	subi	r24, 0x88	; 136
    47a2:	9e 4f       	sbci	r25, 0xFE	; 254
    47a4:	68 ed       	ldi	r22, 0xD8	; 216
    47a6:	72 e0       	ldi	r23, 0x02	; 2
    47a8:	df d0       	rcall	.+446    	; 0x4968 <_ZN4UART4putsEPc>
										print = 0;
    47aa:	1a 86       	std	Y+10, r1	; 0x0a
    47ac:	19 86       	std	Y+9, r1	; 0x09
										controle = 0;
    47ae:	1c 86       	std	Y+12, r1	; 0x0c
    47b0:	1b 86       	std	Y+11, r1	; 0x0b
										break;
    47b2:	00 00       	nop
    47b4:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <main+0x368>

000047b8 <_ZN4FilaIhLi10EEC1Ev>:
#define FILA_H_

template <typename T, int cap> class Fila {

public:
	Fila() {
    47b8:	cf 93       	push	r28
    47ba:	df 93       	push	r29
    47bc:	1f 92       	push	r1
    47be:	1f 92       	push	r1
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
    47c4:	9a 83       	std	Y+2, r25	; 0x02
    47c6:	89 83       	std	Y+1, r24	; 0x01
		_inicio = 0;
    47c8:	89 81       	ldd	r24, Y+1	; 0x01
    47ca:	9a 81       	ldd	r25, Y+2	; 0x02
    47cc:	fc 01       	movw	r30, r24
    47ce:	13 86       	std	Z+11, r1	; 0x0b
    47d0:	12 86       	std	Z+10, r1	; 0x0a
		_final = 0;
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	9a 81       	ldd	r25, Y+2	; 0x02
    47d6:	fc 01       	movw	r30, r24
    47d8:	15 86       	std	Z+13, r1	; 0x0d
    47da:	14 86       	std	Z+12, r1	; 0x0c
		_N = 0;
    47dc:	89 81       	ldd	r24, Y+1	; 0x01
    47de:	9a 81       	ldd	r25, Y+2	; 0x02
    47e0:	fc 01       	movw	r30, r24
    47e2:	17 86       	std	Z+15, r1	; 0x0f
    47e4:	16 86       	std	Z+14, r1	; 0x0e
	}
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	08 95       	ret

000047f0 <_ZN4FilaIhLi10EE9enfileiraEh>:

	void enfileira(T data){
    47f0:	cf 93       	push	r28
    47f2:	df 93       	push	r29
    47f4:	00 d0       	rcall	.+0      	; 0x47f6 <_ZN4FilaIhLi10EE9enfileiraEh+0x6>
    47f6:	cd b7       	in	r28, 0x3d	; 61
    47f8:	de b7       	in	r29, 0x3e	; 62
    47fa:	9a 83       	std	Y+2, r25	; 0x02
    47fc:	89 83       	std	Y+1, r24	; 0x01
    47fe:	6b 83       	std	Y+3, r22	; 0x03

		_buffer[_final] = data;
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	9a 81       	ldd	r25, Y+2	; 0x02
    4804:	fc 01       	movw	r30, r24
    4806:	84 85       	ldd	r24, Z+12	; 0x0c
    4808:	95 85       	ldd	r25, Z+13	; 0x0d
    480a:	29 81       	ldd	r18, Y+1	; 0x01
    480c:	3a 81       	ldd	r19, Y+2	; 0x02
    480e:	82 0f       	add	r24, r18
    4810:	93 1f       	adc	r25, r19
    4812:	2b 81       	ldd	r18, Y+3	; 0x03
    4814:	fc 01       	movw	r30, r24
    4816:	20 83       	st	Z, r18
		_final++;
    4818:	89 81       	ldd	r24, Y+1	; 0x01
    481a:	9a 81       	ldd	r25, Y+2	; 0x02
    481c:	fc 01       	movw	r30, r24
    481e:	84 85       	ldd	r24, Z+12	; 0x0c
    4820:	95 85       	ldd	r25, Z+13	; 0x0d
    4822:	9c 01       	movw	r18, r24
    4824:	2f 5f       	subi	r18, 0xFF	; 255
    4826:	3f 4f       	sbci	r19, 0xFF	; 255
    4828:	89 81       	ldd	r24, Y+1	; 0x01
    482a:	9a 81       	ldd	r25, Y+2	; 0x02
    482c:	fc 01       	movw	r30, r24
    482e:	35 87       	std	Z+13, r19	; 0x0d
    4830:	24 87       	std	Z+12, r18	; 0x0c
		_N++;
    4832:	89 81       	ldd	r24, Y+1	; 0x01
    4834:	9a 81       	ldd	r25, Y+2	; 0x02
    4836:	fc 01       	movw	r30, r24
    4838:	86 85       	ldd	r24, Z+14	; 0x0e
    483a:	97 85       	ldd	r25, Z+15	; 0x0f
    483c:	9c 01       	movw	r18, r24
    483e:	2f 5f       	subi	r18, 0xFF	; 255
    4840:	3f 4f       	sbci	r19, 0xFF	; 255
    4842:	89 81       	ldd	r24, Y+1	; 0x01
    4844:	9a 81       	ldd	r25, Y+2	; 0x02
    4846:	fc 01       	movw	r30, r24
    4848:	37 87       	std	Z+15, r19	; 0x0f
    484a:	26 87       	std	Z+14, r18	; 0x0e
		 if (_final == cap) _final = 0;
    484c:	89 81       	ldd	r24, Y+1	; 0x01
    484e:	9a 81       	ldd	r25, Y+2	; 0x02
    4850:	fc 01       	movw	r30, r24
    4852:	84 85       	ldd	r24, Z+12	; 0x0c
    4854:	95 85       	ldd	r25, Z+13	; 0x0d
    4856:	0a 97       	sbiw	r24, 0x0a	; 10
    4858:	29 f4       	brne	.+10     	; 0x4864 <_ZN4FilaIhLi10EE9enfileiraEh+0x74>
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	fc 01       	movw	r30, r24
    4860:	15 86       	std	Z+13, r1	; 0x0d
    4862:	14 86       	std	Z+12, r1	; 0x0c
	}
    4864:	0f 90       	pop	r0
    4866:	0f 90       	pop	r0
    4868:	0f 90       	pop	r0
    486a:	df 91       	pop	r29
    486c:	cf 91       	pop	r28
    486e:	08 95       	ret

00004870 <_ZN4UARTC1EhmNS_7SPEED_tENS_10DATABITS_tENS_8PARITY_tENS_10STOPBITS_tE>:


/**
 * Construtor da classe UART
 */
UART::UART(uint8_t id, uint32_t baud, UART::SPEED_t speed, UART::DATABITS_t db, UART::PARITY_t parity, UART::STOPBITS_t sb) {
    4870:	af 92       	push	r10
    4872:	cf 92       	push	r12
    4874:	ef 92       	push	r14
    4876:	0f 93       	push	r16
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	2b 97       	sbiw	r28, 0x0b	; 11
    4882:	0f b6       	in	r0, 0x3f	; 63
    4884:	f8 94       	cli
    4886:	de bf       	out	0x3e, r29	; 62
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	9a 83       	std	Y+2, r25	; 0x02
    488e:	89 83       	std	Y+1, r24	; 0x01
    4890:	6b 83       	std	Y+3, r22	; 0x03
    4892:	2c 83       	std	Y+4, r18	; 0x04
    4894:	3d 83       	std	Y+5, r19	; 0x05
    4896:	4e 83       	std	Y+6, r20	; 0x06
    4898:	5f 83       	std	Y+7, r21	; 0x07
    489a:	08 87       	std	Y+8, r16	; 0x08
    489c:	e9 86       	std	Y+9, r14	; 0x09
    489e:	ca 86       	std	Y+10, r12	; 0x0a
    48a0:	ab 86       	std	Y+11, r10	; 0x0b
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	9a 81       	ldd	r25, Y+2	; 0x02
    48a6:	02 96       	adiw	r24, 0x02	; 2
    48a8:	87 df       	rcall	.-242    	; 0x47b8 <_ZN4FilaIhLi10EEC1Ev>
    48aa:	89 81       	ldd	r24, Y+1	; 0x01
    48ac:	9a 81       	ldd	r25, Y+2	; 0x02
    48ae:	42 96       	adiw	r24, 0x12	; 18
    48b0:	83 df       	rcall	.-250    	; 0x47b8 <_ZN4FilaIhLi10EEC1Ev>
	_serial = UART_MAPPING::AllUarts[id];
    48b2:	8b 81       	ldd	r24, Y+3	; 0x03
    48b4:	88 2f       	mov	r24, r24
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	88 0f       	add	r24, r24
    48ba:	99 1f       	adc	r25, r25
    48bc:	8a 5e       	subi	r24, 0xEA	; 234
    48be:	9d 4f       	sbci	r25, 0xFD	; 253
    48c0:	dc 01       	movw	r26, r24
    48c2:	2d 91       	ld	r18, X+
    48c4:	3c 91       	ld	r19, X
    48c6:	89 81       	ldd	r24, Y+1	; 0x01
    48c8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ca:	fc 01       	movw	r30, r24
    48cc:	31 83       	std	Z+1, r19	; 0x01
    48ce:	20 83       	st	Z, r18
	_serial->definirUart(baud, speed, db, parity, sb);
    48d0:	89 81       	ldd	r24, Y+1	; 0x01
    48d2:	9a 81       	ldd	r25, Y+2	; 0x02
    48d4:	dc 01       	movw	r26, r24
    48d6:	ed 91       	ld	r30, X+
    48d8:	fc 91       	ld	r31, X
    48da:	8c 81       	ldd	r24, Y+4	; 0x04
    48dc:	9d 81       	ldd	r25, Y+5	; 0x05
    48de:	ae 81       	ldd	r26, Y+6	; 0x06
    48e0:	bf 81       	ldd	r27, Y+7	; 0x07
    48e2:	cb 84       	ldd	r12, Y+11	; 0x0b
    48e4:	ea 84       	ldd	r14, Y+10	; 0x0a
    48e6:	09 85       	ldd	r16, Y+9	; 0x09
    48e8:	28 85       	ldd	r18, Y+8	; 0x08
    48ea:	ac 01       	movw	r20, r24
    48ec:	bd 01       	movw	r22, r26
    48ee:	cf 01       	movw	r24, r30
    48f0:	92 d2       	rcall	.+1316   	; 0x4e16 <_ZN12UART_MAPPING12UART_Mapping11definirUartEmhhhh>
	uart_singleton[id] = this;
    48f2:	8b 81       	ldd	r24, Y+3	; 0x03
    48f4:	88 2f       	mov	r24, r24
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	88 0f       	add	r24, r24
    48fa:	99 1f       	adc	r25, r25
    48fc:	8e 57       	subi	r24, 0x7E	; 126
    48fe:	9c 4f       	sbci	r25, 0xFC	; 252
    4900:	29 81       	ldd	r18, Y+1	; 0x01
    4902:	3a 81       	ldd	r19, Y+2	; 0x02
    4904:	fc 01       	movw	r30, r24
    4906:	31 83       	std	Z+1, r19	; 0x01
    4908:	20 83       	st	Z, r18
}
    490a:	2b 96       	adiw	r28, 0x0b	; 11
    490c:	0f b6       	in	r0, 0x3f	; 63
    490e:	f8 94       	cli
    4910:	de bf       	out	0x3e, r29	; 62
    4912:	0f be       	out	0x3f, r0	; 63
    4914:	cd bf       	out	0x3d, r28	; 61
    4916:	df 91       	pop	r29
    4918:	cf 91       	pop	r28
    491a:	0f 91       	pop	r16
    491c:	ef 90       	pop	r14
    491e:	cf 90       	pop	r12
    4920:	af 90       	pop	r10
    4922:	08 95       	ret

00004924 <_ZN4UART3putEh>:

/**
 * Adiciona dados na fila de transmissão
 * e ativa a interrupção.
 */
void UART::put(uint8_t data) {
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	00 d0       	rcall	.+0      	; 0x492a <_ZN4UART3putEh+0x6>
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	9a 83       	std	Y+2, r25	; 0x02
    4930:	89 83       	std	Y+1, r24	; 0x01
    4932:	6b 83       	std	Y+3, r22	; 0x03
	if(!_tx.cheia()){
    4934:	89 81       	ldd	r24, Y+1	; 0x01
    4936:	9a 81       	ldd	r25, Y+2	; 0x02
    4938:	42 96       	adiw	r24, 0x12	; 18
    493a:	56 d2       	rcall	.+1196   	; 0x4de8 <_ZN4FilaIhLi10EE5cheiaEv>
    493c:	98 2f       	mov	r25, r24
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	89 27       	eor	r24, r25
    4942:	88 23       	and	r24, r24
    4944:	59 f0       	breq	.+22     	; 0x495c <_ZN4UART3putEh+0x38>
		_tx.enfileira(data);
    4946:	89 81       	ldd	r24, Y+1	; 0x01
    4948:	9a 81       	ldd	r25, Y+2	; 0x02
    494a:	42 96       	adiw	r24, 0x12	; 18
    494c:	6b 81       	ldd	r22, Y+3	; 0x03
    494e:	50 df       	rcall	.-352    	; 0x47f0 <_ZN4FilaIhLi10EE9enfileiraEh>
		_serial->ativaInt();
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	9a 81       	ldd	r25, Y+2	; 0x02
    4954:	fc 01       	movw	r30, r24
    4956:	80 81       	ld	r24, Z
    4958:	91 81       	ldd	r25, Z+1	; 0x01
    495a:	0f d3       	rcall	.+1566   	; 0x4f7a <_ZN12UART_MAPPING12UART_Mapping8ativaIntEv>
	}
}
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	0f 90       	pop	r0
    4962:	df 91       	pop	r29
    4964:	cf 91       	pop	r28
    4966:	08 95       	ret

00004968 <_ZN4UART4putsEPc>:

/**
 * Transmite uma string, adicioninado-a na
 * fila de transmissão através da função put().
 */
void UART::puts(char data[]) {
    4968:	cf 93       	push	r28
    496a:	df 93       	push	r29
    496c:	00 d0       	rcall	.+0      	; 0x496e <_ZN4UART4putsEPc+0x6>
    496e:	00 d0       	rcall	.+0      	; 0x4970 <_ZN4UART4putsEPc+0x8>
    4970:	cd b7       	in	r28, 0x3d	; 61
    4972:	de b7       	in	r29, 0x3e	; 62
    4974:	9c 83       	std	Y+4, r25	; 0x04
    4976:	8b 83       	std	Y+3, r24	; 0x03
    4978:	7e 83       	std	Y+6, r23	; 0x06
    497a:	6d 83       	std	Y+5, r22	; 0x05
	int i = 0;
    497c:	1a 82       	std	Y+2, r1	; 0x02
    497e:	19 82       	std	Y+1, r1	; 0x01
	while(data[i] != 0){
    4980:	11 c0       	rjmp	.+34     	; 0x49a4 <_ZN4UART4putsEPc+0x3c>
		put(data[i]);
    4982:	89 81       	ldd	r24, Y+1	; 0x01
    4984:	9a 81       	ldd	r25, Y+2	; 0x02
    4986:	2d 81       	ldd	r18, Y+5	; 0x05
    4988:	3e 81       	ldd	r19, Y+6	; 0x06
    498a:	82 0f       	add	r24, r18
    498c:	93 1f       	adc	r25, r19
    498e:	fc 01       	movw	r30, r24
    4990:	20 81       	ld	r18, Z
    4992:	8b 81       	ldd	r24, Y+3	; 0x03
    4994:	9c 81       	ldd	r25, Y+4	; 0x04
    4996:	62 2f       	mov	r22, r18
    4998:	c5 df       	rcall	.-118    	; 0x4924 <_ZN4UART3putEh>
		i++;
    499a:	89 81       	ldd	r24, Y+1	; 0x01
    499c:	9a 81       	ldd	r25, Y+2	; 0x02
    499e:	01 96       	adiw	r24, 0x01	; 1
    49a0:	9a 83       	std	Y+2, r25	; 0x02
    49a2:	89 83       	std	Y+1, r24	; 0x01
 * Transmite uma string, adicioninado-a na
 * fila de transmissão através da função put().
 */
void UART::puts(char data[]) {
	int i = 0;
	while(data[i] != 0){
    49a4:	89 81       	ldd	r24, Y+1	; 0x01
    49a6:	9a 81       	ldd	r25, Y+2	; 0x02
    49a8:	2d 81       	ldd	r18, Y+5	; 0x05
    49aa:	3e 81       	ldd	r19, Y+6	; 0x06
    49ac:	82 0f       	add	r24, r18
    49ae:	93 1f       	adc	r25, r19
    49b0:	fc 01       	movw	r30, r24
    49b2:	80 81       	ld	r24, Z
    49b4:	88 23       	and	r24, r24
    49b6:	29 f7       	brne	.-54     	; 0x4982 <_ZN4UART4putsEPc+0x1a>
		put(data[i]);
		i++;
	}
}
    49b8:	26 96       	adiw	r28, 0x06	; 6
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	de bf       	out	0x3e, r29	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	cd bf       	out	0x3d, r28	; 61
    49c4:	df 91       	pop	r29
    49c6:	cf 91       	pop	r28
    49c8:	08 95       	ret

000049ca <_ZN4UART15rxc_isr_handlerEh>:
/**
 * Função para tratamento da recepção (RX)
 * invocada pelas interrupções da respectiva
 * serial utilizada.
 */
void UART::rxc_isr_handler(uint8_t id) {
    49ca:	cf 93       	push	r28
    49cc:	df 93       	push	r29
    49ce:	1f 92       	push	r1
    49d0:	cd b7       	in	r28, 0x3d	; 61
    49d2:	de b7       	in	r29, 0x3e	; 62
    49d4:	89 83       	std	Y+1, r24	; 0x01
	if(!uart_singleton[id]->_rx.cheia()){
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	88 2f       	mov	r24, r24
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	88 0f       	add	r24, r24
    49de:	99 1f       	adc	r25, r25
    49e0:	8e 57       	subi	r24, 0x7E	; 126
    49e2:	9c 4f       	sbci	r25, 0xFC	; 252
    49e4:	fc 01       	movw	r30, r24
    49e6:	80 81       	ld	r24, Z
    49e8:	91 81       	ldd	r25, Z+1	; 0x01
    49ea:	02 96       	adiw	r24, 0x02	; 2
    49ec:	fd d1       	rcall	.+1018   	; 0x4de8 <_ZN4FilaIhLi10EE5cheiaEv>
    49ee:	98 2f       	mov	r25, r24
    49f0:	81 e0       	ldi	r24, 0x01	; 1
    49f2:	89 27       	eor	r24, r25
    49f4:	88 23       	and	r24, r24
    49f6:	e1 f0       	breq	.+56     	; 0x4a30 <_ZN4UART15rxc_isr_handlerEh+0x66>
		uart_singleton[id]->_rx.enfileira(uart_singleton[id]->_serial->getUDR());
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	88 2f       	mov	r24, r24
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	88 0f       	add	r24, r24
    4a00:	99 1f       	adc	r25, r25
    4a02:	8e 57       	subi	r24, 0x7E	; 126
    4a04:	9c 4f       	sbci	r25, 0xFC	; 252
    4a06:	fc 01       	movw	r30, r24
    4a08:	80 81       	ld	r24, Z
    4a0a:	91 81       	ldd	r25, Z+1	; 0x01
    4a0c:	fc 01       	movw	r30, r24
    4a0e:	80 81       	ld	r24, Z
    4a10:	91 81       	ldd	r25, Z+1	; 0x01
    4a12:	8f d2       	rcall	.+1310   	; 0x4f32 <_ZN12UART_MAPPING12UART_Mapping6getUDREv>
    4a14:	28 2f       	mov	r18, r24
    4a16:	89 81       	ldd	r24, Y+1	; 0x01
    4a18:	88 2f       	mov	r24, r24
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	88 0f       	add	r24, r24
    4a1e:	99 1f       	adc	r25, r25
    4a20:	8e 57       	subi	r24, 0x7E	; 126
    4a22:	9c 4f       	sbci	r25, 0xFC	; 252
    4a24:	fc 01       	movw	r30, r24
    4a26:	80 81       	ld	r24, Z
    4a28:	91 81       	ldd	r25, Z+1	; 0x01
    4a2a:	02 96       	adiw	r24, 0x02	; 2
    4a2c:	62 2f       	mov	r22, r18
    4a2e:	e0 de       	rcall	.-576    	; 0x47f0 <_ZN4FilaIhLi10EE9enfileiraEh>
	}
}
    4a30:	0f 90       	pop	r0
    4a32:	df 91       	pop	r29
    4a34:	cf 91       	pop	r28
    4a36:	08 95       	ret

00004a38 <_ZN4UART14tx_isr_handlerEh>:
/**
 * Função para tratamento da transmissão (TX)
 * invocada pelas interrupções da respectiva
 * serial utilizada.
 */
void UART::tx_isr_handler(uint8_t id) {
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	1f 92       	push	r1
    4a3e:	cd b7       	in	r28, 0x3d	; 61
    4a40:	de b7       	in	r29, 0x3e	; 62
    4a42:	89 83       	std	Y+1, r24	; 0x01
	if(!uart_singleton[id]->_tx.vazia()){
    4a44:	89 81       	ldd	r24, Y+1	; 0x01
    4a46:	88 2f       	mov	r24, r24
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	88 0f       	add	r24, r24
    4a4c:	99 1f       	adc	r25, r25
    4a4e:	8e 57       	subi	r24, 0x7E	; 126
    4a50:	9c 4f       	sbci	r25, 0xFC	; 252
    4a52:	fc 01       	movw	r30, r24
    4a54:	80 81       	ld	r24, Z
    4a56:	91 81       	ldd	r25, Z+1	; 0x01
    4a58:	42 96       	adiw	r24, 0x12	; 18
    4a5a:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN4FilaIhLi10EE5vaziaEv>
    4a5e:	98 2f       	mov	r25, r24
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	89 27       	eor	r24, r25
    4a64:	88 23       	and	r24, r24
    4a66:	f1 f0       	breq	.+60     	; 0x4aa4 <_ZN4UART14tx_isr_handlerEh+0x6c>
		uart_singleton[id]->_serial->setUDR(uart_singleton[id]->_tx.desenfileira());
    4a68:	89 81       	ldd	r24, Y+1	; 0x01
    4a6a:	88 2f       	mov	r24, r24
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	88 0f       	add	r24, r24
    4a70:	99 1f       	adc	r25, r25
    4a72:	8e 57       	subi	r24, 0x7E	; 126
    4a74:	9c 4f       	sbci	r25, 0xFC	; 252
    4a76:	fc 01       	movw	r30, r24
    4a78:	80 81       	ld	r24, Z
    4a7a:	91 81       	ldd	r25, Z+1	; 0x01
    4a7c:	42 96       	adiw	r24, 0x12	; 18
    4a7e:	0e 94 34 0c 	call	0x1868	; 0x1868 <_ZN4FilaIhLi10EE12desenfileiraEv>
    4a82:	28 2f       	mov	r18, r24
    4a84:	89 81       	ldd	r24, Y+1	; 0x01
    4a86:	88 2f       	mov	r24, r24
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	88 0f       	add	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	8e 57       	subi	r24, 0x7E	; 126
    4a90:	9c 4f       	sbci	r25, 0xFC	; 252
    4a92:	fc 01       	movw	r30, r24
    4a94:	80 81       	ld	r24, Z
    4a96:	91 81       	ldd	r25, Z+1	; 0x01
    4a98:	fc 01       	movw	r30, r24
    4a9a:	80 81       	ld	r24, Z
    4a9c:	91 81       	ldd	r25, Z+1	; 0x01
    4a9e:	62 2f       	mov	r22, r18
    4aa0:	59 d2       	rcall	.+1202   	; 0x4f54 <_ZN12UART_MAPPING12UART_Mapping6setUDREh>
    4aa2:	0e c0       	rjmp	.+28     	; 0x4ac0 <_ZN4UART14tx_isr_handlerEh+0x88>
	}
	else {
		uart_singleton[id]->_serial->desativaInt();
    4aa4:	89 81       	ldd	r24, Y+1	; 0x01
    4aa6:	88 2f       	mov	r24, r24
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	88 0f       	add	r24, r24
    4aac:	99 1f       	adc	r25, r25
    4aae:	8e 57       	subi	r24, 0x7E	; 126
    4ab0:	9c 4f       	sbci	r25, 0xFC	; 252
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	80 81       	ld	r24, Z
    4ab6:	91 81       	ldd	r25, Z+1	; 0x01
    4ab8:	fc 01       	movw	r30, r24
    4aba:	80 81       	ld	r24, Z
    4abc:	91 81       	ldd	r25, Z+1	; 0x01
    4abe:	74 d2       	rcall	.+1256   	; 0x4fa8 <_ZN12UART_MAPPING12UART_Mapping11desativaIntEv>
	}
}
    4ac0:	0f 90       	pop	r0
    4ac2:	df 91       	pop	r29
    4ac4:	cf 91       	pop	r28
    4ac6:	08 95       	ret

00004ac8 <__vector_25>:

ISR(USART0_RX_vect) {
    4ac8:	1f 92       	push	r1
    4aca:	0f 92       	push	r0
    4acc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4ad0:	0f 92       	push	r0
    4ad2:	11 24       	eor	r1, r1
    4ad4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4ad8:	0f 92       	push	r0
    4ada:	2f 93       	push	r18
    4adc:	3f 93       	push	r19
    4ade:	4f 93       	push	r20
    4ae0:	5f 93       	push	r21
    4ae2:	6f 93       	push	r22
    4ae4:	7f 93       	push	r23
    4ae6:	8f 93       	push	r24
    4ae8:	9f 93       	push	r25
    4aea:	af 93       	push	r26
    4aec:	bf 93       	push	r27
    4aee:	ef 93       	push	r30
    4af0:	ff 93       	push	r31
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	cd b7       	in	r28, 0x3d	; 61
    4af8:	de b7       	in	r29, 0x3e	; 62
	UART::rxc_isr_handler(0);
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	66 df       	rcall	.-308    	; 0x49ca <_ZN4UART15rxc_isr_handlerEh>
}
    4afe:	df 91       	pop	r29
    4b00:	cf 91       	pop	r28
    4b02:	ff 91       	pop	r31
    4b04:	ef 91       	pop	r30
    4b06:	bf 91       	pop	r27
    4b08:	af 91       	pop	r26
    4b0a:	9f 91       	pop	r25
    4b0c:	8f 91       	pop	r24
    4b0e:	7f 91       	pop	r23
    4b10:	6f 91       	pop	r22
    4b12:	5f 91       	pop	r21
    4b14:	4f 91       	pop	r20
    4b16:	3f 91       	pop	r19
    4b18:	2f 91       	pop	r18
    4b1a:	0f 90       	pop	r0
    4b1c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4b20:	0f 90       	pop	r0
    4b22:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4b26:	0f 90       	pop	r0
    4b28:	1f 90       	pop	r1
    4b2a:	18 95       	reti

00004b2c <__vector_26>:

ISR(USART0_UDRE_vect) {
    4b2c:	1f 92       	push	r1
    4b2e:	0f 92       	push	r0
    4b30:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4b34:	0f 92       	push	r0
    4b36:	11 24       	eor	r1, r1
    4b38:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4b3c:	0f 92       	push	r0
    4b3e:	2f 93       	push	r18
    4b40:	3f 93       	push	r19
    4b42:	4f 93       	push	r20
    4b44:	5f 93       	push	r21
    4b46:	6f 93       	push	r22
    4b48:	7f 93       	push	r23
    4b4a:	8f 93       	push	r24
    4b4c:	9f 93       	push	r25
    4b4e:	af 93       	push	r26
    4b50:	bf 93       	push	r27
    4b52:	ef 93       	push	r30
    4b54:	ff 93       	push	r31
    4b56:	cf 93       	push	r28
    4b58:	df 93       	push	r29
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
	UART::tx_isr_handler(0);
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	6b df       	rcall	.-298    	; 0x4a38 <_ZN4UART14tx_isr_handlerEh>
}
    4b62:	df 91       	pop	r29
    4b64:	cf 91       	pop	r28
    4b66:	ff 91       	pop	r31
    4b68:	ef 91       	pop	r30
    4b6a:	bf 91       	pop	r27
    4b6c:	af 91       	pop	r26
    4b6e:	9f 91       	pop	r25
    4b70:	8f 91       	pop	r24
    4b72:	7f 91       	pop	r23
    4b74:	6f 91       	pop	r22
    4b76:	5f 91       	pop	r21
    4b78:	4f 91       	pop	r20
    4b7a:	3f 91       	pop	r19
    4b7c:	2f 91       	pop	r18
    4b7e:	0f 90       	pop	r0
    4b80:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4b84:	0f 90       	pop	r0
    4b86:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4b8a:	0f 90       	pop	r0
    4b8c:	1f 90       	pop	r1
    4b8e:	18 95       	reti

00004b90 <__vector_36>:

ISR(USART1_RX_vect){
    4b90:	1f 92       	push	r1
    4b92:	0f 92       	push	r0
    4b94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4b98:	0f 92       	push	r0
    4b9a:	11 24       	eor	r1, r1
    4b9c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4ba0:	0f 92       	push	r0
    4ba2:	2f 93       	push	r18
    4ba4:	3f 93       	push	r19
    4ba6:	4f 93       	push	r20
    4ba8:	5f 93       	push	r21
    4baa:	6f 93       	push	r22
    4bac:	7f 93       	push	r23
    4bae:	8f 93       	push	r24
    4bb0:	9f 93       	push	r25
    4bb2:	af 93       	push	r26
    4bb4:	bf 93       	push	r27
    4bb6:	ef 93       	push	r30
    4bb8:	ff 93       	push	r31
    4bba:	cf 93       	push	r28
    4bbc:	df 93       	push	r29
    4bbe:	cd b7       	in	r28, 0x3d	; 61
    4bc0:	de b7       	in	r29, 0x3e	; 62
	UART::rxc_isr_handler(1);
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	02 df       	rcall	.-508    	; 0x49ca <_ZN4UART15rxc_isr_handlerEh>
}
    4bc6:	df 91       	pop	r29
    4bc8:	cf 91       	pop	r28
    4bca:	ff 91       	pop	r31
    4bcc:	ef 91       	pop	r30
    4bce:	bf 91       	pop	r27
    4bd0:	af 91       	pop	r26
    4bd2:	9f 91       	pop	r25
    4bd4:	8f 91       	pop	r24
    4bd6:	7f 91       	pop	r23
    4bd8:	6f 91       	pop	r22
    4bda:	5f 91       	pop	r21
    4bdc:	4f 91       	pop	r20
    4bde:	3f 91       	pop	r19
    4be0:	2f 91       	pop	r18
    4be2:	0f 90       	pop	r0
    4be4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4be8:	0f 90       	pop	r0
    4bea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4bee:	0f 90       	pop	r0
    4bf0:	1f 90       	pop	r1
    4bf2:	18 95       	reti

00004bf4 <__vector_37>:

ISR(USART1_UDRE_vect){
    4bf4:	1f 92       	push	r1
    4bf6:	0f 92       	push	r0
    4bf8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4bfc:	0f 92       	push	r0
    4bfe:	11 24       	eor	r1, r1
    4c00:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4c04:	0f 92       	push	r0
    4c06:	2f 93       	push	r18
    4c08:	3f 93       	push	r19
    4c0a:	4f 93       	push	r20
    4c0c:	5f 93       	push	r21
    4c0e:	6f 93       	push	r22
    4c10:	7f 93       	push	r23
    4c12:	8f 93       	push	r24
    4c14:	9f 93       	push	r25
    4c16:	af 93       	push	r26
    4c18:	bf 93       	push	r27
    4c1a:	ef 93       	push	r30
    4c1c:	ff 93       	push	r31
    4c1e:	cf 93       	push	r28
    4c20:	df 93       	push	r29
    4c22:	cd b7       	in	r28, 0x3d	; 61
    4c24:	de b7       	in	r29, 0x3e	; 62
	UART::tx_isr_handler(1);
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	07 df       	rcall	.-498    	; 0x4a38 <_ZN4UART14tx_isr_handlerEh>
}
    4c2a:	df 91       	pop	r29
    4c2c:	cf 91       	pop	r28
    4c2e:	ff 91       	pop	r31
    4c30:	ef 91       	pop	r30
    4c32:	bf 91       	pop	r27
    4c34:	af 91       	pop	r26
    4c36:	9f 91       	pop	r25
    4c38:	8f 91       	pop	r24
    4c3a:	7f 91       	pop	r23
    4c3c:	6f 91       	pop	r22
    4c3e:	5f 91       	pop	r21
    4c40:	4f 91       	pop	r20
    4c42:	3f 91       	pop	r19
    4c44:	2f 91       	pop	r18
    4c46:	0f 90       	pop	r0
    4c48:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4c4c:	0f 90       	pop	r0
    4c4e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4c52:	0f 90       	pop	r0
    4c54:	1f 90       	pop	r1
    4c56:	18 95       	reti

00004c58 <__vector_51>:

ISR(USART2_RX_vect){
    4c58:	1f 92       	push	r1
    4c5a:	0f 92       	push	r0
    4c5c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4c60:	0f 92       	push	r0
    4c62:	11 24       	eor	r1, r1
    4c64:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4c68:	0f 92       	push	r0
    4c6a:	2f 93       	push	r18
    4c6c:	3f 93       	push	r19
    4c6e:	4f 93       	push	r20
    4c70:	5f 93       	push	r21
    4c72:	6f 93       	push	r22
    4c74:	7f 93       	push	r23
    4c76:	8f 93       	push	r24
    4c78:	9f 93       	push	r25
    4c7a:	af 93       	push	r26
    4c7c:	bf 93       	push	r27
    4c7e:	ef 93       	push	r30
    4c80:	ff 93       	push	r31
    4c82:	cf 93       	push	r28
    4c84:	df 93       	push	r29
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
	UART::rxc_isr_handler(2);
    4c8a:	82 e0       	ldi	r24, 0x02	; 2
    4c8c:	9e de       	rcall	.-708    	; 0x49ca <_ZN4UART15rxc_isr_handlerEh>
}
    4c8e:	df 91       	pop	r29
    4c90:	cf 91       	pop	r28
    4c92:	ff 91       	pop	r31
    4c94:	ef 91       	pop	r30
    4c96:	bf 91       	pop	r27
    4c98:	af 91       	pop	r26
    4c9a:	9f 91       	pop	r25
    4c9c:	8f 91       	pop	r24
    4c9e:	7f 91       	pop	r23
    4ca0:	6f 91       	pop	r22
    4ca2:	5f 91       	pop	r21
    4ca4:	4f 91       	pop	r20
    4ca6:	3f 91       	pop	r19
    4ca8:	2f 91       	pop	r18
    4caa:	0f 90       	pop	r0
    4cac:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4cb0:	0f 90       	pop	r0
    4cb2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4cb6:	0f 90       	pop	r0
    4cb8:	1f 90       	pop	r1
    4cba:	18 95       	reti

00004cbc <__vector_52>:

ISR(USART2_UDRE_vect){
    4cbc:	1f 92       	push	r1
    4cbe:	0f 92       	push	r0
    4cc0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4cc4:	0f 92       	push	r0
    4cc6:	11 24       	eor	r1, r1
    4cc8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4ccc:	0f 92       	push	r0
    4cce:	2f 93       	push	r18
    4cd0:	3f 93       	push	r19
    4cd2:	4f 93       	push	r20
    4cd4:	5f 93       	push	r21
    4cd6:	6f 93       	push	r22
    4cd8:	7f 93       	push	r23
    4cda:	8f 93       	push	r24
    4cdc:	9f 93       	push	r25
    4cde:	af 93       	push	r26
    4ce0:	bf 93       	push	r27
    4ce2:	ef 93       	push	r30
    4ce4:	ff 93       	push	r31
    4ce6:	cf 93       	push	r28
    4ce8:	df 93       	push	r29
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
	UART::tx_isr_handler(2);
    4cee:	82 e0       	ldi	r24, 0x02	; 2
    4cf0:	a3 de       	rcall	.-698    	; 0x4a38 <_ZN4UART14tx_isr_handlerEh>
}
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	ff 91       	pop	r31
    4cf8:	ef 91       	pop	r30
    4cfa:	bf 91       	pop	r27
    4cfc:	af 91       	pop	r26
    4cfe:	9f 91       	pop	r25
    4d00:	8f 91       	pop	r24
    4d02:	7f 91       	pop	r23
    4d04:	6f 91       	pop	r22
    4d06:	5f 91       	pop	r21
    4d08:	4f 91       	pop	r20
    4d0a:	3f 91       	pop	r19
    4d0c:	2f 91       	pop	r18
    4d0e:	0f 90       	pop	r0
    4d10:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4d14:	0f 90       	pop	r0
    4d16:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4d1a:	0f 90       	pop	r0
    4d1c:	1f 90       	pop	r1
    4d1e:	18 95       	reti

00004d20 <__vector_54>:

ISR(USART3_RX_vect){
    4d20:	1f 92       	push	r1
    4d22:	0f 92       	push	r0
    4d24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4d28:	0f 92       	push	r0
    4d2a:	11 24       	eor	r1, r1
    4d2c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4d30:	0f 92       	push	r0
    4d32:	2f 93       	push	r18
    4d34:	3f 93       	push	r19
    4d36:	4f 93       	push	r20
    4d38:	5f 93       	push	r21
    4d3a:	6f 93       	push	r22
    4d3c:	7f 93       	push	r23
    4d3e:	8f 93       	push	r24
    4d40:	9f 93       	push	r25
    4d42:	af 93       	push	r26
    4d44:	bf 93       	push	r27
    4d46:	ef 93       	push	r30
    4d48:	ff 93       	push	r31
    4d4a:	cf 93       	push	r28
    4d4c:	df 93       	push	r29
    4d4e:	cd b7       	in	r28, 0x3d	; 61
    4d50:	de b7       	in	r29, 0x3e	; 62
	UART::rxc_isr_handler(3);
    4d52:	83 e0       	ldi	r24, 0x03	; 3
    4d54:	3a de       	rcall	.-908    	; 0x49ca <_ZN4UART15rxc_isr_handlerEh>
}
    4d56:	df 91       	pop	r29
    4d58:	cf 91       	pop	r28
    4d5a:	ff 91       	pop	r31
    4d5c:	ef 91       	pop	r30
    4d5e:	bf 91       	pop	r27
    4d60:	af 91       	pop	r26
    4d62:	9f 91       	pop	r25
    4d64:	8f 91       	pop	r24
    4d66:	7f 91       	pop	r23
    4d68:	6f 91       	pop	r22
    4d6a:	5f 91       	pop	r21
    4d6c:	4f 91       	pop	r20
    4d6e:	3f 91       	pop	r19
    4d70:	2f 91       	pop	r18
    4d72:	0f 90       	pop	r0
    4d74:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4d78:	0f 90       	pop	r0
    4d7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4d7e:	0f 90       	pop	r0
    4d80:	1f 90       	pop	r1
    4d82:	18 95       	reti

00004d84 <__vector_55>:

ISR(USART3_UDRE_vect){
    4d84:	1f 92       	push	r1
    4d86:	0f 92       	push	r0
    4d88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4d8c:	0f 92       	push	r0
    4d8e:	11 24       	eor	r1, r1
    4d90:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4d94:	0f 92       	push	r0
    4d96:	2f 93       	push	r18
    4d98:	3f 93       	push	r19
    4d9a:	4f 93       	push	r20
    4d9c:	5f 93       	push	r21
    4d9e:	6f 93       	push	r22
    4da0:	7f 93       	push	r23
    4da2:	8f 93       	push	r24
    4da4:	9f 93       	push	r25
    4da6:	af 93       	push	r26
    4da8:	bf 93       	push	r27
    4daa:	ef 93       	push	r30
    4dac:	ff 93       	push	r31
    4dae:	cf 93       	push	r28
    4db0:	df 93       	push	r29
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
	UART::tx_isr_handler(3);
    4db6:	83 e0       	ldi	r24, 0x03	; 3
    4db8:	3f de       	rcall	.-898    	; 0x4a38 <_ZN4UART14tx_isr_handlerEh>
}
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	ff 91       	pop	r31
    4dc0:	ef 91       	pop	r30
    4dc2:	bf 91       	pop	r27
    4dc4:	af 91       	pop	r26
    4dc6:	9f 91       	pop	r25
    4dc8:	8f 91       	pop	r24
    4dca:	7f 91       	pop	r23
    4dcc:	6f 91       	pop	r22
    4dce:	5f 91       	pop	r21
    4dd0:	4f 91       	pop	r20
    4dd2:	3f 91       	pop	r19
    4dd4:	2f 91       	pop	r18
    4dd6:	0f 90       	pop	r0
    4dd8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
    4ddc:	0f 90       	pop	r0
    4dde:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
    4de2:	0f 90       	pop	r0
    4de4:	1f 90       	pop	r1
    4de6:	18 95       	reti

00004de8 <_ZN4FilaIhLi10EE5cheiaEv>:
/**
 * Adiciona dados na fila de transmissão
 * e ativa a interrupção.
 */
void UART::put(uint8_t data) {
	if(!_tx.cheia()){
    4de8:	cf 93       	push	r28
    4dea:	df 93       	push	r29
    4dec:	1f 92       	push	r1
    4dee:	1f 92       	push	r1
    4df0:	cd b7       	in	r28, 0x3d	; 61
    4df2:	de b7       	in	r29, 0x3e	; 62
    4df4:	9a 83       	std	Y+2, r25	; 0x02
    4df6:	89 83       	std	Y+1, r24	; 0x01
		_tx.enfileira(data);
    4df8:	89 81       	ldd	r24, Y+1	; 0x01
    4dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	86 85       	ldd	r24, Z+14	; 0x0e
    4e00:	97 85       	ldd	r25, Z+15	; 0x0f
    4e02:	21 e0       	ldi	r18, 0x01	; 1
    4e04:	0a 97       	sbiw	r24, 0x0a	; 10
    4e06:	09 f0       	breq	.+2      	; 0x4e0a <_ZN4FilaIhLi10EE5cheiaEv+0x22>
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	82 2f       	mov	r24, r18
		_serial->ativaInt();
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	08 95       	ret

00004e16 <_ZN12UART_MAPPING12UART_Mapping11definirUartEmhhhh>:


/**
 * Define os modos de operação da serial
 */
void UART_Mapping::definirUart(uint32_t baud, uint8_t speed, uint8_t db, uint8_t parity, uint8_t sb){
    4e16:	cf 92       	push	r12
    4e18:	ef 92       	push	r14
    4e1a:	0f 93       	push	r16
    4e1c:	cf 93       	push	r28
    4e1e:	df 93       	push	r29
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62
    4e24:	6a 97       	sbiw	r28, 0x1a	; 26
    4e26:	0f b6       	in	r0, 0x3f	; 63
    4e28:	f8 94       	cli
    4e2a:	de bf       	out	0x3e, r29	; 62
    4e2c:	0f be       	out	0x3f, r0	; 63
    4e2e:	cd bf       	out	0x3d, r28	; 61
    4e30:	9a 83       	std	Y+2, r25	; 0x02
    4e32:	89 83       	std	Y+1, r24	; 0x01
    4e34:	4b 83       	std	Y+3, r20	; 0x03
    4e36:	5c 83       	std	Y+4, r21	; 0x04
    4e38:	6d 83       	std	Y+5, r22	; 0x05
    4e3a:	7e 83       	std	Y+6, r23	; 0x06
    4e3c:	2f 83       	std	Y+7, r18	; 0x07
    4e3e:	08 87       	std	Y+8, r16	; 0x08
    4e40:	e9 86       	std	Y+9, r14	; 0x09
    4e42:	ca 86       	std	Y+10, r12	; 0x0a

	if (speed == 0){
    4e44:	8f 81       	ldd	r24, Y+7	; 0x07
    4e46:	88 23       	and	r24, r24
    4e48:	69 f5       	brne	.+90     	; 0x4ea4 <_ZN12UART_MAPPING12UART_Mapping11definirUartEmhhhh+0x8e>
		UBRRnH =  (((F_CPU/16/baud)-1)>>8);
    4e4a:	80 e4       	ldi	r24, 0x40	; 64
    4e4c:	92 e4       	ldi	r25, 0x42	; 66
    4e4e:	af e0       	ldi	r26, 0x0F	; 15
    4e50:	b0 e0       	ldi	r27, 0x00	; 0
    4e52:	2b 81       	ldd	r18, Y+3	; 0x03
    4e54:	3c 81       	ldd	r19, Y+4	; 0x04
    4e56:	4d 81       	ldd	r20, Y+5	; 0x05
    4e58:	5e 81       	ldd	r21, Y+6	; 0x06
    4e5a:	bc 01       	movw	r22, r24
    4e5c:	cd 01       	movw	r24, r26
    4e5e:	bb d0       	rcall	.+374    	; 0x4fd6 <__udivmodsi4>
    4e60:	da 01       	movw	r26, r20
    4e62:	c9 01       	movw	r24, r18
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	a1 09       	sbc	r26, r1
    4e68:	b1 09       	sbc	r27, r1
    4e6a:	89 2f       	mov	r24, r25
    4e6c:	9a 2f       	mov	r25, r26
    4e6e:	ab 2f       	mov	r26, r27
    4e70:	bb 27       	eor	r27, r27
    4e72:	28 2f       	mov	r18, r24
    4e74:	89 81       	ldd	r24, Y+1	; 0x01
    4e76:	9a 81       	ldd	r25, Y+2	; 0x02
    4e78:	fc 01       	movw	r30, r24
    4e7a:	25 83       	std	Z+5, r18	; 0x05
		UBRRnL =  ((F_CPU/16/baud)-1);
    4e7c:	80 e4       	ldi	r24, 0x40	; 64
    4e7e:	92 e4       	ldi	r25, 0x42	; 66
    4e80:	af e0       	ldi	r26, 0x0F	; 15
    4e82:	b0 e0       	ldi	r27, 0x00	; 0
    4e84:	2b 81       	ldd	r18, Y+3	; 0x03
    4e86:	3c 81       	ldd	r19, Y+4	; 0x04
    4e88:	4d 81       	ldd	r20, Y+5	; 0x05
    4e8a:	5e 81       	ldd	r21, Y+6	; 0x06
    4e8c:	bc 01       	movw	r22, r24
    4e8e:	cd 01       	movw	r24, r26
    4e90:	a2 d0       	rcall	.+324    	; 0x4fd6 <__udivmodsi4>
    4e92:	da 01       	movw	r26, r20
    4e94:	c9 01       	movw	r24, r18
    4e96:	2f ef       	ldi	r18, 0xFF	; 255
    4e98:	28 0f       	add	r18, r24
    4e9a:	89 81       	ldd	r24, Y+1	; 0x01
    4e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9e:	fc 01       	movw	r30, r24
    4ea0:	24 83       	std	Z+4, r18	; 0x04
    4ea2:	2c c0       	rjmp	.+88     	; 0x4efc <_ZN12UART_MAPPING12UART_Mapping11definirUartEmhhhh+0xe6>
	} else {
		UBRRnH =  (((F_CPU/8/baud)-1)>>8);
    4ea4:	80 e8       	ldi	r24, 0x80	; 128
    4ea6:	94 e8       	ldi	r25, 0x84	; 132
    4ea8:	ae e1       	ldi	r26, 0x1E	; 30
    4eaa:	b0 e0       	ldi	r27, 0x00	; 0
    4eac:	2b 81       	ldd	r18, Y+3	; 0x03
    4eae:	3c 81       	ldd	r19, Y+4	; 0x04
    4eb0:	4d 81       	ldd	r20, Y+5	; 0x05
    4eb2:	5e 81       	ldd	r21, Y+6	; 0x06
    4eb4:	bc 01       	movw	r22, r24
    4eb6:	cd 01       	movw	r24, r26
    4eb8:	8e d0       	rcall	.+284    	; 0x4fd6 <__udivmodsi4>
    4eba:	da 01       	movw	r26, r20
    4ebc:	c9 01       	movw	r24, r18
    4ebe:	01 97       	sbiw	r24, 0x01	; 1
    4ec0:	a1 09       	sbc	r26, r1
    4ec2:	b1 09       	sbc	r27, r1
    4ec4:	89 2f       	mov	r24, r25
    4ec6:	9a 2f       	mov	r25, r26
    4ec8:	ab 2f       	mov	r26, r27
    4eca:	bb 27       	eor	r27, r27
    4ecc:	28 2f       	mov	r18, r24
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	25 83       	std	Z+5, r18	; 0x05
		UBRRnL =  ((F_CPU/8/baud)-1);
    4ed6:	80 e8       	ldi	r24, 0x80	; 128
    4ed8:	94 e8       	ldi	r25, 0x84	; 132
    4eda:	ae e1       	ldi	r26, 0x1E	; 30
    4edc:	b0 e0       	ldi	r27, 0x00	; 0
    4ede:	2b 81       	ldd	r18, Y+3	; 0x03
    4ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    4ee2:	4d 81       	ldd	r20, Y+5	; 0x05
    4ee4:	5e 81       	ldd	r21, Y+6	; 0x06
    4ee6:	bc 01       	movw	r22, r24
    4ee8:	cd 01       	movw	r24, r26
    4eea:	75 d0       	rcall	.+234    	; 0x4fd6 <__udivmodsi4>
    4eec:	da 01       	movw	r26, r20
    4eee:	c9 01       	movw	r24, r18
    4ef0:	2f ef       	ldi	r18, 0xFF	; 255
    4ef2:	28 0f       	add	r18, r24
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef8:	fc 01       	movw	r30, r24
    4efa:	24 83       	std	Z+4, r18	; 0x04
	}
	UCSRnB = 152;
    4efc:	89 81       	ldd	r24, Y+1	; 0x01
    4efe:	9a 81       	ldd	r25, Y+2	; 0x02
    4f00:	28 e9       	ldi	r18, 0x98	; 152
    4f02:	fc 01       	movw	r30, r24
    4f04:	21 83       	std	Z+1, r18	; 0x01
	UCSRnC = db|parity|sb;
    4f06:	98 85       	ldd	r25, Y+8	; 0x08
    4f08:	89 85       	ldd	r24, Y+9	; 0x09
    4f0a:	98 2b       	or	r25, r24
    4f0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f0e:	29 2f       	mov	r18, r25
    4f10:	28 2b       	or	r18, r24
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	9a 81       	ldd	r25, Y+2	; 0x02
    4f16:	fc 01       	movw	r30, r24
    4f18:	22 83       	std	Z+2, r18	; 0x02
}
    4f1a:	6a 96       	adiw	r28, 0x1a	; 26
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	f8 94       	cli
    4f20:	de bf       	out	0x3e, r29	; 62
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	cd bf       	out	0x3d, r28	; 61
    4f26:	df 91       	pop	r29
    4f28:	cf 91       	pop	r28
    4f2a:	0f 91       	pop	r16
    4f2c:	ef 90       	pop	r14
    4f2e:	cf 90       	pop	r12
    4f30:	08 95       	ret

00004f32 <_ZN12UART_MAPPING12UART_Mapping6getUDREv>:


uint8_t UART_Mapping::getUDR(){
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
    4f36:	1f 92       	push	r1
    4f38:	1f 92       	push	r1
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	9a 83       	std	Y+2, r25	; 0x02
    4f40:	89 83       	std	Y+1, r24	; 0x01
	return UDRn;
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
    4f44:	9a 81       	ldd	r25, Y+2	; 0x02
    4f46:	fc 01       	movw	r30, r24
    4f48:	86 81       	ldd	r24, Z+6	; 0x06
}
    4f4a:	0f 90       	pop	r0
    4f4c:	0f 90       	pop	r0
    4f4e:	df 91       	pop	r29
    4f50:	cf 91       	pop	r28
    4f52:	08 95       	ret

00004f54 <_ZN12UART_MAPPING12UART_Mapping6setUDREh>:

void UART_Mapping::setUDR(uint8_t data){
    4f54:	cf 93       	push	r28
    4f56:	df 93       	push	r29
    4f58:	00 d0       	rcall	.+0      	; 0x4f5a <_ZN12UART_MAPPING12UART_Mapping6setUDREh+0x6>
    4f5a:	cd b7       	in	r28, 0x3d	; 61
    4f5c:	de b7       	in	r29, 0x3e	; 62
    4f5e:	9a 83       	std	Y+2, r25	; 0x02
    4f60:	89 83       	std	Y+1, r24	; 0x01
    4f62:	6b 83       	std	Y+3, r22	; 0x03
	UDRn = data;
    4f64:	89 81       	ldd	r24, Y+1	; 0x01
    4f66:	9a 81       	ldd	r25, Y+2	; 0x02
    4f68:	2b 81       	ldd	r18, Y+3	; 0x03
    4f6a:	fc 01       	movw	r30, r24
    4f6c:	26 83       	std	Z+6, r18	; 0x06
}
    4f6e:	0f 90       	pop	r0
    4f70:	0f 90       	pop	r0
    4f72:	0f 90       	pop	r0
    4f74:	df 91       	pop	r29
    4f76:	cf 91       	pop	r28
    4f78:	08 95       	ret

00004f7a <_ZN12UART_MAPPING12UART_Mapping8ativaIntEv>:

void UART_Mapping::ativaInt(){
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	1f 92       	push	r1
    4f80:	1f 92       	push	r1
    4f82:	cd b7       	in	r28, 0x3d	; 61
    4f84:	de b7       	in	r29, 0x3e	; 62
    4f86:	9a 83       	std	Y+2, r25	; 0x02
    4f88:	89 83       	std	Y+1, r24	; 0x01
	UCSRnB |= (1<<5);
    4f8a:	89 81       	ldd	r24, Y+1	; 0x01
    4f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f8e:	fc 01       	movw	r30, r24
    4f90:	81 81       	ldd	r24, Z+1	; 0x01
    4f92:	28 2f       	mov	r18, r24
    4f94:	20 62       	ori	r18, 0x20	; 32
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	9a 81       	ldd	r25, Y+2	; 0x02
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	21 83       	std	Z+1, r18	; 0x01
}
    4f9e:	0f 90       	pop	r0
    4fa0:	0f 90       	pop	r0
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	08 95       	ret

00004fa8 <_ZN12UART_MAPPING12UART_Mapping11desativaIntEv>:

void UART_Mapping::desativaInt(){
    4fa8:	cf 93       	push	r28
    4faa:	df 93       	push	r29
    4fac:	1f 92       	push	r1
    4fae:	1f 92       	push	r1
    4fb0:	cd b7       	in	r28, 0x3d	; 61
    4fb2:	de b7       	in	r29, 0x3e	; 62
    4fb4:	9a 83       	std	Y+2, r25	; 0x02
    4fb6:	89 83       	std	Y+1, r24	; 0x01
	UCSRnB &= ~(1<<5);
    4fb8:	89 81       	ldd	r24, Y+1	; 0x01
    4fba:	9a 81       	ldd	r25, Y+2	; 0x02
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	81 81       	ldd	r24, Z+1	; 0x01
    4fc0:	28 2f       	mov	r18, r24
    4fc2:	2f 7d       	andi	r18, 0xDF	; 223
    4fc4:	89 81       	ldd	r24, Y+1	; 0x01
    4fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc8:	fc 01       	movw	r30, r24
    4fca:	21 83       	std	Z+1, r18	; 0x01
}
    4fcc:	0f 90       	pop	r0
    4fce:	0f 90       	pop	r0
    4fd0:	df 91       	pop	r29
    4fd2:	cf 91       	pop	r28
    4fd4:	08 95       	ret

00004fd6 <__udivmodsi4>:
    4fd6:	a1 e2       	ldi	r26, 0x21	; 33
    4fd8:	1a 2e       	mov	r1, r26
    4fda:	aa 1b       	sub	r26, r26
    4fdc:	bb 1b       	sub	r27, r27
    4fde:	fd 01       	movw	r30, r26
    4fe0:	0d c0       	rjmp	.+26     	; 0x4ffc <__udivmodsi4_ep>

00004fe2 <__udivmodsi4_loop>:
    4fe2:	aa 1f       	adc	r26, r26
    4fe4:	bb 1f       	adc	r27, r27
    4fe6:	ee 1f       	adc	r30, r30
    4fe8:	ff 1f       	adc	r31, r31
    4fea:	a2 17       	cp	r26, r18
    4fec:	b3 07       	cpc	r27, r19
    4fee:	e4 07       	cpc	r30, r20
    4ff0:	f5 07       	cpc	r31, r21
    4ff2:	20 f0       	brcs	.+8      	; 0x4ffc <__udivmodsi4_ep>
    4ff4:	a2 1b       	sub	r26, r18
    4ff6:	b3 0b       	sbc	r27, r19
    4ff8:	e4 0b       	sbc	r30, r20
    4ffa:	f5 0b       	sbc	r31, r21

00004ffc <__udivmodsi4_ep>:
    4ffc:	66 1f       	adc	r22, r22
    4ffe:	77 1f       	adc	r23, r23
    5000:	88 1f       	adc	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	1a 94       	dec	r1
    5006:	69 f7       	brne	.-38     	; 0x4fe2 <__udivmodsi4_loop>
    5008:	60 95       	com	r22
    500a:	70 95       	com	r23
    500c:	80 95       	com	r24
    500e:	90 95       	com	r25
    5010:	9b 01       	movw	r18, r22
    5012:	ac 01       	movw	r20, r24
    5014:	bd 01       	movw	r22, r26
    5016:	cf 01       	movw	r24, r30
    5018:	08 95       	ret

0000501a <__tablejump2__>:
    501a:	ee 0f       	add	r30, r30
    501c:	ff 1f       	adc	r31, r31
    501e:	88 1f       	adc	r24, r24
    5020:	8b bf       	out	0x3b, r24	; 59
    5022:	07 90       	elpm	r0, Z+
    5024:	f6 91       	elpm	r31, Z
    5026:	e0 2d       	mov	r30, r0
    5028:	19 94       	eijmp

0000502a <__cmpsf2>:
    502a:	d4 d0       	rcall	.+424    	; 0x51d4 <__fp_cmp>
    502c:	08 f4       	brcc	.+2      	; 0x5030 <__cmpsf2+0x6>
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	08 95       	ret

00005032 <__divsf3>:
    5032:	0c d0       	rcall	.+24     	; 0x504c <__divsf3x>
    5034:	0a c1       	rjmp	.+532    	; 0x524a <__fp_round>
    5036:	02 d1       	rcall	.+516    	; 0x523c <__fp_pscB>
    5038:	40 f0       	brcs	.+16     	; 0x504a <__divsf3+0x18>
    503a:	f9 d0       	rcall	.+498    	; 0x522e <__fp_pscA>
    503c:	30 f0       	brcs	.+12     	; 0x504a <__divsf3+0x18>
    503e:	21 f4       	brne	.+8      	; 0x5048 <__divsf3+0x16>
    5040:	5f 3f       	cpi	r21, 0xFF	; 255
    5042:	19 f0       	breq	.+6      	; 0x504a <__divsf3+0x18>
    5044:	eb c0       	rjmp	.+470    	; 0x521c <__fp_inf>
    5046:	51 11       	cpse	r21, r1
    5048:	34 c1       	rjmp	.+616    	; 0x52b2 <__fp_szero>
    504a:	ee c0       	rjmp	.+476    	; 0x5228 <__fp_nan>

0000504c <__divsf3x>:
    504c:	0f d1       	rcall	.+542    	; 0x526c <__fp_split3>
    504e:	98 f3       	brcs	.-26     	; 0x5036 <__divsf3+0x4>

00005050 <__divsf3_pse>:
    5050:	99 23       	and	r25, r25
    5052:	c9 f3       	breq	.-14     	; 0x5046 <__divsf3+0x14>
    5054:	55 23       	and	r21, r21
    5056:	b1 f3       	breq	.-20     	; 0x5044 <__divsf3+0x12>
    5058:	95 1b       	sub	r25, r21
    505a:	55 0b       	sbc	r21, r21
    505c:	bb 27       	eor	r27, r27
    505e:	aa 27       	eor	r26, r26
    5060:	62 17       	cp	r22, r18
    5062:	73 07       	cpc	r23, r19
    5064:	84 07       	cpc	r24, r20
    5066:	38 f0       	brcs	.+14     	; 0x5076 <__divsf3_pse+0x26>
    5068:	9f 5f       	subi	r25, 0xFF	; 255
    506a:	5f 4f       	sbci	r21, 0xFF	; 255
    506c:	22 0f       	add	r18, r18
    506e:	33 1f       	adc	r19, r19
    5070:	44 1f       	adc	r20, r20
    5072:	aa 1f       	adc	r26, r26
    5074:	a9 f3       	breq	.-22     	; 0x5060 <__divsf3_pse+0x10>
    5076:	33 d0       	rcall	.+102    	; 0x50de <__divsf3_pse+0x8e>
    5078:	0e 2e       	mov	r0, r30
    507a:	3a f0       	brmi	.+14     	; 0x508a <__divsf3_pse+0x3a>
    507c:	e0 e8       	ldi	r30, 0x80	; 128
    507e:	30 d0       	rcall	.+96     	; 0x50e0 <__divsf3_pse+0x90>
    5080:	91 50       	subi	r25, 0x01	; 1
    5082:	50 40       	sbci	r21, 0x00	; 0
    5084:	e6 95       	lsr	r30
    5086:	00 1c       	adc	r0, r0
    5088:	ca f7       	brpl	.-14     	; 0x507c <__divsf3_pse+0x2c>
    508a:	29 d0       	rcall	.+82     	; 0x50de <__divsf3_pse+0x8e>
    508c:	fe 2f       	mov	r31, r30
    508e:	27 d0       	rcall	.+78     	; 0x50de <__divsf3_pse+0x8e>
    5090:	66 0f       	add	r22, r22
    5092:	77 1f       	adc	r23, r23
    5094:	88 1f       	adc	r24, r24
    5096:	bb 1f       	adc	r27, r27
    5098:	26 17       	cp	r18, r22
    509a:	37 07       	cpc	r19, r23
    509c:	48 07       	cpc	r20, r24
    509e:	ab 07       	cpc	r26, r27
    50a0:	b0 e8       	ldi	r27, 0x80	; 128
    50a2:	09 f0       	breq	.+2      	; 0x50a6 <__divsf3_pse+0x56>
    50a4:	bb 0b       	sbc	r27, r27
    50a6:	80 2d       	mov	r24, r0
    50a8:	bf 01       	movw	r22, r30
    50aa:	ff 27       	eor	r31, r31
    50ac:	93 58       	subi	r25, 0x83	; 131
    50ae:	5f 4f       	sbci	r21, 0xFF	; 255
    50b0:	2a f0       	brmi	.+10     	; 0x50bc <__divsf3_pse+0x6c>
    50b2:	9e 3f       	cpi	r25, 0xFE	; 254
    50b4:	51 05       	cpc	r21, r1
    50b6:	68 f0       	brcs	.+26     	; 0x50d2 <__divsf3_pse+0x82>
    50b8:	b1 c0       	rjmp	.+354    	; 0x521c <__fp_inf>
    50ba:	fb c0       	rjmp	.+502    	; 0x52b2 <__fp_szero>
    50bc:	5f 3f       	cpi	r21, 0xFF	; 255
    50be:	ec f3       	brlt	.-6      	; 0x50ba <__divsf3_pse+0x6a>
    50c0:	98 3e       	cpi	r25, 0xE8	; 232
    50c2:	dc f3       	brlt	.-10     	; 0x50ba <__divsf3_pse+0x6a>
    50c4:	86 95       	lsr	r24
    50c6:	77 95       	ror	r23
    50c8:	67 95       	ror	r22
    50ca:	b7 95       	ror	r27
    50cc:	f7 95       	ror	r31
    50ce:	9f 5f       	subi	r25, 0xFF	; 255
    50d0:	c9 f7       	brne	.-14     	; 0x50c4 <__divsf3_pse+0x74>
    50d2:	88 0f       	add	r24, r24
    50d4:	91 1d       	adc	r25, r1
    50d6:	96 95       	lsr	r25
    50d8:	87 95       	ror	r24
    50da:	97 f9       	bld	r25, 7
    50dc:	08 95       	ret
    50de:	e1 e0       	ldi	r30, 0x01	; 1
    50e0:	66 0f       	add	r22, r22
    50e2:	77 1f       	adc	r23, r23
    50e4:	88 1f       	adc	r24, r24
    50e6:	bb 1f       	adc	r27, r27
    50e8:	62 17       	cp	r22, r18
    50ea:	73 07       	cpc	r23, r19
    50ec:	84 07       	cpc	r24, r20
    50ee:	ba 07       	cpc	r27, r26
    50f0:	20 f0       	brcs	.+8      	; 0x50fa <__divsf3_pse+0xaa>
    50f2:	62 1b       	sub	r22, r18
    50f4:	73 0b       	sbc	r23, r19
    50f6:	84 0b       	sbc	r24, r20
    50f8:	ba 0b       	sbc	r27, r26
    50fa:	ee 1f       	adc	r30, r30
    50fc:	88 f7       	brcc	.-30     	; 0x50e0 <__divsf3_pse+0x90>
    50fe:	e0 95       	com	r30
    5100:	08 95       	ret

00005102 <__fixunssfsi>:
    5102:	bc d0       	rcall	.+376    	; 0x527c <__fp_splitA>
    5104:	88 f0       	brcs	.+34     	; 0x5128 <__fixunssfsi+0x26>
    5106:	9f 57       	subi	r25, 0x7F	; 127
    5108:	90 f0       	brcs	.+36     	; 0x512e <__fixunssfsi+0x2c>
    510a:	b9 2f       	mov	r27, r25
    510c:	99 27       	eor	r25, r25
    510e:	b7 51       	subi	r27, 0x17	; 23
    5110:	a0 f0       	brcs	.+40     	; 0x513a <__fixunssfsi+0x38>
    5112:	d1 f0       	breq	.+52     	; 0x5148 <__fixunssfsi+0x46>
    5114:	66 0f       	add	r22, r22
    5116:	77 1f       	adc	r23, r23
    5118:	88 1f       	adc	r24, r24
    511a:	99 1f       	adc	r25, r25
    511c:	1a f0       	brmi	.+6      	; 0x5124 <__fixunssfsi+0x22>
    511e:	ba 95       	dec	r27
    5120:	c9 f7       	brne	.-14     	; 0x5114 <__fixunssfsi+0x12>
    5122:	12 c0       	rjmp	.+36     	; 0x5148 <__fixunssfsi+0x46>
    5124:	b1 30       	cpi	r27, 0x01	; 1
    5126:	81 f0       	breq	.+32     	; 0x5148 <__fixunssfsi+0x46>
    5128:	c3 d0       	rcall	.+390    	; 0x52b0 <__fp_zero>
    512a:	b1 e0       	ldi	r27, 0x01	; 1
    512c:	08 95       	ret
    512e:	c0 c0       	rjmp	.+384    	; 0x52b0 <__fp_zero>
    5130:	67 2f       	mov	r22, r23
    5132:	78 2f       	mov	r23, r24
    5134:	88 27       	eor	r24, r24
    5136:	b8 5f       	subi	r27, 0xF8	; 248
    5138:	39 f0       	breq	.+14     	; 0x5148 <__fixunssfsi+0x46>
    513a:	b9 3f       	cpi	r27, 0xF9	; 249
    513c:	cc f3       	brlt	.-14     	; 0x5130 <__fixunssfsi+0x2e>
    513e:	86 95       	lsr	r24
    5140:	77 95       	ror	r23
    5142:	67 95       	ror	r22
    5144:	b3 95       	inc	r27
    5146:	d9 f7       	brne	.-10     	; 0x513e <__fixunssfsi+0x3c>
    5148:	3e f4       	brtc	.+14     	; 0x5158 <__fixunssfsi+0x56>
    514a:	90 95       	com	r25
    514c:	80 95       	com	r24
    514e:	70 95       	com	r23
    5150:	61 95       	neg	r22
    5152:	7f 4f       	sbci	r23, 0xFF	; 255
    5154:	8f 4f       	sbci	r24, 0xFF	; 255
    5156:	9f 4f       	sbci	r25, 0xFF	; 255
    5158:	08 95       	ret

0000515a <__floatunsisf>:
    515a:	e8 94       	clt
    515c:	09 c0       	rjmp	.+18     	; 0x5170 <__floatsisf+0x12>

0000515e <__floatsisf>:
    515e:	97 fb       	bst	r25, 7
    5160:	3e f4       	brtc	.+14     	; 0x5170 <__floatsisf+0x12>
    5162:	90 95       	com	r25
    5164:	80 95       	com	r24
    5166:	70 95       	com	r23
    5168:	61 95       	neg	r22
    516a:	7f 4f       	sbci	r23, 0xFF	; 255
    516c:	8f 4f       	sbci	r24, 0xFF	; 255
    516e:	9f 4f       	sbci	r25, 0xFF	; 255
    5170:	99 23       	and	r25, r25
    5172:	a9 f0       	breq	.+42     	; 0x519e <__floatsisf+0x40>
    5174:	f9 2f       	mov	r31, r25
    5176:	96 e9       	ldi	r25, 0x96	; 150
    5178:	bb 27       	eor	r27, r27
    517a:	93 95       	inc	r25
    517c:	f6 95       	lsr	r31
    517e:	87 95       	ror	r24
    5180:	77 95       	ror	r23
    5182:	67 95       	ror	r22
    5184:	b7 95       	ror	r27
    5186:	f1 11       	cpse	r31, r1
    5188:	f8 cf       	rjmp	.-16     	; 0x517a <__floatsisf+0x1c>
    518a:	fa f4       	brpl	.+62     	; 0x51ca <__floatsisf+0x6c>
    518c:	bb 0f       	add	r27, r27
    518e:	11 f4       	brne	.+4      	; 0x5194 <__floatsisf+0x36>
    5190:	60 ff       	sbrs	r22, 0
    5192:	1b c0       	rjmp	.+54     	; 0x51ca <__floatsisf+0x6c>
    5194:	6f 5f       	subi	r22, 0xFF	; 255
    5196:	7f 4f       	sbci	r23, 0xFF	; 255
    5198:	8f 4f       	sbci	r24, 0xFF	; 255
    519a:	9f 4f       	sbci	r25, 0xFF	; 255
    519c:	16 c0       	rjmp	.+44     	; 0x51ca <__floatsisf+0x6c>
    519e:	88 23       	and	r24, r24
    51a0:	11 f0       	breq	.+4      	; 0x51a6 <__floatsisf+0x48>
    51a2:	96 e9       	ldi	r25, 0x96	; 150
    51a4:	11 c0       	rjmp	.+34     	; 0x51c8 <__floatsisf+0x6a>
    51a6:	77 23       	and	r23, r23
    51a8:	21 f0       	breq	.+8      	; 0x51b2 <__floatsisf+0x54>
    51aa:	9e e8       	ldi	r25, 0x8E	; 142
    51ac:	87 2f       	mov	r24, r23
    51ae:	76 2f       	mov	r23, r22
    51b0:	05 c0       	rjmp	.+10     	; 0x51bc <__floatsisf+0x5e>
    51b2:	66 23       	and	r22, r22
    51b4:	71 f0       	breq	.+28     	; 0x51d2 <__floatsisf+0x74>
    51b6:	96 e8       	ldi	r25, 0x86	; 134
    51b8:	86 2f       	mov	r24, r22
    51ba:	70 e0       	ldi	r23, 0x00	; 0
    51bc:	60 e0       	ldi	r22, 0x00	; 0
    51be:	2a f0       	brmi	.+10     	; 0x51ca <__floatsisf+0x6c>
    51c0:	9a 95       	dec	r25
    51c2:	66 0f       	add	r22, r22
    51c4:	77 1f       	adc	r23, r23
    51c6:	88 1f       	adc	r24, r24
    51c8:	da f7       	brpl	.-10     	; 0x51c0 <__floatsisf+0x62>
    51ca:	88 0f       	add	r24, r24
    51cc:	96 95       	lsr	r25
    51ce:	87 95       	ror	r24
    51d0:	97 f9       	bld	r25, 7
    51d2:	08 95       	ret

000051d4 <__fp_cmp>:
    51d4:	99 0f       	add	r25, r25
    51d6:	00 08       	sbc	r0, r0
    51d8:	55 0f       	add	r21, r21
    51da:	aa 0b       	sbc	r26, r26
    51dc:	e0 e8       	ldi	r30, 0x80	; 128
    51de:	fe ef       	ldi	r31, 0xFE	; 254
    51e0:	16 16       	cp	r1, r22
    51e2:	17 06       	cpc	r1, r23
    51e4:	e8 07       	cpc	r30, r24
    51e6:	f9 07       	cpc	r31, r25
    51e8:	c0 f0       	brcs	.+48     	; 0x521a <__fp_cmp+0x46>
    51ea:	12 16       	cp	r1, r18
    51ec:	13 06       	cpc	r1, r19
    51ee:	e4 07       	cpc	r30, r20
    51f0:	f5 07       	cpc	r31, r21
    51f2:	98 f0       	brcs	.+38     	; 0x521a <__fp_cmp+0x46>
    51f4:	62 1b       	sub	r22, r18
    51f6:	73 0b       	sbc	r23, r19
    51f8:	84 0b       	sbc	r24, r20
    51fa:	95 0b       	sbc	r25, r21
    51fc:	39 f4       	brne	.+14     	; 0x520c <__fp_cmp+0x38>
    51fe:	0a 26       	eor	r0, r26
    5200:	61 f0       	breq	.+24     	; 0x521a <__fp_cmp+0x46>
    5202:	23 2b       	or	r18, r19
    5204:	24 2b       	or	r18, r20
    5206:	25 2b       	or	r18, r21
    5208:	21 f4       	brne	.+8      	; 0x5212 <__fp_cmp+0x3e>
    520a:	08 95       	ret
    520c:	0a 26       	eor	r0, r26
    520e:	09 f4       	brne	.+2      	; 0x5212 <__fp_cmp+0x3e>
    5210:	a1 40       	sbci	r26, 0x01	; 1
    5212:	a6 95       	lsr	r26
    5214:	8f ef       	ldi	r24, 0xFF	; 255
    5216:	81 1d       	adc	r24, r1
    5218:	81 1d       	adc	r24, r1
    521a:	08 95       	ret

0000521c <__fp_inf>:
    521c:	97 f9       	bld	r25, 7
    521e:	9f 67       	ori	r25, 0x7F	; 127
    5220:	80 e8       	ldi	r24, 0x80	; 128
    5222:	70 e0       	ldi	r23, 0x00	; 0
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	08 95       	ret

00005228 <__fp_nan>:
    5228:	9f ef       	ldi	r25, 0xFF	; 255
    522a:	80 ec       	ldi	r24, 0xC0	; 192
    522c:	08 95       	ret

0000522e <__fp_pscA>:
    522e:	00 24       	eor	r0, r0
    5230:	0a 94       	dec	r0
    5232:	16 16       	cp	r1, r22
    5234:	17 06       	cpc	r1, r23
    5236:	18 06       	cpc	r1, r24
    5238:	09 06       	cpc	r0, r25
    523a:	08 95       	ret

0000523c <__fp_pscB>:
    523c:	00 24       	eor	r0, r0
    523e:	0a 94       	dec	r0
    5240:	12 16       	cp	r1, r18
    5242:	13 06       	cpc	r1, r19
    5244:	14 06       	cpc	r1, r20
    5246:	05 06       	cpc	r0, r21
    5248:	08 95       	ret

0000524a <__fp_round>:
    524a:	09 2e       	mov	r0, r25
    524c:	03 94       	inc	r0
    524e:	00 0c       	add	r0, r0
    5250:	11 f4       	brne	.+4      	; 0x5256 <__fp_round+0xc>
    5252:	88 23       	and	r24, r24
    5254:	52 f0       	brmi	.+20     	; 0x526a <__fp_round+0x20>
    5256:	bb 0f       	add	r27, r27
    5258:	40 f4       	brcc	.+16     	; 0x526a <__fp_round+0x20>
    525a:	bf 2b       	or	r27, r31
    525c:	11 f4       	brne	.+4      	; 0x5262 <__fp_round+0x18>
    525e:	60 ff       	sbrs	r22, 0
    5260:	04 c0       	rjmp	.+8      	; 0x526a <__fp_round+0x20>
    5262:	6f 5f       	subi	r22, 0xFF	; 255
    5264:	7f 4f       	sbci	r23, 0xFF	; 255
    5266:	8f 4f       	sbci	r24, 0xFF	; 255
    5268:	9f 4f       	sbci	r25, 0xFF	; 255
    526a:	08 95       	ret

0000526c <__fp_split3>:
    526c:	57 fd       	sbrc	r21, 7
    526e:	90 58       	subi	r25, 0x80	; 128
    5270:	44 0f       	add	r20, r20
    5272:	55 1f       	adc	r21, r21
    5274:	59 f0       	breq	.+22     	; 0x528c <__fp_splitA+0x10>
    5276:	5f 3f       	cpi	r21, 0xFF	; 255
    5278:	71 f0       	breq	.+28     	; 0x5296 <__fp_splitA+0x1a>
    527a:	47 95       	ror	r20

0000527c <__fp_splitA>:
    527c:	88 0f       	add	r24, r24
    527e:	97 fb       	bst	r25, 7
    5280:	99 1f       	adc	r25, r25
    5282:	61 f0       	breq	.+24     	; 0x529c <__fp_splitA+0x20>
    5284:	9f 3f       	cpi	r25, 0xFF	; 255
    5286:	79 f0       	breq	.+30     	; 0x52a6 <__fp_splitA+0x2a>
    5288:	87 95       	ror	r24
    528a:	08 95       	ret
    528c:	12 16       	cp	r1, r18
    528e:	13 06       	cpc	r1, r19
    5290:	14 06       	cpc	r1, r20
    5292:	55 1f       	adc	r21, r21
    5294:	f2 cf       	rjmp	.-28     	; 0x527a <__fp_split3+0xe>
    5296:	46 95       	lsr	r20
    5298:	f1 df       	rcall	.-30     	; 0x527c <__fp_splitA>
    529a:	08 c0       	rjmp	.+16     	; 0x52ac <__fp_splitA+0x30>
    529c:	16 16       	cp	r1, r22
    529e:	17 06       	cpc	r1, r23
    52a0:	18 06       	cpc	r1, r24
    52a2:	99 1f       	adc	r25, r25
    52a4:	f1 cf       	rjmp	.-30     	; 0x5288 <__fp_splitA+0xc>
    52a6:	86 95       	lsr	r24
    52a8:	71 05       	cpc	r23, r1
    52aa:	61 05       	cpc	r22, r1
    52ac:	08 94       	sec
    52ae:	08 95       	ret

000052b0 <__fp_zero>:
    52b0:	e8 94       	clt

000052b2 <__fp_szero>:
    52b2:	bb 27       	eor	r27, r27
    52b4:	66 27       	eor	r22, r22
    52b6:	77 27       	eor	r23, r23
    52b8:	cb 01       	movw	r24, r22
    52ba:	97 f9       	bld	r25, 7
    52bc:	08 95       	ret

000052be <__gesf2>:
    52be:	8a df       	rcall	.-236    	; 0x51d4 <__fp_cmp>
    52c0:	08 f4       	brcc	.+2      	; 0x52c4 <__gesf2+0x6>
    52c2:	8f ef       	ldi	r24, 0xFF	; 255
    52c4:	08 95       	ret

000052c6 <__mulsf3>:
    52c6:	0b d0       	rcall	.+22     	; 0x52de <__mulsf3x>
    52c8:	c0 cf       	rjmp	.-128    	; 0x524a <__fp_round>
    52ca:	b1 df       	rcall	.-158    	; 0x522e <__fp_pscA>
    52cc:	28 f0       	brcs	.+10     	; 0x52d8 <__mulsf3+0x12>
    52ce:	b6 df       	rcall	.-148    	; 0x523c <__fp_pscB>
    52d0:	18 f0       	brcs	.+6      	; 0x52d8 <__mulsf3+0x12>
    52d2:	95 23       	and	r25, r21
    52d4:	09 f0       	breq	.+2      	; 0x52d8 <__mulsf3+0x12>
    52d6:	a2 cf       	rjmp	.-188    	; 0x521c <__fp_inf>
    52d8:	a7 cf       	rjmp	.-178    	; 0x5228 <__fp_nan>
    52da:	11 24       	eor	r1, r1
    52dc:	ea cf       	rjmp	.-44     	; 0x52b2 <__fp_szero>

000052de <__mulsf3x>:
    52de:	c6 df       	rcall	.-116    	; 0x526c <__fp_split3>
    52e0:	a0 f3       	brcs	.-24     	; 0x52ca <__mulsf3+0x4>

000052e2 <__mulsf3_pse>:
    52e2:	95 9f       	mul	r25, r21
    52e4:	d1 f3       	breq	.-12     	; 0x52da <__mulsf3+0x14>
    52e6:	95 0f       	add	r25, r21
    52e8:	50 e0       	ldi	r21, 0x00	; 0
    52ea:	55 1f       	adc	r21, r21
    52ec:	62 9f       	mul	r22, r18
    52ee:	f0 01       	movw	r30, r0
    52f0:	72 9f       	mul	r23, r18
    52f2:	bb 27       	eor	r27, r27
    52f4:	f0 0d       	add	r31, r0
    52f6:	b1 1d       	adc	r27, r1
    52f8:	63 9f       	mul	r22, r19
    52fa:	aa 27       	eor	r26, r26
    52fc:	f0 0d       	add	r31, r0
    52fe:	b1 1d       	adc	r27, r1
    5300:	aa 1f       	adc	r26, r26
    5302:	64 9f       	mul	r22, r20
    5304:	66 27       	eor	r22, r22
    5306:	b0 0d       	add	r27, r0
    5308:	a1 1d       	adc	r26, r1
    530a:	66 1f       	adc	r22, r22
    530c:	82 9f       	mul	r24, r18
    530e:	22 27       	eor	r18, r18
    5310:	b0 0d       	add	r27, r0
    5312:	a1 1d       	adc	r26, r1
    5314:	62 1f       	adc	r22, r18
    5316:	73 9f       	mul	r23, r19
    5318:	b0 0d       	add	r27, r0
    531a:	a1 1d       	adc	r26, r1
    531c:	62 1f       	adc	r22, r18
    531e:	83 9f       	mul	r24, r19
    5320:	a0 0d       	add	r26, r0
    5322:	61 1d       	adc	r22, r1
    5324:	22 1f       	adc	r18, r18
    5326:	74 9f       	mul	r23, r20
    5328:	33 27       	eor	r19, r19
    532a:	a0 0d       	add	r26, r0
    532c:	61 1d       	adc	r22, r1
    532e:	23 1f       	adc	r18, r19
    5330:	84 9f       	mul	r24, r20
    5332:	60 0d       	add	r22, r0
    5334:	21 1d       	adc	r18, r1
    5336:	82 2f       	mov	r24, r18
    5338:	76 2f       	mov	r23, r22
    533a:	6a 2f       	mov	r22, r26
    533c:	11 24       	eor	r1, r1
    533e:	9f 57       	subi	r25, 0x7F	; 127
    5340:	50 40       	sbci	r21, 0x00	; 0
    5342:	8a f0       	brmi	.+34     	; 0x5366 <__mulsf3_pse+0x84>
    5344:	e1 f0       	breq	.+56     	; 0x537e <__mulsf3_pse+0x9c>
    5346:	88 23       	and	r24, r24
    5348:	4a f0       	brmi	.+18     	; 0x535c <__mulsf3_pse+0x7a>
    534a:	ee 0f       	add	r30, r30
    534c:	ff 1f       	adc	r31, r31
    534e:	bb 1f       	adc	r27, r27
    5350:	66 1f       	adc	r22, r22
    5352:	77 1f       	adc	r23, r23
    5354:	88 1f       	adc	r24, r24
    5356:	91 50       	subi	r25, 0x01	; 1
    5358:	50 40       	sbci	r21, 0x00	; 0
    535a:	a9 f7       	brne	.-22     	; 0x5346 <__mulsf3_pse+0x64>
    535c:	9e 3f       	cpi	r25, 0xFE	; 254
    535e:	51 05       	cpc	r21, r1
    5360:	70 f0       	brcs	.+28     	; 0x537e <__mulsf3_pse+0x9c>
    5362:	5c cf       	rjmp	.-328    	; 0x521c <__fp_inf>
    5364:	a6 cf       	rjmp	.-180    	; 0x52b2 <__fp_szero>
    5366:	5f 3f       	cpi	r21, 0xFF	; 255
    5368:	ec f3       	brlt	.-6      	; 0x5364 <__mulsf3_pse+0x82>
    536a:	98 3e       	cpi	r25, 0xE8	; 232
    536c:	dc f3       	brlt	.-10     	; 0x5364 <__mulsf3_pse+0x82>
    536e:	86 95       	lsr	r24
    5370:	77 95       	ror	r23
    5372:	67 95       	ror	r22
    5374:	b7 95       	ror	r27
    5376:	f7 95       	ror	r31
    5378:	e7 95       	ror	r30
    537a:	9f 5f       	subi	r25, 0xFF	; 255
    537c:	c1 f7       	brne	.-16     	; 0x536e <__mulsf3_pse+0x8c>
    537e:	fe 2b       	or	r31, r30
    5380:	88 0f       	add	r24, r24
    5382:	91 1d       	adc	r25, r1
    5384:	96 95       	lsr	r25
    5386:	87 95       	ror	r24
    5388:	97 f9       	bld	r25, 7
    538a:	08 95       	ret

0000538c <eeprom_read_byte>:
    538c:	f9 99       	sbic	0x1f, 1	; 31
    538e:	fe cf       	rjmp	.-4      	; 0x538c <eeprom_read_byte>
    5390:	92 bd       	out	0x22, r25	; 34
    5392:	81 bd       	out	0x21, r24	; 33
    5394:	f8 9a       	sbi	0x1f, 0	; 31
    5396:	99 27       	eor	r25, r25
    5398:	80 b5       	in	r24, 0x20	; 32
    539a:	08 95       	ret

0000539c <eeprom_write_byte>:
    539c:	26 2f       	mov	r18, r22

0000539e <eeprom_write_r18>:
    539e:	f9 99       	sbic	0x1f, 1	; 31
    53a0:	fe cf       	rjmp	.-4      	; 0x539e <eeprom_write_r18>
    53a2:	1f ba       	out	0x1f, r1	; 31
    53a4:	92 bd       	out	0x22, r25	; 34
    53a6:	81 bd       	out	0x21, r24	; 33
    53a8:	20 bd       	out	0x20, r18	; 32
    53aa:	0f b6       	in	r0, 0x3f	; 63
    53ac:	f8 94       	cli
    53ae:	fa 9a       	sbi	0x1f, 2	; 31
    53b0:	f9 9a       	sbi	0x1f, 1	; 31
    53b2:	0f be       	out	0x3f, r0	; 63
    53b4:	01 96       	adiw	r24, 0x01	; 1
    53b6:	08 95       	ret

000053b8 <_exit>:
    53b8:	f8 94       	cli

000053ba <__stop_program>:
    53ba:	ff cf       	rjmp	.-2      	; 0x53ba <__stop_program>
